
AVRASM ver. 2.1.17  C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm Thu Jan 05 01:28:33 2012

C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1026): warning: Register r5 already defined by the .DEF directive
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1027): warning: Register r4 already defined by the .DEF directive
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1028): warning: Register r7 already defined by the .DEF directive
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1029): warning: Register r6 already defined by the .DEF directive
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1030): warning: Register r9 already defined by the .DEF directive
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1031): warning: Register r8 already defined by the .DEF directive
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1032): warning: Register r10 already defined by the .DEF directive
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1033): warning: Register r13 already defined by the .DEF directive
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1034): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.4 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : Yes
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : No
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _maxh=R5
                 	.DEF _rychlost_presunu=R4
                 	.DEF _rychlost_presunu_zrychlene=R7
                 	.DEF _rychlost_presunu_vzad=R6
                 	.DEF _prog=R9
                 	.DEF _smer=R8
                 	.DEF _x1=R10
                 	.DEF _rychlost=R13
                 	.DEF _rychl=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 0056 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x19B:
000033 00d2
000034 d2c8
000035 0000
000036 0000      	.DB  0xD2,0x0,0xC8,0xD2,0x0,0x0,0x0,0x0
000037 c800      	.DB  0x0,0xC8
                 _0x0:
000038 7325
000039 6400
00003a 7461
00003b 0061      	.DB  0x25,0x73,0x0,0x64,0x61,0x74,0x61,0x0
00003c 696b
00003d 6b63
00003e 4c00
00003f 4445      	.DB  0x6B,0x69,0x63,0x6B,0x0,0x4C,0x45,0x44
000040 0030
000041 454c
000042 3144
000043 6200      	.DB  0x30,0x0,0x4C,0x45,0x44,0x31,0x0,0x62
000044 696c
000045 006b
000046 6d73
000047 7265      	.DB  0x6C,0x69,0x6B,0x0,0x73,0x6D,0x65,0x72
000048 7200
000049 6379
00004a 0068      	.DB  0x0,0x72,0x79,0x63,0x68,0x0
                 _0x202005F:
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1078): warning: .cseg .db misalignment - padding zero byte
00004b 0001      	.DB  0x1
                 _0x2020000:
00004c 4e2d
00004d 4e41
C:\Users\Jufo\git-jufino\AVR_robot\List\prog.asm(1080): warning: .cseg .db misalignment - padding zero byte
00004e 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
00004f 000a      	.DW  0x0A
000050 0004      	.DW  0x04
000051 0066      	.DW  _0x19B*2
                 
000052 0001      	.DW  0x01
000053 0292      	.DW  __seed_G101
000054 0096      	.DW  _0x202005F*2
                 
                 _0xFFFFFFFF:
000055 0000      	.DW  0
                 
                 __RESET:
000056 94f8      	CLI
000057 27ee      	CLR  R30
000058 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000059 e0f1      	LDI  R31,1
00005a bffb      	OUT  GICR,R31
00005b bfeb      	OUT  GICR,R30
00005c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005d e1f8      	LDI  R31,0x18
00005e bdf1      	OUT  WDTCR,R31
00005f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000060 e08d      	LDI  R24,(14-2)+1
000061 e0a2      	LDI  R26,2
000062 27bb      	CLR  R27
                 __CLEAR_REG:
000063 93ed      	ST   X+,R30
000064 958a      	DEC  R24
000065 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000066 e080      	LDI  R24,LOW(0x800)
000067 e098      	LDI  R25,HIGH(0x800)
000068 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c e9ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
00007e e5ef      	LDI  R30,LOW(0x85F)
00007f bfed      	OUT  SPL,R30
000080 e0e8      	LDI  R30,HIGH(0x85F)
000081 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000082 e6c0      	LDI  R28,LOW(0x260)
000083 e0d2      	LDI  R29,HIGH(0x260)
                 
000084 940c 0618 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project : Robot_sutaz Istambul
                 ;Version : V1.2
                 ;Date    : 21. 5. 2011
                 ;Author  : Juraj Fojtik
                 ;Company : PrianicSlovakia
                 ;
                 ;Chip type           : ATmega8535
                 ;Program type        : Application
                 ;Clock frequency     : 11,059200 MHz
                 ;Memory model        : Small
                 ;External RAM size   : 0
                 ;Data Stack size     : 128
                 ;*****************************************************/
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// I2C Bus function
                 ;#asm
                    .equ __i2c_port=0x12 ;PORTD
                    .equ __sda_bit=3
                    .equ __scl_bit=2
                 ; 0000 0016 #endasm
                 ;
                 ;//---------------------------------
                 ;//zmena rychlosti Uart
                 ;//---------------------------------
                 ;void nastav_9600(){
                 ; 0000 001B void nastav_9600(){
                 
                 	.CSEG
                 ; 0000 001C UCSRA=0x00;
                 ; 0000 001D UCSRB=0x18;
                 ; 0000 001E UCSRC=0x86;
                 ; 0000 001F UBRRH=0x00;
                 ; 0000 0020 UBRRL=0x47;
                 ; 0000 0021 }
                 ;void nastav_115200(){
                 ; 0000 0022 void nastav_115200(){
                 ; 0000 0023 UCSRA=0x00;
                 ; 0000 0024 UCSRB=0x18;
                 ; 0000 0025 UCSRC=0x86;
                 ; 0000 0026 UBRRH=0x00;
                 ; 0000 0027 UBRRL=0x05;
                 ; 0000 0028 }
                 ;//---------------------------------
                 ;//--------------------------------
                 ;// Kniznice
                 ;//--------------------------------
                 ;#include <i2c.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#define ADC_VREF_TYPE 0x60
                 ;#include "library_snimace.c"
                 ;#define Senzor_8 read_adc(3)
                 ;#define Senzor_7 read_adc(2)
                 ;#define Senzor_6 read_adc(1)
                 ;#define Senzor_5 read_adc(0)
                 ;#define Senzor_4 read_adc(4)
                 ;#define Senzor_3 read_adc(5)
                 ;#define Senzor_2 read_adc(6)
                 ;#define Senzor_1 read_adc(7)
                 ;#define Kick_sens   PINB.5                     //kicker senzor
                 ;#define Mot_sens    PINB.6                     //motor prudova ochrana
                 ;
                 ;//---------------------------------
                 ;// Nacitavanie ADC - 8bit
                 ;//---------------------------------
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0033 {
                 _read_adc:
                 ;ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
000086 940e 0830 	CALL SUBOPT_0x0
000088 66e0      	ORI  R30,LOW(0x60)
000089 b9e7      	OUT  0x7,R30
                 ;// Delay needed for the stabilization of the ADC input voltage
                 ;delay_us(10);
                +
00008a e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
00008b 958a     +DEC R24
00008c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ;// Start the AD conversion
                 ;ADCSRA|=0x40;
00008d 940e 0833 	CALL SUBOPT_0x1
00008f 64e0      	ORI  R30,0x40
000090 b9e6      	OUT  0x6,R30
                 ;// Wait for the AD conversion to complete
                 ;while ((ADCSRA & 0x10)==0);
                 _0x3:
000091 940e 0833 	CALL SUBOPT_0x1
000093 71e0      	ANDI R30,LOW(0x10)
000094 f3e1      	BREQ _0x3
                 ;ADCSRA|=0x10;
000095 940e 0833 	CALL SUBOPT_0x1
000097 61e0      	ORI  R30,0x10
000098 b9e6      	OUT  0x6,R30
                 ;return ADCH;
000099 b1e5      	IN   R30,0x5
00009a 9621      	ADIW R28,1
00009b 9508      	RET
                 ;}
                 ;//senzory lopty
                 ;//------------------------------
                 ;unsigned char maxh;
                 ;unsigned char inrange(unsigned char a, unsigned char b, unsigned char range){
                 _inrange:
                 ;if (a <= b && b <= (a+range))
                 ;	a -> Y+2
                 ;	b -> Y+1
                 ;	range -> Y+0
00009c 81e9      	LDD  R30,Y+1
00009d 81aa      	LDD  R26,Y+2
00009e 17ea      	CP   R30,R26
00009f f050      	BRLO _0x7
0000a0 27bb      	CLR  R27
0000a1 940e 0830 	CALL SUBOPT_0x0
0000a3 0fea      	ADD  R30,R26
0000a4 1ffb      	ADC  R31,R27
0000a5 81a9      	LDD  R26,Y+1
0000a6 e0b0      	LDI  R27,0
0000a7 17ea      	CP   R30,R26
0000a8 07fb      	CPC  R31,R27
0000a9 f40c      	BRGE _0x8
                 _0x7:
0000aa c002      	RJMP _0x6
                 _0x8:
                 ;    return 1;
0000ab e0e1      	LDI  R30,LOW(1)
0000ac c012      	RJMP _0x20A0007
                 ;if (b <= a && a <= (b+range))
                 _0x6:
0000ad 81ea      	LDD  R30,Y+2
0000ae 81a9      	LDD  R26,Y+1
0000af 17ea      	CP   R30,R26
0000b0 f050      	BRLO _0xA
0000b1 27bb      	CLR  R27
0000b2 940e 0830 	CALL SUBOPT_0x0
0000b4 0fea      	ADD  R30,R26
0000b5 1ffb      	ADC  R31,R27
0000b6 81aa      	LDD  R26,Y+2
0000b7 e0b0      	LDI  R27,0
0000b8 17ea      	CP   R30,R26
0000b9 07fb      	CPC  R31,R27
0000ba f40c      	BRGE _0xB
                 _0xA:
0000bb c002      	RJMP _0x9
                 _0xB:
                 ;    return 1;
0000bc e0e1      	LDI  R30,LOW(1)
0000bd c001      	RJMP _0x20A0007
                 ;else
                 _0x9:
                 ;    return 0;
0000be e0e0      	LDI  R30,LOW(0)
                 ;}
                 _0x20A0007:
0000bf 9623      	ADIW R28,3
0000c0 9508      	RET
                 ;unsigned char maxx(unsigned char maxvid/*maximalna hodnota videnia*/){
                 _maxx:
                 ;    unsigned char sens = 17;
                 ;    unsigned char s[8];
                 ;    unsigned char rozptyl = 8;
                 ;    maxh = 255;
0000c1 9728      	SBIW R28,8
0000c2 931a      	ST   -Y,R17
0000c3 930a      	ST   -Y,R16
                 ;	maxvid -> Y+10
                 ;	sens -> R17
                 ;	s -> Y+2
                 ;	rozptyl -> R16
0000c4 e111      	LDI  R17,17
0000c5 e008      	LDI  R16,8
0000c6 efef      	LDI  R30,LOW(255)
0000c7 2e5e      	MOV  R5,R30
                 ;    s[0] = Senzor_1;
0000c8 e0e7      	LDI  R30,LOW(7)
0000c9 93ea      	ST   -Y,R30
0000ca dfbb      	RCALL _read_adc
0000cb 83ea      	STD  Y+2,R30
                 ;    if (s[0] < maxvid ){
0000cc 85ea      	LDD  R30,Y+10
0000cd 81aa      	LDD  R26,Y+2
0000ce 17ae      	CP   R26,R30
0000cf f420      	BRSH _0xD
                 ;        if (s[0] <= maxh){
0000d0 165a      	CP   R5,R26
0000d1 f010      	BRLO _0xE
                 ;            sens = 1;
0000d2 e011      	LDI  R17,LOW(1)
                 ;            maxh = s[0];
0000d3 805a      	LDD  R5,Y+2
                 ;            }
                 ;    }
                 _0xE:
                 ;    s[1] = Senzor_2;
                 _0xD:
0000d4 e0e6      	LDI  R30,LOW(6)
0000d5 93ea      	ST   -Y,R30
0000d6 dfaf      	RCALL _read_adc
0000d7 83eb      	STD  Y+3,R30
                 ;    if (s[1] < maxvid ){
0000d8 85ea      	LDD  R30,Y+10
0000d9 81ab      	LDD  R26,Y+3
0000da 17ae      	CP   R26,R30
0000db f420      	BRSH _0xF
                 ;        if (s[1] <= maxh){
0000dc 165a      	CP   R5,R26
0000dd f010      	BRLO _0x10
                 ;            sens = 3;
0000de e013      	LDI  R17,LOW(3)
                 ;            maxh = s[1];
0000df 805b      	LDD  R5,Y+3
                 ;            }
                 ;    }
                 _0x10:
                 ;    s[2] = Senzor_3;
                 _0xF:
0000e0 e0e5      	LDI  R30,LOW(5)
0000e1 93ea      	ST   -Y,R30
0000e2 dfa3      	RCALL _read_adc
0000e3 83ec      	STD  Y+4,R30
                 ;    if (s[2] < maxvid ){
0000e4 85ea      	LDD  R30,Y+10
0000e5 81ac      	LDD  R26,Y+4
0000e6 17ae      	CP   R26,R30
0000e7 f420      	BRSH _0x11
                 ;        if (s[2] < maxh){
0000e8 15a5      	CP   R26,R5
0000e9 f410      	BRSH _0x12
                 ;            sens = 5;
0000ea e015      	LDI  R17,LOW(5)
                 ;            maxh = s[2];
0000eb 805c      	LDD  R5,Y+4
                 ;            }
                 ;    }
                 _0x12:
                 ;    s[3] = Senzor_4;
                 _0x11:
0000ec e0e4      	LDI  R30,LOW(4)
0000ed 93ea      	ST   -Y,R30
0000ee df97      	RCALL _read_adc
0000ef 83ed      	STD  Y+5,R30
                 ;    if (s[3] < maxvid ){
0000f0 85ea      	LDD  R30,Y+10
0000f1 81ad      	LDD  R26,Y+5
0000f2 17ae      	CP   R26,R30
0000f3 f420      	BRSH _0x13
                 ;        if (s[3] <= maxh){
0000f4 165a      	CP   R5,R26
0000f5 f010      	BRLO _0x14
                 ;            sens = 7;
0000f6 e017      	LDI  R17,LOW(7)
                 ;            maxh = s[3];
0000f7 805d      	LDD  R5,Y+5
                 ;            }
                 ;    }
                 _0x14:
                 ;    s[4] = Senzor_5;
                 _0x13:
0000f8 e0e0      	LDI  R30,LOW(0)
0000f9 93ea      	ST   -Y,R30
0000fa df8b      	RCALL _read_adc
0000fb 83ee      	STD  Y+6,R30
                 ;    if (s[4] < maxvid ){
0000fc 85ea      	LDD  R30,Y+10
0000fd 81ae      	LDD  R26,Y+6
0000fe 17ae      	CP   R26,R30
0000ff f420      	BRSH _0x15
                 ;        if (s[4] <= maxh){
000100 165a      	CP   R5,R26
000101 f010      	BRLO _0x16
                 ;            sens = 9;
000102 e019      	LDI  R17,LOW(9)
                 ;            maxh = s[4];
000103 805e      	LDD  R5,Y+6
                 ;            }
                 ;    }
                 _0x16:
                 ;    s[5] = Senzor_6;
                 _0x15:
000104 e0e1      	LDI  R30,LOW(1)
000105 93ea      	ST   -Y,R30
000106 df7f      	RCALL _read_adc
000107 83ef      	STD  Y+7,R30
                 ;    if (s[5] < maxvid ){
000108 85ea      	LDD  R30,Y+10
000109 81af      	LDD  R26,Y+7
00010a 17ae      	CP   R26,R30
00010b f420      	BRSH _0x17
                 ;        if (s[5] <= maxh){
00010c 165a      	CP   R5,R26
00010d f010      	BRLO _0x18
                 ;            sens = 11;
00010e e01b      	LDI  R17,LOW(11)
                 ;            maxh = s[5];
00010f 805f      	LDD  R5,Y+7
                 ;            }
                 ;    }
                 _0x18:
                 ;    s[6] = Senzor_7;
                 _0x17:
000110 e0e2      	LDI  R30,LOW(2)
000111 93ea      	ST   -Y,R30
000112 df73      	RCALL _read_adc
000113 87e8      	STD  Y+8,R30
                 ;    if (s[6] < maxvid ){
000114 85ea      	LDD  R30,Y+10
000115 85a8      	LDD  R26,Y+8
000116 17ae      	CP   R26,R30
000117 f420      	BRSH _0x19
                 ;        if (s[6] <= maxh){
000118 165a      	CP   R5,R26
000119 f010      	BRLO _0x1A
                 ;            sens = 13;
00011a e01d      	LDI  R17,LOW(13)
                 ;            maxh = s[6];
00011b 8458      	LDD  R5,Y+8
                 ;            }
                 ;    }
                 _0x1A:
                 ;    s[7] = Senzor_8;
                 _0x19:
00011c e0e3      	LDI  R30,LOW(3)
00011d 93ea      	ST   -Y,R30
00011e df67      	RCALL _read_adc
00011f 87e9      	STD  Y+9,R30
                 ;    if (s[7] < maxvid ){
000120 85ea      	LDD  R30,Y+10
000121 85a9      	LDD  R26,Y+9
000122 17ae      	CP   R26,R30
000123 f420      	BRSH _0x1B
                 ;        if (s[7] <= maxh){
000124 165a      	CP   R5,R26
000125 f010      	BRLO _0x1C
                 ;            sens = 15;
000126 e01f      	LDI  R17,LOW(15)
                 ;            maxh = s[7];
000127 8459      	LDD  R5,Y+9
                 ;            }
                 ;    }
                 _0x1C:
                 ;    if (sens == 1){
                 _0x1B:
000128 3011      	CPI  R17,1
000129 f451      	BRNE _0x1D
                 ;        if (inrange(s[0],s[1],rozptyl) == 1)
00012a 940e 0836 	CALL SUBOPT_0x2
00012c f411      	BRNE _0x1E
                 ;            sens = 2;
00012d e012      	LDI  R17,LOW(2)
                 ;        else if(inrange(s[7],s[0],rozptyl) == 1)
00012e c004      	RJMP _0x1F
                 _0x1E:
00012f 940e 083f 	CALL SUBOPT_0x3
000131 f409      	BRNE _0x20
                 ;            sens = 16;
000132 e110      	LDI  R17,LOW(16)
                 ;            }
                 _0x20:
                 _0x1F:
                 ;    else if (sens == 3){
000133 c053      	RJMP _0x21
                 _0x1D:
000134 3013      	CPI  R17,3
000135 f451      	BRNE _0x22
                 ;        if (inrange(s[1],s[2],rozptyl) == 1)
000136 940e 0848 	CALL SUBOPT_0x4
000138 f411      	BRNE _0x23
                 ;            sens = 4;
000139 e014      	LDI  R17,LOW(4)
                 ;        else if(inrange(s[0],s[1],rozptyl) == 1)
00013a c004      	RJMP _0x24
                 _0x23:
00013b 940e 0836 	CALL SUBOPT_0x2
00013d f409      	BRNE _0x25
                 ;            sens = 2;
00013e e012      	LDI  R17,LOW(2)
                 ;            }
                 _0x25:
                 _0x24:
                 ;    else if (sens == 5){
00013f c047      	RJMP _0x26
                 _0x22:
000140 3015      	CPI  R17,5
000141 f451      	BRNE _0x27
                 ;        if (inrange(s[2],s[3],rozptyl) == 1)
000142 940e 0851 	CALL SUBOPT_0x5
000144 f411      	BRNE _0x28
                 ;            sens = 6;
000145 e016      	LDI  R17,LOW(6)
                 ;        else if(inrange(s[1],s[2],rozptyl) == 1)
000146 c004      	RJMP _0x29
                 _0x28:
000147 940e 0848 	CALL SUBOPT_0x4
000149 f409      	BRNE _0x2A
                 ;            sens = 4;
00014a e014      	LDI  R17,LOW(4)
                 ;            }
                 _0x2A:
                 _0x29:
                 ;    else if (sens == 7){
00014b c03b      	RJMP _0x2B
                 _0x27:
00014c 3017      	CPI  R17,7
00014d f451      	BRNE _0x2C
                 ;        if (inrange(s[3],s[4],rozptyl) == 1)
00014e 940e 085a 	CALL SUBOPT_0x6
000150 f411      	BRNE _0x2D
                 ;            sens = 8;
000151 e018      	LDI  R17,LOW(8)
                 ;        else if(inrange(s[2],s[3],rozptyl) == 1)
000152 c004      	RJMP _0x2E
                 _0x2D:
000153 940e 0851 	CALL SUBOPT_0x5
000155 f409      	BRNE _0x2F
                 ;            sens = 6;
000156 e016      	LDI  R17,LOW(6)
                 ;            }
                 _0x2F:
                 _0x2E:
                 ;    else if (sens == 9){
000157 c02f      	RJMP _0x30
                 _0x2C:
000158 3019      	CPI  R17,9
000159 f451      	BRNE _0x31
                 ;        if (inrange(s[4],s[5],rozptyl) == 1)
00015a 940e 0863 	CALL SUBOPT_0x7
00015c f411      	BRNE _0x32
                 ;            sens = 10;
00015d e01a      	LDI  R17,LOW(10)
                 ;        else if(inrange(s[3],s[4],rozptyl) == 1)
00015e c004      	RJMP _0x33
                 _0x32:
00015f 940e 085a 	CALL SUBOPT_0x6
000161 f409      	BRNE _0x34
                 ;            sens = 8;
000162 e018      	LDI  R17,LOW(8)
                 ;            }
                 _0x34:
                 _0x33:
                 ;    else if (sens == 11){
000163 c023      	RJMP _0x35
                 _0x31:
000164 301b      	CPI  R17,11
000165 f451      	BRNE _0x36
                 ;        if (inrange(s[5],s[6],rozptyl) == 1)
000166 940e 086c 	CALL SUBOPT_0x8
000168 f411      	BRNE _0x37
                 ;            sens = 12;
000169 e01c      	LDI  R17,LOW(12)
                 ;        else if(inrange(s[4],s[5],rozptyl) == 1)
00016a c004      	RJMP _0x38
                 _0x37:
00016b 940e 0863 	CALL SUBOPT_0x7
00016d f409      	BRNE _0x39
                 ;            sens = 10;
00016e e01a      	LDI  R17,LOW(10)
                 ;            }
                 _0x39:
                 _0x38:
                 ;    else if (sens == 13){
00016f c017      	RJMP _0x3A
                 _0x36:
000170 301d      	CPI  R17,13
000171 f451      	BRNE _0x3B
                 ;        if (inrange(s[6],s[7],rozptyl) == 1)
000172 940e 0875 	CALL SUBOPT_0x9
000174 f411      	BRNE _0x3C
                 ;            sens = 14;
000175 e01e      	LDI  R17,LOW(14)
                 ;        else if(inrange(s[5],s[6],rozptyl) == 1)
000176 c004      	RJMP _0x3D
                 _0x3C:
000177 940e 086c 	CALL SUBOPT_0x8
000179 f409      	BRNE _0x3E
                 ;            sens = 12;
00017a e01c      	LDI  R17,LOW(12)
                 ;            }
                 _0x3E:
                 _0x3D:
                 ;    else if (sens == 15){
00017b c00b      	RJMP _0x3F
                 _0x3B:
00017c 301f      	CPI  R17,15
00017d f449      	BRNE _0x40
                 ;        if (inrange(s[7],s[0],rozptyl) == 1)
00017e 940e 083f 	CALL SUBOPT_0x3
000180 f411      	BRNE _0x41
                 ;            sens = 16;
000181 e110      	LDI  R17,LOW(16)
                 ;        else if(inrange(s[6],s[7],rozptyl) == 1)
000182 c004      	RJMP _0x42
                 _0x41:
000183 940e 0875 	CALL SUBOPT_0x9
000185 f409      	BRNE _0x43
                 ;            sens = 14;
000186 e01e      	LDI  R17,LOW(14)
                 ;            }
                 _0x43:
                 _0x42:
                 ;return sens;
                 _0x40:
                 _0x3F:
                 _0x3A:
                 _0x35:
                 _0x30:
                 _0x2B:
                 _0x26:
                 _0x21:
000187 2fe1      	MOV  R30,R17
000188 8119      	LDD  R17,Y+1
000189 8108      	LDD  R16,Y+0
00018a 962b      	ADIW R28,11
00018b 9508      	RET
                 ;}
                 ;//kompas
                 ;//------------------------------
                 ;unsigned char compass_2(){
                 ;    unsigned char value;
                 ;    i2c_start();
                 ;	value -> R17
                 ;    i2c_write(0xC0);
                 ;    i2c_write(1);
                 ;    i2c_start();
                 ;    i2c_write(0xC1);
                 ;    value = i2c_read(0);
                 ;    i2c_stop();
                 ;    return value;
                 ;}
                 ;//------------------------------
                 ;void cmps03_scanmode(unsigned char mode){
                 _cmps03_scanmode:
                 ;        i2c_start();
                 ;	mode -> Y+0
00018c 940e 087e 	CALL SUBOPT_0xA
                 ;        i2c_write(0xC0);
                 ;        i2c_write(0x12);
                 ;        i2c_write(0x55);
                 ;        i2c_write(0x5A);
                 ;        i2c_write(0xA5);
                 ;        i2c_write(0x09 + mode);
00018e 940e 0830 	CALL SUBOPT_0x0
000190 9639      	ADIW R30,9
000191 93ea      	ST   -Y,R30
000192 940e 099a 	CALL _i2c_write
                 ;        i2c_stop();
000194 940e 0975 	CALL _i2c_stop
                 ;}
000196 940c 0642 	JMP  _0x20A0005
                 ;void cmps03_reset(void){
                 _cmps03_reset:
                 ;        i2c_start();
000198 940e 087e 	CALL SUBOPT_0xA
                 ;        i2c_write(0xC0);
                 ;        i2c_write(0x12);
                 ;        i2c_write(0x55);
                 ;        i2c_write(0x5A);
                 ;        i2c_write(0xA5);
                 ;        i2c_write(0xF2);
00019a efe2      	LDI  R30,LOW(242)
00019b 93ea      	ST   -Y,R30
00019c 940e 099a 	CALL _i2c_write
                 ;        i2c_stop();
00019e 940e 0975 	CALL _i2c_stop
                 ;}
0001a0 9508      	RET
                 ;int cmps03_read(unsigned char mode){
                 _cmps03_read:
                 ;    unsigned char a,b;
                 ;    if (mode==1){
0001a1 940e 0894 	CALL SUBOPT_0xB
                 ;	mode -> Y+2
                 ;	a -> R17
                 ;	b -> R16
0001a3 f491      	BRNE _0x44
                 ;        i2c_start();
0001a4 940e 0899 	CALL SUBOPT_0xC
                 ;        i2c_write(0xC0);
                 ;        i2c_write(0x01);
0001a6 e0e1      	LDI  R30,LOW(1)
0001a7 940e 089f 	CALL SUBOPT_0xD
                 ;        i2c_start();
                 ;        i2c_write(0xC1);
                 ;        a = i2c_read(0);
0001a9 e0e0      	LDI  R30,LOW(0)
0001aa 93ea      	ST   -Y,R30
0001ab 940e 097f 	CALL _i2c_read
0001ad 2f1e      	MOV  R17,R30
                 ;        i2c_stop();
0001ae 940e 0975 	CALL _i2c_stop
                 ;        return a;
0001b0 2fe1      	MOV  R30,R17
0001b1 e0f0      	LDI  R31,0
0001b2 8119      	LDD  R17,Y+1
0001b3 8108      	LDD  R16,Y+0
0001b4 940c 0654 	JMP  _0x20A0004
                 ;    }
                 ;    else if(mode==2){
                 _0x44:
0001b6 81aa      	LDD  R26,Y+2
0001b7 30a2      	CPI  R26,LOW(0x2)
0001b8 f501      	BRNE _0x46
                 ;        i2c_start();
0001b9 940e 0899 	CALL SUBOPT_0xC
                 ;        i2c_write(0xC0);
                 ;        i2c_write(0x02);
0001bb e0e2      	LDI  R30,LOW(2)
0001bc 940e 089f 	CALL SUBOPT_0xD
                 ;        i2c_start();
                 ;        i2c_write(0xC1);
                 ;        a = i2c_read(1);
0001be e0e1      	LDI  R30,LOW(1)
0001bf 93ea      	ST   -Y,R30
0001c0 940e 097f 	CALL _i2c_read
0001c2 2f1e      	MOV  R17,R30
                 ;        b = i2c_read(0);
0001c3 e0e0      	LDI  R30,LOW(0)
0001c4 93ea      	ST   -Y,R30
0001c5 940e 097f 	CALL _i2c_read
0001c7 2f0e      	MOV  R16,R30
                 ;        i2c_stop();
0001c8 940e 0975 	CALL _i2c_stop
                 ;        return (a * 256 + b);
0001ca 2fa1      	MOV  R26,R17
0001cb e0b0      	LDI  R27,0
0001cc e0e0      	LDI  R30,LOW(256)
0001cd e0f1      	LDI  R31,HIGH(256)
0001ce 940e 09dc 	CALL __MULW12
0001d0 01df      	MOVW R26,R30
0001d1 2fe0      	MOV  R30,R16
0001d2 e0f0      	LDI  R31,0
0001d3 0fea      	ADD  R30,R26
0001d4 1ffb      	ADC  R31,R27
0001d5 8119      	LDD  R17,Y+1
0001d6 8108      	LDD  R16,Y+0
0001d7 940c 0654 	JMP  _0x20A0004
                 ;    }
                 ;    else{
                 _0x46:
                 ;        return -1;
0001d9 efef      	LDI  R30,LOW(65535)
0001da efff      	LDI  R31,HIGH(65535)
0001db 8119      	LDD  R17,Y+1
0001dc 8108      	LDD  R16,Y+0
0001dd 940c 0654 	JMP  _0x20A0004
                 ;    }
                 ;}
                 ;int prepocetcompasu(int stupen, unsigned char mode){
                 _prepocetcompasu:
                 ;    int prepocet;
                 ;    if (mode == 1){
0001df 940e 0894 	CALL SUBOPT_0xB
                 ;	stupen -> Y+3
                 ;	mode -> Y+2
                 ;	prepocet -> R16,R17
0001e1 f471      	BRNE _0x48
                 ;        prepocet = cmps03_read(1) - stupen;
0001e2 e0e1      	LDI  R30,LOW(1)
0001e3 940e 08a8 	CALL SUBOPT_0xE
                 ;        if (prepocet >= 255){
                +
0001e5 3f0f     +CPI R16 , LOW ( 255 )
0001e6 e0e0     +LDI R30 , HIGH ( 255 )
0001e7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,255
0001e8 f014      	BRLT _0x49
                 ;            prepocet = prepocet - 255;
                +
0001e9 5f0f     +SUBI R16 , LOW ( 255 )
0001ea 4010     +SBCI R17 , HIGH ( 255 )
                 	__SUBWRN 16,17,255
                 ;        }
                 ;        if (prepocet < 0){
                 _0x49:
0001eb 2311      	TST  R17
0001ec f412      	BRPL _0x4A
                 ;            prepocet = prepocet + 255;
                +
0001ed 5001     +SUBI R16 , LOW ( - 255 )
0001ee 4f1f     +SBCI R17 , HIGH ( - 255 )
                 	__ADDWRN 16,17,255
                 ;        }
                 ;    }
                 _0x4A:
                 ;    else {
0001ef c00d      	RJMP _0x4B
                 _0x48:
                 ;        prepocet = cmps03_read(2) - stupen;
0001f0 e0e2      	LDI  R30,LOW(2)
0001f1 940e 08a8 	CALL SUBOPT_0xE
                 ;        if (prepocet > 3599){
                +
0001f3 3100     +CPI R16 , LOW ( 3600 )
0001f4 e0ee     +LDI R30 , HIGH ( 3600 )
0001f5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3600
0001f6 f014      	BRLT _0x4C
                 ;            prepocet = prepocet - 3599;
                +
0001f7 500f     +SUBI R16 , LOW ( 3599 )
0001f8 401e     +SBCI R17 , HIGH ( 3599 )
                 	__SUBWRN 16,17,3599
                 ;        }
                 ;        if (prepocet < 0){
                 _0x4C:
0001f9 2311      	TST  R17
0001fa f412      	BRPL _0x4D
                 ;            prepocet = prepocet + 3599;
                +
0001fb 5f01     +SUBI R16 , LOW ( - 3599 )
0001fc 4f11     +SBCI R17 , HIGH ( - 3599 )
                 	__ADDWRN 16,17,3599
                 ;        }
                 ;    }
                 _0x4D:
                 _0x4B:
                 ;
                 ;
                 ;    return prepocet;
0001fd 01f8      	MOVW R30,R16
0001fe 8119      	LDD  R17,Y+1
0001ff 8108      	LDD  R16,Y+0
000200 940c 0676 	JMP  _0x20A0003
                 ;}
                 ;//------------------------------
                 ;//Ultrazvuky
                 ;//------------------------------
                 ;int ult_lavy()
                 ;{
                 ;   char ulth[3];
                 ;   int vysl;
                 ;   nastav_9600();
                 ;	ulth -> Y+2
                 ;	vysl -> R16,R17
                 ;    PORTC.5 = 1 ;
                 ;    delay_ms(10);
                 ;    while(getchar() != 0x52);
                 ;    ulth[0] = getchar();
                 ;    ulth[1] = getchar();
                 ;    ulth[2] = getchar();
                 ;    PORTC.5 = 0 ;
                 ;    vysl = atoi(ulth);
                 ;          nastav_115200();
                 ;    delay_ms(5);
                 ;    return vysl;
                 ;}
                 ;int ult_zadny()
                 ;{
                 ;   char ulth[3];
                 ;   int vysl;
                 ;   nastav_9600();
                 ;	ulth -> Y+2
                 ;	vysl -> R16,R17
                 ;   PORTC.7 = 1 ;
                 ;   delay_ms(10);
                 ;    while(getchar() != 0x52);
                 ;    ulth[0] = getchar();
                 ;    ulth[1] = getchar();
                 ;    ulth[2] = getchar();
                 ;    PORTC.7 = 0 ;
                 ;    vysl = atoi(ulth);
                 ;          nastav_115200();
                 ;    delay_ms(5);
                 ;    return vysl;
                 ;}
                 ;//------------------------------
                 ;#include "protocol.c"
                 ;#include <string.h>
                 ;
                 ;#define byte_for_dat 1        //2 na bit_for_dat = pocet dat ktore sa daju prenpiest
                 ;#define byte_for_char 1        //2 na bit_for_char = pocet znakov v jednotlivych datach
                 ;#define char_for_array 10    //pocet znakov pre pole
                 ;
                 ;//funkcia zakoduje data do klastroveho protokolu, data_vystup = tu su zakodovane data, data_vstup=je to
                 ;//vstup vo forme multiarray, size = velkost pola
                 ;int zakoduj(char data_vystup[],char data_vstup[][char_for_array],int size){
                 ; 0000 0034 int zakoduj(char data_vystup[],char data_vstup[][10    ],int size){
                 ;    int posun = 0;
                 ;    int i=0;
                 ;    int z=0;
                 ;//urcuje pocet dat-----------------------
                 ;    data_vystup[posun] = size&0xFF;
                 ;	data_vystup -> Y+10
                 ;	data_vstup -> Y+8
                 ;	size -> Y+6
                 ;	posun -> R16,R17
                 ;	i -> R18,R19
                 ;	z -> R20,R21
                 ;    posun++;
                 ;//----------------------------------------
                 ;    for(i=0;i < size;i++){
                 ;//pocet znakov v nasledujucom data------------------
                 ;        data_vystup[posun] = strlen(data_vstup[i])&0xFF;
                 ;        posun++;
                 ;//vkladanie data do znakov--------------------------
                 ;        for(z=0;z< strlen(data_vstup[i]);z++){
                 ;            data_vystup[posun] = data_vstup[i][z];    //vlozi hodnotu znaku
                 ;            posun++;
                 ;        }
                 ;//--------------------------------------------------
                 ;    }
                 ;    return posun;
                 ;}
                 ;//data_vystup je multiarray = vystupne rozkodovane data
                 ;//data_vstup je char = zakodovane data v klastrovom protokole
                 ;int dekoduj(char data_vystup[][char_for_array],char data_vstup[]){
                 ;    int posun=0;
                 ;    int size=0;
                 ;    int poc_znakov=0;
                 ;    int i=0;
                 ;    int z=0;
                 ;//nacita pocet dat--------------------
                 ;    size=data_vstup[posun];
                 ;	data_vystup -> Y+12
                 ;	data_vstup -> Y+10
                 ;	posun -> R16,R17
                 ;	size -> R18,R19
                 ;	poc_znakov -> R20,R21
                 ;	i -> Y+8
                 ;	z -> Y+6
                 ;    posun++;
                 ;//------------------------------------
                 ;    for(i=0;i < size;i++){
                 ;//------------------------------------
                 ;        poc_znakov=data_vstup[posun];
                 ;        posun++;
                 ;//prijma znaky----------------------
                 ;        for(z=0;z< poc_znakov;z++){
                 ;            data_vystup[i][z] = data_vstup[posun];
                 ;            posun++;
                 ;        }
                 ;//------------------------------------------
                 ;    }
                 ;    return posun;
                 ;}
                 ;void odosli_data_beagle(char data[][char_for_array],int pocet_dat){
                 ;    char buffer[128];
                 ;    zakoduj(buffer,data,pocet_dat);
                 ;	data -> Y+130
                 ;	pocet_dat -> Y+128
                 ;	buffer -> Y+0
                 ;    puts(buffer);
                 ;}
                 ;char datax[5][char_for_array];
                 ;void prijem_dat(){
                 ;//---------------------------
                 ;    char str[128];
                 ;    scanf ("%s",str);
                 ;	str -> Y+0
                 ;    dekoduj(datax,str);
                 ;}
                 ;//------------------------------
                 ;//------------------------------
                 ;#include "library_motor.c"
                 ;//kniznice pre riadeie motorov
                 ;//---------------------------------
                 ;void motor1(int rychlost ){
                 ; 0000 0035 void motor1(int rychlost ){
                 _motor1:
                 ;    if (rychlost > 0){
                 ;	rychlost -> Y+0
000202 940e 08b2 	CALL SUBOPT_0xF
000204 f41c      	BRGE _0x68
                 ;        PORTC.3 = 1;
000205 9aab      	SBI  0x15,3
                 ;        PORTC.4 = 0;
000206 98ac      	CBI  0x15,4
                 ;    }
                 ;    else if(rychlost == 0){
000207 c00b      	RJMP _0x6D
                 _0x68:
000208 81e8      	LD   R30,Y
000209 81f9      	LDD  R31,Y+1
00020a 9730      	SBIW R30,0
00020b f419      	BRNE _0x6E
                 ;        PORTC.3 = 0;
00020c 98ab      	CBI  0x15,3
                 ;        PORTC.4 = 0;
00020d 98ac      	CBI  0x15,4
                 ;    }
                 ;    else{
00020e c004      	RJMP _0x73
                 _0x6E:
                 ;        PORTC.3 = 0;
00020f 98ab      	CBI  0x15,3
                 ;        PORTC.4 = 1;
000210 9aac      	SBI  0x15,4
                 ;        rychlost = rychlost*(-1);
000211 940e 08b7 	CALL SUBOPT_0x10
                 ;    }
                 _0x73:
                 _0x6D:
                 ;    OCR1B = rychlost;
000213 81e8      	LD   R30,Y
000214 81f9      	LDD  R31,Y+1
000215 bdf9      	OUT  0x28+1,R31
000216 bde8      	OUT  0x28,R30
                 ;}
000217 c263      	RJMP _0x20A0006
                 ;void motor3(int rychlost){
                 _motor3:
                 ;    if (rychlost > 0){
                 ;	rychlost -> Y+0
000218 940e 08b2 	CALL SUBOPT_0xF
00021a f41c      	BRGE _0x78
                 ;        PORTC.2 = 0;
00021b 98aa      	CBI  0x15,2
                 ;        PORTD.6 = 1;
00021c 9a96      	SBI  0x12,6
                 ;    }
                 ;    else if(rychlost == 0){
00021d c00b      	RJMP _0x7D
                 _0x78:
00021e 81e8      	LD   R30,Y
00021f 81f9      	LDD  R31,Y+1
000220 9730      	SBIW R30,0
000221 f419      	BRNE _0x7E
                 ;        PORTC.2 = 0;
000222 98aa      	CBI  0x15,2
                 ;        PORTD.6 = 0;
000223 9896      	CBI  0x12,6
                 ;    }
                 ;    else{
000224 c004      	RJMP _0x83
                 _0x7E:
                 ;        PORTC.2 = 1;
000225 9aaa      	SBI  0x15,2
                 ;        PORTD.6 = 0;
000226 9896      	CBI  0x12,6
                 ;        rychlost = rychlost*(-1);
000227 940e 08b7 	CALL SUBOPT_0x10
                 ;    }
                 _0x83:
                 _0x7D:
                 ;    OCR1A = rychlost;
000229 81e8      	LD   R30,Y
00022a 81f9      	LDD  R31,Y+1
00022b bdfb      	OUT  0x2A+1,R31
00022c bdea      	OUT  0x2A,R30
                 ;}
00022d c24d      	RJMP _0x20A0006
                 ;void motor2(int rychlost){
                 _motor2:
                 ;    if (rychlost > 0){
                 ;	rychlost -> Y+0
00022e 940e 08b2 	CALL SUBOPT_0xF
000230 f41c      	BRGE _0x88
                 ;        PORTC.1 = 1;
000231 9aa9      	SBI  0x15,1
                 ;        PORTC.0 = 0;
000232 98a8      	CBI  0x15,0
                 ;    }
                 ;    else if(rychlost == 0){
000233 c00b      	RJMP _0x8D
                 _0x88:
000234 81e8      	LD   R30,Y
000235 81f9      	LDD  R31,Y+1
000236 9730      	SBIW R30,0
000237 f419      	BRNE _0x8E
                 ;        PORTC.1 = 0;
000238 98a9      	CBI  0x15,1
                 ;        PORTC.0 = 0;
000239 98a8      	CBI  0x15,0
                 ;    }
                 ;    else{
00023a c004      	RJMP _0x93
                 _0x8E:
                 ;        PORTC.1 = 0;
00023b 98a9      	CBI  0x15,1
                 ;        PORTC.0 = 1;
00023c 9aa8      	SBI  0x15,0
                 ;        rychlost = rychlost*(-1);
00023d 940e 08b7 	CALL SUBOPT_0x10
                 ;    }
                 _0x93:
                 _0x8D:
                 ;    OCR2 = rychlost;
00023f 81e8      	LD   R30,Y
000240 81f9      	LDD  R31,Y+1
000241 bde3      	OUT  0x23,R30
                 ;}
000242 c238      	RJMP _0x20A0006
                 ;void motor4(int rychlost){
                 _motor4:
                 ;    if (rychlost > 0){
                 ;	rychlost -> Y+0
000243 940e 08b2 	CALL SUBOPT_0xF
000245 f41c      	BRGE _0x98
                 ;        PORTB.1 = 0;
000246 98c1      	CBI  0x18,1
                 ;        PORTB.2 = 1;
000247 9ac2      	SBI  0x18,2
                 ;    }
                 ;    else if(rychlost == 0){
000248 c00b      	RJMP _0x9D
                 _0x98:
000249 81e8      	LD   R30,Y
00024a 81f9      	LDD  R31,Y+1
00024b 9730      	SBIW R30,0
00024c f419      	BRNE _0x9E
                 ;        PORTB.1 = 0;
00024d 98c1      	CBI  0x18,1
                 ;        PORTB.2 = 0;
00024e 98c2      	CBI  0x18,2
                 ;    }
                 ;    else{
00024f c004      	RJMP _0xA3
                 _0x9E:
                 ;        PORTB.1 = 1;
000250 9ac1      	SBI  0x18,1
                 ;        PORTB.2 = 0;
000251 98c2      	CBI  0x18,2
                 ;        rychlost = rychlost*(-1);
000252 940e 08b7 	CALL SUBOPT_0x10
                 ;    }
                 _0xA3:
                 _0x9D:
                 ;    OCR0 = rychlost;
000254 81e8      	LD   R30,Y
000255 81f9      	LDD  R31,Y+1
000256 bfec      	OUT  0x3C,R30
                 ;}
000257 c223      	RJMP _0x20A0006
                 ;void m_0(unsigned char rychlost){
                 _m_0:
                 ;motor1(-rychlost);
                 ;	rychlost -> Y+0
000258 940e 0830 	CALL SUBOPT_0x0
00025a 940e 08c0 	CALL SUBOPT_0x11
00025c 940e 08c5 	CALL SUBOPT_0x12
                 ;motor2(-rychlost);
00025e 940e 08c0 	CALL SUBOPT_0x11
000260 940e 08c8 	CALL SUBOPT_0x13
                 ;motor3(rychlost);
000262 940e 08cb 	CALL SUBOPT_0x14
                 ;motor4(rychlost);
000264 940e 08d0 	CALL SUBOPT_0x15
                 ;}
000266 940c 0642 	JMP  _0x20A0005
                 ;void m_45(unsigned char rychlost){
                 _m_45:
                 ;motor1(0);
                 ;	rychlost -> Y+0
000268 940e 08d4 	CALL SUBOPT_0x16
00026a 940e 08c5 	CALL SUBOPT_0x12
                 ;motor2(-rychlost);
00026c 940e 08c0 	CALL SUBOPT_0x11
00026e 940e 08d9 	CALL SUBOPT_0x17
                 ;motor3(0);
                 ;motor4(rychlost);
000270 940e 08d0 	CALL SUBOPT_0x15
                 ;}
000272 940c 0642 	JMP  _0x20A0005
                 ;void m_90(unsigned char rychlost){
                 _m_90:
                 ;motor1(rychlost);
                 ;	rychlost -> Y+0
000274 940e 0830 	CALL SUBOPT_0x0
000276 93fa      	ST   -Y,R31
000277 93ea      	ST   -Y,R30
000278 940e 08c5 	CALL SUBOPT_0x12
                 ;motor2(-rychlost);
00027a 940e 08c0 	CALL SUBOPT_0x11
00027c 940e 08c8 	CALL SUBOPT_0x13
                 ;motor3(-rychlost);
00027e 940e 08c0 	CALL SUBOPT_0x11
000280 df97      	RCALL _motor3
                 ;motor4(rychlost);
000281 940e 0830 	CALL SUBOPT_0x0
000283 940e 08d0 	CALL SUBOPT_0x15
                 ;}
000285 940c 0642 	JMP  _0x20A0005
                 ;void m_135(unsigned char rychlost){
                 _m_135:
                 ;motor1(rychlost);
                 ;	rychlost -> Y+0
000287 940e 0830 	CALL SUBOPT_0x0
000289 93fa      	ST   -Y,R31
00028a 93ea      	ST   -Y,R30
00028b 940e 08de 	CALL SUBOPT_0x18
                 ;motor2(0);
00028d 940e 08c8 	CALL SUBOPT_0x13
                 ;motor3(-rychlost);
00028f 940e 08c0 	CALL SUBOPT_0x11
000291 940e 08e1 	CALL SUBOPT_0x19
                 ;motor4(0);
                 ;}
000293 940c 0642 	JMP  _0x20A0005
                 ;void m_180(unsigned char rychlost){
                 _m_180:
                 ;motor1(rychlost);
                 ;	rychlost -> Y+0
000295 940e 0830 	CALL SUBOPT_0x0
000297 93fa      	ST   -Y,R31
000298 93ea      	ST   -Y,R30
000299 940e 08c5 	CALL SUBOPT_0x12
                 ;motor2(rychlost);
00029b 93fa      	ST   -Y,R31
00029c 93ea      	ST   -Y,R30
00029d 940e 08c8 	CALL SUBOPT_0x13
                 ;motor3(-rychlost);
00029f 940e 08c0 	CALL SUBOPT_0x11
0002a1 df76      	RCALL _motor3
                 ;motor4(-rychlost);
0002a2 940e 0830 	CALL SUBOPT_0x0
0002a4 940e 08c0 	CALL SUBOPT_0x11
0002a6 df9c      	RCALL _motor4
                 ;}
0002a7 940c 0642 	JMP  _0x20A0005
                 ;void m_225(unsigned char rychlost){
                 _m_225:
                 ;motor1(0);
                 ;	rychlost -> Y+0
0002a9 940e 08d4 	CALL SUBOPT_0x16
0002ab 940e 08c5 	CALL SUBOPT_0x12
                 ;motor2(rychlost);
0002ad 93fa      	ST   -Y,R31
0002ae 93ea      	ST   -Y,R30
0002af 940e 08d9 	CALL SUBOPT_0x17
                 ;motor3(0);
                 ;motor4(-rychlost);
0002b1 940e 08c0 	CALL SUBOPT_0x11
0002b3 df8f      	RCALL _motor4
                 ;}
0002b4 940c 0642 	JMP  _0x20A0005
                 ;void m_270(unsigned char rychlost){
                 _m_270:
                 ;motor1(-rychlost);
                 ;	rychlost -> Y+0
0002b6 940e 0830 	CALL SUBOPT_0x0
0002b8 940e 08c0 	CALL SUBOPT_0x11
0002ba 940e 08c5 	CALL SUBOPT_0x12
                 ;motor2(rychlost);
0002bc 93fa      	ST   -Y,R31
0002bd 93ea      	ST   -Y,R30
0002be 940e 08c8 	CALL SUBOPT_0x13
                 ;motor3(rychlost);
0002c0 940e 08cb 	CALL SUBOPT_0x14
                 ;motor4(-rychlost);
0002c2 940e 08c0 	CALL SUBOPT_0x11
0002c4 df7e      	RCALL _motor4
                 ;}
0002c5 940c 0642 	JMP  _0x20A0005
                 ;void m_315(unsigned char rychlost){
                 _m_315:
                 ;motor1(-rychlost);
                 ;	rychlost -> Y+0
0002c7 940e 0830 	CALL SUBOPT_0x0
0002c9 940e 08c0 	CALL SUBOPT_0x11
0002cb 940e 08de 	CALL SUBOPT_0x18
                 ;motor2(0);
0002cd 940e 08c8 	CALL SUBOPT_0x13
                 ;motor3(rychlost);
0002cf 93fa      	ST   -Y,R31
0002d0 93ea      	ST   -Y,R30
0002d1 940e 08e1 	CALL SUBOPT_0x19
                 ;motor4(0);
                 ;}
0002d3 940c 0642 	JMP  _0x20A0005
                 ;void m_ot(int rychlost){
                 _m_ot:
                 ;motor1(rychlost);
                 ;	rychlost -> Y+0
0002d5 81e8      	LD   R30,Y
0002d6 81f9      	LDD  R31,Y+1
0002d7 93fa      	ST   -Y,R31
0002d8 93ea      	ST   -Y,R30
0002d9 df28      	RCALL _motor1
                 ;motor2(rychlost/3);
0002da 940e 08e6 	CALL SUBOPT_0x1A
0002dc df51      	RCALL _motor2
                 ;motor3(rychlost/3);
0002dd 940e 08e6 	CALL SUBOPT_0x1A
0002df df38      	RCALL _motor3
                 ;motor4(rychlost);
0002e0 81e8      	LD   R30,Y
0002e1 81f9      	LDD  R31,Y+1
0002e2 940e 08d0 	CALL SUBOPT_0x15
                 ;}
0002e4 c196      	RJMP _0x20A0006
                 ;void m_vyp(){
                 _m_vyp:
                 ;motor1(0);
0002e5 940e 08d4 	CALL SUBOPT_0x16
0002e7 940e 08de 	CALL SUBOPT_0x18
                 ;motor2(0);
0002e9 df44      	RCALL _motor2
                 ;motor3(0);
0002ea 940e 08d4 	CALL SUBOPT_0x16
0002ec 940e 08e1 	CALL SUBOPT_0x19
                 ;motor4(0);
                 ;}
0002ee 9508      	RET
                 ;//------------------------------
                 ;//--------------------------------
                 ;//Definovanie
                 ;//--------------------------------
                 ;#define LED         PORTB.4
                 ;#define Kick        PORTB.0                    //kicker riadeni
                 ;//---------------------------------
                 ;// Premenne
                 ;//---------------------------------
                 ;eeprom int branka=0;
                 ;unsigned char rychlost_presunu = 210;
                 ;unsigned char rychlost_presunu_zrychlene = 210;
                 ;unsigned char rychlost_presunu_vzad = 200;
                 ;unsigned char prog=0;
                 ;unsigned char smer=0;
                 ;unsigned int x1;
                 ;unsigned char rychlost=200;
                 ;unsigned char rychl;
                 ;//---------------------------------
                 ;//inicializacia procesoru
                 ;//---------------------------------
                 ;void init_8535(){
                 ; 0000 004A void init_8535(){
                 _init_8535:
                 ; 0000 004B // Input/Output Ports initialization
                 ; 0000 004C // Port A initialization
                 ; 0000 004D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 004E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 004F PORTA=0x00;
0002ef e0e0      	LDI  R30,LOW(0)
0002f0 bbeb      	OUT  0x1B,R30
                 ; 0000 0050 DDRA=0x00;
0002f1 bbea      	OUT  0x1A,R30
                 ; 0000 0051 
                 ; 0000 0052 // Port B initialization
                 ; 0000 0053 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0054 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 0055 PORTB=0x20;
0002f2 e2e0      	LDI  R30,LOW(32)
0002f3 bbe8      	OUT  0x18,R30
                 ; 0000 0056 DDRB=0x1F;
0002f4 e1ef      	LDI  R30,LOW(31)
0002f5 bbe7      	OUT  0x17,R30
                 ; 0000 0057 
                 ; 0000 0058 // Port C initialization
                 ; 0000 0059 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 005A // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 005B PORTC=0x00;
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 bbe5      	OUT  0x15,R30
                 ; 0000 005C DDRC=0xFF;
0002f8 efef      	LDI  R30,LOW(255)
0002f9 bbe4      	OUT  0x14,R30
                 ; 0000 005D 
                 ; 0000 005E // Port D initialization
                 ; 0000 005F // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0060 // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 0061 PORTD=0x00;
0002fa e0e0      	LDI  R30,LOW(0)
0002fb bbe2      	OUT  0x12,R30
                 ; 0000 0062 DDRD=0xF0;
0002fc efe0      	LDI  R30,LOW(240)
0002fd bbe1      	OUT  0x11,R30
                 ; 0000 0063 
                 ; 0000 0064 // Timer/Counter 0 initialization
                 ; 0000 0065 // Clock source: System Clock
                 ; 0000 0066 // Clock value: 1382,400 kHz
                 ; 0000 0067 // Mode: Fast PWM top=FFh
                 ; 0000 0068 // OC0 output: Non-Inverted PWM
                 ; 0000 0069 TCCR0=0x6A;
0002fe e6ea      	LDI  R30,LOW(106)
0002ff bfe3      	OUT  0x33,R30
                 ; 0000 006A TCNT0=0x00;
000300 e0e0      	LDI  R30,LOW(0)
000301 bfe2      	OUT  0x32,R30
                 ; 0000 006B OCR0=0x00;
000302 bfec      	OUT  0x3C,R30
                 ; 0000 006C 
                 ; 0000 006D // Timer/Counter 1 initialization
                 ; 0000 006E // Clock source: System Clock
                 ; 0000 006F // Clock value: 1382,400 kHz
                 ; 0000 0070 // Mode: Fast PWM top=00FFh
                 ; 0000 0071 // OC1A output: Non-Inv.
                 ; 0000 0072 // OC1B output: Non-Inv.
                 ; 0000 0073 // Noise Canceler: Off
                 ; 0000 0074 // Input Capture on Falling Edge
                 ; 0000 0075 // Timer 1 Overflow Interrupt: Off
                 ; 0000 0076 // Input Capture Interrupt: Off
                 ; 0000 0077 // Compare A Match Interrupt: Off
                 ; 0000 0078 // Compare B Match Interrupt: Off
                 ; 0000 0079 TCCR1A=0xA1;
000303 eae1      	LDI  R30,LOW(161)
000304 bdef      	OUT  0x2F,R30
                 ; 0000 007A TCCR1B=0x0A;
000305 e0ea      	LDI  R30,LOW(10)
000306 bdee      	OUT  0x2E,R30
                 ; 0000 007B TCNT1H=0x00;
000307 e0e0      	LDI  R30,LOW(0)
000308 bded      	OUT  0x2D,R30
                 ; 0000 007C TCNT1L=0x00;
000309 bdec      	OUT  0x2C,R30
                 ; 0000 007D ICR1H=0x00;
00030a bde7      	OUT  0x27,R30
                 ; 0000 007E ICR1L=0x00;
00030b bde6      	OUT  0x26,R30
                 ; 0000 007F OCR1AH=0x00;
00030c bdeb      	OUT  0x2B,R30
                 ; 0000 0080 OCR1AL=0x00;
00030d bdea      	OUT  0x2A,R30
                 ; 0000 0081 OCR1BH=0x00;
00030e bde9      	OUT  0x29,R30
                 ; 0000 0082 OCR1BL=0x00;
00030f bde8      	OUT  0x28,R30
                 ; 0000 0083 
                 ; 0000 0084 // Timer/Counter 2 initialization
                 ; 0000 0085 // Clock source: System Clock
                 ; 0000 0086 // Clock value: 1382,400 kHz
                 ; 0000 0087 // Mode: Fast PWM top=FFh
                 ; 0000 0088 // OC2 output: Non-Inverted PWM
                 ; 0000 0089 ASSR=0x00;
000310 bde2      	OUT  0x22,R30
                 ; 0000 008A TCCR2=0x6A;
000311 e6ea      	LDI  R30,LOW(106)
000312 bde5      	OUT  0x25,R30
                 ; 0000 008B TCNT2=0x00;
000313 e0e0      	LDI  R30,LOW(0)
000314 bde4      	OUT  0x24,R30
                 ; 0000 008C OCR2=0x00;
000315 bde3      	OUT  0x23,R30
                 ; 0000 008D 
                 ; 0000 008E // External Interrupt(s) initialization
                 ; 0000 008F // INT0: Off
                 ; 0000 0090 // INT1: Off
                 ; 0000 0091 // INT2: Off
                 ; 0000 0092 MCUCR=0x00;
000316 bfe5      	OUT  0x35,R30
                 ; 0000 0093 MCUCSR=0x00;
000317 bfe4      	OUT  0x34,R30
                 ; 0000 0094 
                 ; 0000 0095 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0096 TIMSK=0x00;
000318 bfe9      	OUT  0x39,R30
                 ; 0000 0097 
                 ; 0000 0098 // USART initialization
                 ; 0000 0099 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009A // USART Receiver: On
                 ; 0000 009B // USART Transmitter: On
                 ; 0000 009C // USART Mode: Asynchronous
                 ; 0000 009D // USART Baud Rate: 115200
                 ; 0000 009E UCSRA=0x00;
000319 b9eb      	OUT  0xB,R30
                 ; 0000 009F UCSRB=0x18;
00031a e1e8      	LDI  R30,LOW(24)
00031b b9ea      	OUT  0xA,R30
                 ; 0000 00A0 UCSRC=0x86;
00031c e8e6      	LDI  R30,LOW(134)
00031d bde0      	OUT  0x20,R30
                 ; 0000 00A1 UBRRH=0x00;
00031e e0e0      	LDI  R30,LOW(0)
00031f bde0      	OUT  0x20,R30
                 ; 0000 00A2 UBRRL=0x05;
000320 e0e5      	LDI  R30,LOW(5)
000321 b9e9      	OUT  0x9,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // Analog Comparator initialization
                 ; 0000 00A5 // Analog Comparator: Off
                 ; 0000 00A6 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00A7 ACSR=0x80;
000322 e8e0      	LDI  R30,LOW(128)
000323 b9e8      	OUT  0x8,R30
                 ; 0000 00A8 SFIOR=0x00;
000324 e0e0      	LDI  R30,LOW(0)
000325 bfe0      	OUT  0x30,R30
                 ; 0000 00A9 
                 ; 0000 00AA // ADC initialization
                 ; 0000 00AB // ADC Clock frequency: 691,200 kHz
                 ; 0000 00AC // ADC Voltage Reference: AVCC pin
                 ; 0000 00AD // ADC High Speed Mode: On
                 ; 0000 00AE // ADC Auto Trigger Source: None
                 ; 0000 00AF // Only the 8 most significant bits of
                 ; 0000 00B0 // the AD conversion result are used
                 ; 0000 00B1 ADMUX=ADC_VREF_TYPE & 0xff;
000326 e6e0      	LDI  R30,LOW(96)
000327 b9e7      	OUT  0x7,R30
                 ; 0000 00B2 ADCSRA=0x84;
000328 e8e4      	LDI  R30,LOW(132)
000329 b9e6      	OUT  0x6,R30
                 ; 0000 00B3 SFIOR&=0xEF;
00032a b7e0      	IN   R30,0x30
00032b e0f0      	LDI  R31,0
00032c 7eef      	ANDI R30,LOW(0xEF)
00032d 70f0      	ANDI R31,HIGH(0xEF)
00032e bfe0      	OUT  0x30,R30
                 ; 0000 00B4 SFIOR|=0x10;
00032f b7e0      	IN   R30,0x30
000330 e0f0      	LDI  R31,0
000331 61e0      	ORI  R30,0x10
000332 bfe0      	OUT  0x30,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // I2C Bus initialization
                 ; 0000 00B7 i2c_init();
000333 940e 0961 	CALL _i2c_init
                 ; 0000 00B8 }
000335 9508      	RET
                 ;//---------------------------------
                 ;//------------------------------
                 ;//kicker
                 ;//------------------------------
                 ;void kick(){
                 ; 0000 00BD void kick(){
                 ; 0000 00BE     int senzory;
                 ; 0000 00BF     if (Kick_sens == 0){
                 ;	senzory -> R16,R17
                 ; 0000 00C0     m_vyp();
                 ; 0000 00C1     Kick = 1;
                 ; 0000 00C2     LED = 0;
                 ; 0000 00C3     delay_ms(200);
                 ; 0000 00C4     while (Kick_sens == 0);
                 ; 0000 00C5     Kick = 0;
                 ; 0000 00C6     LED = 1;
                 ; 0000 00C7     x1 = 400;
                 ; 0000 00C8     while(x1 != 0 ){
                 ; 0000 00C9         senzory = maxx(200);
                 ; 0000 00CA         if (maxh < 75){
                 ; 0000 00CB         switch (senzory){
                 ; 0000 00CC             case 1: m_0(rychlost_presunu);          break;
                 ; 0000 00CD     //---------------------------------------------------------------------
                 ; 0000 00CE             case 2: m_90(rychlost_presunu);              break;
                 ; 0000 00CF             case 3: m_135(rychlost_presunu);                 break;
                 ; 0000 00D0             case 4: m_135(rychlost_presunu);                 break;
                 ; 0000 00D1             case 5: m_180(rychlost_presunu);                 break;  //stvrtina z kruhu
                 ; 0000 00D2     //---------------------------------------------------------------------
                 ; 0000 00D3             case 6: m_225(rychlost_presunu);                 break;
                 ; 0000 00D4             case 7: m_225(rychlost_presunu);                break;
                 ; 0000 00D5             case 8: m_270(rychlost_presunu);                 break;
                 ; 0000 00D6             case 9: m_270(rychlost_presunu);                 break;  //polovica kruhu
                 ; 0000 00D7     //----------------------------------------------------------------------
                 ; 0000 00D8             case 10: m_90(rychlost_presunu);               break;
                 ; 0000 00D9             case 11: m_135(rychlost_presunu);                break;
                 ; 0000 00DA             case 12: m_135(rychlost_presunu);                break;
                 ; 0000 00DB             case 13: m_180(rychlost_presunu);                 break;  //tretina kruhu
                 ; 0000 00DC     //----------------------------------------------------------------------
                 ; 0000 00DD             case 14: m_225(rychlost_presunu);                break;
                 ; 0000 00DE             case 15: m_225(rychlost_presunu);                break;
                 ; 0000 00DF             case 16: m_270(rychlost_presunu);             break;  //cely kruh
                 ; 0000 00E0     //----------------------------------------------------------------------
                 ; 0000 00E1             case 17: m_vyp();                                break;
                 ; 0000 00E2         }
                 ; 0000 00E3     }
                 ; 0000 00E4         else{
                 ; 0000 00E5        switch (senzory){
                 ; 0000 00E6             case 1: m_0(rychlost_presunu);        break;
                 ; 0000 00E7     //---------------------------------------------------------------------
                 ; 0000 00E8             case 2: m_90(rychlost_presunu);              break;
                 ; 0000 00E9             case 3: m_90(rychlost_presunu);                 break;
                 ; 0000 00EA             case 4: m_90(rychlost_presunu);                 break;
                 ; 0000 00EB             case 5: m_90(rychlost_presunu);                 break;  //stvrtina z kruhu
                 ; 0000 00EC     //---------------------------------------------------------------------
                 ; 0000 00ED             case 6: m_135(rychlost_presunu);                 break;
                 ; 0000 00EE             case 7: m_135(rychlost_presunu);                break;
                 ; 0000 00EF             case 8: m_135(rychlost_presunu);                 break;
                 ; 0000 00F0             case 9: m_180(rychlost_presunu);                 break;  //polovica kruhu
                 ; 0000 00F1     //----------------------------------------------------------------------
                 ; 0000 00F2             case 10: m_225(rychlost_presunu);               break;
                 ; 0000 00F3             case 11: m_225(rychlost_presunu);                break;
                 ; 0000 00F4             case 12: m_225(rychlost_presunu);                break;
                 ; 0000 00F5             case 13: m_270(rychlost_presunu);                 break;  //tretina kruhu
                 ; 0000 00F6     //----------------------------------------------------------------------
                 ; 0000 00F7             case 14: m_315(rychlost_presunu);                break;
                 ; 0000 00F8             case 15: m_315(rychlost_presunu);                break;
                 ; 0000 00F9             case 16: m_315(rychlost_presunu);             break;  //cely kruh
                 ; 0000 00FA     //----------------------------------------------------------------------
                 ; 0000 00FB             case 17: m_vyp();                                break;
                 ; 0000 00FC         }
                 ; 0000 00FD     }
                 ; 0000 00FE         x1--;
                 ; 0000 00FF         delay_ms(2);
                 ; 0000 0100         }
                 ; 0000 0101     }
                 ; 0000 0102     else{
                 ; 0000 0103     Kick = 0;
                 ; 0000 0104 }
                 ; 0000 0105 }
                 ;void kick_no(){
                 ; 0000 0106 void kick_no(){
                 _kick_no:
                 ; 0000 0107     Kick = 1;
000336 9ac0      	SBI  0x18,0
                 ; 0000 0108     LED = 0;
000337 98c4      	CBI  0x18,4
                 ; 0000 0109     delay_ms(200);
000338 940e 08ef 	CALL SUBOPT_0x1B
                 ; 0000 010A     while (Kick_sens == 0);
                 _0xE8:
00033a 9bb5      	SBIS 0x16,5
00033b cffe      	RJMP _0xE8
                 ; 0000 010B     Kick = 0;
00033c 98c0      	CBI  0x18,0
                 ; 0000 010C     LED = 1;
00033d 9ac4      	SBI  0x18,4
                 ; 0000 010D }
00033e 9508      	RET
                 ;//------------------------------
                 ;//------------------------------
                 ;int nastav_podla_kompasu(int kompas){             //prepocetcompasu(branka,1)*0.71
                 ; 0000 0110 int nastav_podla_kompasu(int kompas){
                 _nastav_podla_kompasu:
                 ; 0000 0111     int komp_ret = 0;
                 ; 0000 0112     if (kompas > 180)
00033f 931a      	ST   -Y,R17
000340 930a      	ST   -Y,R16
                 ;	kompas -> Y+2
                 ;	komp_ret -> R16,R17
                +
000341 e000     +LDI R16 , LOW ( 0 )
000342 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000343 81aa      	LDD  R26,Y+2
000344 81bb      	LDD  R27,Y+2+1
000345 3ba5      	CPI  R26,LOW(0xB5)
000346 e0e0      	LDI  R30,HIGH(0xB5)
000347 07be      	CPC  R27,R30
000348 f024      	BRLT _0xEF
                 ; 0000 0113         kompas = 180;
000349 ebe4      	LDI  R30,LOW(180)
00034a e0f0      	LDI  R31,HIGH(180)
00034b 83ea      	STD  Y+2,R30
00034c 83fb      	STD  Y+2+1,R31
                 ; 0000 0114     //prepocet rychlost kolies pre kompas------------------
                 ; 0000 0115     if (kompas < 90){
                 _0xEF:
00034d 81aa      	LDD  R26,Y+2
00034e 81bb      	LDD  R27,Y+2+1
00034f 35aa      	CPI  R26,LOW(0x5A)
000350 e0e0      	LDI  R30,HIGH(0x5A)
000351 07be      	CPC  R27,R30
000352 f41c      	BRGE _0xF0
                 ; 0000 0116         rychl = kompas + 100;
000353 81ea      	LDD  R30,Y+2
000354 81fb      	LDD  R31,Y+2+1
000355 c006      	RJMP _0x194
                 ; 0000 0117     }
                 ; 0000 0118     else{
                 _0xF0:
                 ; 0000 0119         rychl = (180 - kompas) + 100;
000356 81aa      	LDD  R26,Y+2
000357 81bb      	LDD  R27,Y+2+1
000358 ebe4      	LDI  R30,LOW(180)
000359 e0f0      	LDI  R31,HIGH(180)
00035a 1bea      	SUB  R30,R26
00035b 0bfb      	SBC  R31,R27
                 _0x194:
00035c 59ec      	SUBI R30,LOW(-100)
00035d 4fff      	SBCI R31,HIGH(-100)
00035e 2ece      	MOV  R12,R30
                 ; 0000 011A     }
                 ; 0000 011B     //------------------------------------------------------
                 ; 0000 011C     if (kompas <= 10){
00035f 81aa      	LDD  R26,Y+2
000360 81bb      	LDD  R27,Y+2+1
000361 971b      	SBIW R26,11
000362 f0d4      	BRLT _0x195
                 ; 0000 011D         LED = 1;
                 ; 0000 011E         komp_ret = 1;
                 ; 0000 011F     }
                 ; 0000 0120     else{
                 ; 0000 0121         if( kompas <= 90){
000363 81aa      	LDD  R26,Y+2
000364 81bb      	LDD  R27,Y+2+1
000365 35ab      	CPI  R26,LOW(0x5B)
000366 e0e0      	LDI  R30,HIGH(0x5B)
000367 07be      	CPC  R27,R30
000368 f43c      	BRGE _0xF6
                 ; 0000 0122             LED = 0;
000369 98c4      	CBI  0x18,4
                 ; 0000 0123             m_ot(-rychl);
00036a 2dec      	MOV  R30,R12
00036b e0f0      	LDI  R31,0
00036c 940e 08c0 	CALL SUBOPT_0x11
00036e df66      	RCALL _m_ot
                 ; 0000 0124         }
                 ; 0000 0125         else{
00036f c010      	RJMP _0xF9
                 _0xF6:
                 ; 0000 0126             if (kompas <= 170){
000370 81aa      	LDD  R26,Y+2
000371 81bb      	LDD  R27,Y+2+1
000372 3aab      	CPI  R26,LOW(0xAB)
000373 e0e0      	LDI  R30,HIGH(0xAB)
000374 07be      	CPC  R27,R30
000375 f43c      	BRGE _0xFA
                 ; 0000 0127                 LED = 0;
000376 98c4      	CBI  0x18,4
                 ; 0000 0128                 m_ot(rychl);
000377 2dec      	MOV  R30,R12
000378 e0f0      	LDI  R31,0
000379 93fa      	ST   -Y,R31
00037a 93ea      	ST   -Y,R30
00037b df59      	RCALL _m_ot
                 ; 0000 0129             }
                 ; 0000 012A             else {
00037c c003      	RJMP _0xFD
                 _0xFA:
                 ; 0000 012B                 LED = 1;
                 _0x195:
00037d 9ac4      	SBI  0x18,4
                 ; 0000 012C                 komp_ret = 1;
                +
00037e e001     +LDI R16 , LOW ( 1 )
00037f e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 012D             }
                 _0xFD:
                 ; 0000 012E         }
                 _0xF9:
                 ; 0000 012F     }
                 ; 0000 0130     return komp_ret;
000380 01f8      	MOVW R30,R16
000381 8119      	LDD  R17,Y+1
000382 8108      	LDD  R16,Y+0
000383 9624      	ADIW R28,4
000384 9508      	RET
                 ; 0000 0131 }
                 ;void obchadzanie(int senzory){
                 ; 0000 0132 void obchadzanie(int senzory){
                 _obchadzanie:
                 ; 0000 0133     if (maxh < 80){
                 ;	senzory -> Y+0
000385 e5e0      	LDI  R30,LOW(80)
000386 165e      	CP   R5,R30
000387 f010      	BRLO PC+3
000388 940c 0404 	JMP _0x100
                 ; 0000 0134             switch (senzory){
00038a 81e8      	LD   R30,Y
00038b 81f9      	LDD  R31,Y+1
                 ; 0000 0135                 case 1: m_0(rychlost_presunu);          break;
00038c 30e1      	CPI  R30,LOW(0x1)
00038d e0a0      	LDI  R26,HIGH(0x1)
00038e 07fa      	CPC  R31,R26
00038f f419      	BRNE _0x104
000390 924a      	ST   -Y,R4
000391 dec6      	RCALL _m_0
000392 c070      	RJMP _0x103
                 ; 0000 0136         //---------------------------------------------------------------------
                 ; 0000 0137                 case 2: m_90(rychlost_presunu-10);              break;
                 _0x104:
000393 30e2      	CPI  R30,LOW(0x2)
000394 e0a0      	LDI  R26,HIGH(0x2)
000395 07fa      	CPC  R31,R26
000396 f421      	BRNE _0x105
000397 940e 08f5 	CALL SUBOPT_0x1C
000399 deda      	RCALL _m_90
00039a c068      	RJMP _0x103
                 ; 0000 0138                 case 3: m_135(rychlost_presunu);                break;
                 _0x105:
00039b 30e3      	CPI  R30,LOW(0x3)
00039c e0a0      	LDI  R26,HIGH(0x3)
00039d 07fa      	CPC  R31,R26
00039e f419      	BRNE _0x106
00039f 924a      	ST   -Y,R4
0003a0 dee6      	RCALL _m_135
0003a1 c061      	RJMP _0x103
                 ; 0000 0139                 case 4: m_135(rychlost_presunu);                break;
                 _0x106:
0003a2 30e4      	CPI  R30,LOW(0x4)
0003a3 e0a0      	LDI  R26,HIGH(0x4)
0003a4 07fa      	CPC  R31,R26
0003a5 f419      	BRNE _0x107
0003a6 924a      	ST   -Y,R4
0003a7 dedf      	RCALL _m_135
0003a8 c05a      	RJMP _0x103
                 ; 0000 013A                 case 5: m_180(rychlost_presunu);                break;
                 _0x107:
0003a9 30e5      	CPI  R30,LOW(0x5)
0003aa e0a0      	LDI  R26,HIGH(0x5)
0003ab 07fa      	CPC  R31,R26
0003ac f419      	BRNE _0x108
0003ad 924a      	ST   -Y,R4
0003ae dee6      	RCALL _m_180
0003af c053      	RJMP _0x103
                 ; 0000 013B         //---------------------------------------------------------------------
                 ; 0000 013C                 case 6: m_225(rychlost_presunu_vzad);           break;
                 _0x108:
0003b0 30e6      	CPI  R30,LOW(0x6)
0003b1 e0a0      	LDI  R26,HIGH(0x6)
0003b2 07fa      	CPC  R31,R26
0003b3 f419      	BRNE _0x109
0003b4 926a      	ST   -Y,R6
0003b5 def3      	RCALL _m_225
0003b6 c04c      	RJMP _0x103
                 ; 0000 013D                 case 7: m_225(rychlost_presunu_vzad);           break;
                 _0x109:
0003b7 30e7      	CPI  R30,LOW(0x7)
0003b8 e0a0      	LDI  R26,HIGH(0x7)
0003b9 07fa      	CPC  R31,R26
0003ba f419      	BRNE _0x10A
0003bb 926a      	ST   -Y,R6
0003bc deec      	RCALL _m_225
0003bd c045      	RJMP _0x103
                 ; 0000 013E                 case 8: m_270(rychlost_presunu_vzad);           break;
                 _0x10A:
0003be 30e8      	CPI  R30,LOW(0x8)
0003bf e0a0      	LDI  R26,HIGH(0x8)
0003c0 07fa      	CPC  R31,R26
0003c1 f419      	BRNE _0x10B
0003c2 926a      	ST   -Y,R6
0003c3 def2      	RCALL _m_270
0003c4 c03e      	RJMP _0x103
                 ; 0000 013F                 case 9: m_270(rychlost_presunu_vzad);           break;
                 _0x10B:
0003c5 30e9      	CPI  R30,LOW(0x9)
0003c6 e0a0      	LDI  R26,HIGH(0x9)
0003c7 07fa      	CPC  R31,R26
0003c8 f419      	BRNE _0x10C
0003c9 926a      	ST   -Y,R6
0003ca deeb      	RCALL _m_270
0003cb c037      	RJMP _0x103
                 ; 0000 0140                 case 10: m_90(rychlost_presunu_vzad);           break;
                 _0x10C:
0003cc 30ea      	CPI  R30,LOW(0xA)
0003cd e0a0      	LDI  R26,HIGH(0xA)
0003ce 07fa      	CPC  R31,R26
0003cf f419      	BRNE _0x10D
0003d0 926a      	ST   -Y,R6
0003d1 dea2      	RCALL _m_90
0003d2 c030      	RJMP _0x103
                 ; 0000 0141                 case 11: m_135(rychlost_presunu_vzad);          break;
                 _0x10D:
0003d3 30eb      	CPI  R30,LOW(0xB)
0003d4 e0a0      	LDI  R26,HIGH(0xB)
0003d5 07fa      	CPC  R31,R26
0003d6 f419      	BRNE _0x10E
0003d7 926a      	ST   -Y,R6
0003d8 deae      	RCALL _m_135
0003d9 c029      	RJMP _0x103
                 ; 0000 0142                 case 12: m_135(rychlost_presunu_vzad);          break;
                 _0x10E:
0003da 30ec      	CPI  R30,LOW(0xC)
0003db e0a0      	LDI  R26,HIGH(0xC)
0003dc 07fa      	CPC  R31,R26
0003dd f419      	BRNE _0x10F
0003de 926a      	ST   -Y,R6
0003df dea7      	RCALL _m_135
0003e0 c022      	RJMP _0x103
                 ; 0000 0143         //----------------------------------------------------------------------
                 ; 0000 0144                 case 13: m_180(rychlost_presunu);               break;
                 _0x10F:
0003e1 30ed      	CPI  R30,LOW(0xD)
0003e2 e0a0      	LDI  R26,HIGH(0xD)
0003e3 07fa      	CPC  R31,R26
0003e4 f419      	BRNE _0x110
0003e5 924a      	ST   -Y,R4
0003e6 deae      	RCALL _m_180
0003e7 c01b      	RJMP _0x103
                 ; 0000 0145                 case 14: m_225(rychlost_presunu);               break;
                 _0x110:
0003e8 30ee      	CPI  R30,LOW(0xE)
0003e9 e0a0      	LDI  R26,HIGH(0xE)
0003ea 07fa      	CPC  R31,R26
0003eb f419      	BRNE _0x111
0003ec 924a      	ST   -Y,R4
0003ed debb      	RCALL _m_225
0003ee c014      	RJMP _0x103
                 ; 0000 0146                 case 15: m_225(rychlost_presunu);               break;
                 _0x111:
0003ef 30ef      	CPI  R30,LOW(0xF)
0003f0 e0a0      	LDI  R26,HIGH(0xF)
0003f1 07fa      	CPC  R31,R26
0003f2 f419      	BRNE _0x112
0003f3 924a      	ST   -Y,R4
0003f4 deb4      	RCALL _m_225
0003f5 c00d      	RJMP _0x103
                 ; 0000 0147                 case 16: m_270(rychlost_presunu-10);            break;
                 _0x112:
0003f6 31e0      	CPI  R30,LOW(0x10)
0003f7 e0a0      	LDI  R26,HIGH(0x10)
0003f8 07fa      	CPC  R31,R26
0003f9 f421      	BRNE _0x113
0003fa 940e 08f5 	CALL SUBOPT_0x1C
0003fc deb9      	RCALL _m_270
0003fd c005      	RJMP _0x103
                 ; 0000 0148         //----------------------------------------------------------------------
                 ; 0000 0149                 case 17: m_vyp();                               break;
                 _0x113:
0003fe 31e1      	CPI  R30,LOW(0x11)
0003ff e0a0      	LDI  R26,HIGH(0x11)
000400 07fa      	CPC  R31,R26
000401 f409      	BRNE _0x103
000402 dee2      	RCALL _m_vyp
                 ; 0000 014A             }
                 _0x103:
                 ; 0000 014B        }
                 ; 0000 014C     else{
000403 c077      	RJMP _0x115
                 _0x100:
                 ; 0000 014D            switch (senzory){
000404 81e8      	LD   R30,Y
000405 81f9      	LDD  R31,Y+1
                 ; 0000 014E                 case 1: m_0(rychlost_presunu_zrychlene);         break;
000406 30e1      	CPI  R30,LOW(0x1)
000407 e0a0      	LDI  R26,HIGH(0x1)
000408 07fa      	CPC  R31,R26
000409 f419      	BRNE _0x119
00040a 927a      	ST   -Y,R7
00040b de4c      	RCALL _m_0
00040c c06e      	RJMP _0x118
                 ; 0000 014F         //---------------------------------------------------------------------
                 ; 0000 0150                 case 2: m_45(rychlost_presunu_zrychlene);                 break;
                 _0x119:
00040d 30e2      	CPI  R30,LOW(0x2)
00040e e0a0      	LDI  R26,HIGH(0x2)
00040f 07fa      	CPC  R31,R26
000410 f419      	BRNE _0x11A
000411 927a      	ST   -Y,R7
000412 de55      	RCALL _m_45
000413 c067      	RJMP _0x118
                 ; 0000 0151                 case 3: m_45(rychlost_presunu_zrychlene);                 break;
                 _0x11A:
000414 30e3      	CPI  R30,LOW(0x3)
000415 e0a0      	LDI  R26,HIGH(0x3)
000416 07fa      	CPC  R31,R26
000417 f419      	BRNE _0x11B
000418 927a      	ST   -Y,R7
000419 de4e      	RCALL _m_45
00041a c060      	RJMP _0x118
                 ; 0000 0152                 case 4: m_90(rychlost_presunu_zrychlene);                 break;
                 _0x11B:
00041b 30e4      	CPI  R30,LOW(0x4)
00041c e0a0      	LDI  R26,HIGH(0x4)
00041d 07fa      	CPC  R31,R26
00041e f419      	BRNE _0x11C
00041f 927a      	ST   -Y,R7
000420 de53      	RCALL _m_90
000421 c059      	RJMP _0x118
                 ; 0000 0153                 case 5: m_90(rychlost_presunu_zrychlene);                 break;
                 _0x11C:
000422 30e5      	CPI  R30,LOW(0x5)
000423 e0a0      	LDI  R26,HIGH(0x5)
000424 07fa      	CPC  R31,R26
000425 f419      	BRNE _0x11D
000426 927a      	ST   -Y,R7
000427 de4c      	RCALL _m_90
000428 c052      	RJMP _0x118
                 ; 0000 0154         //---------------------------------------------------------------------
                 ; 0000 0155                 case 6: m_135(rychlost_presunu);                     break;
                 _0x11D:
000429 30e6      	CPI  R30,LOW(0x6)
00042a e0a0      	LDI  R26,HIGH(0x6)
00042b 07fa      	CPC  R31,R26
00042c f419      	BRNE _0x11E
00042d 924a      	ST   -Y,R4
00042e de58      	RCALL _m_135
00042f c04b      	RJMP _0x118
                 ; 0000 0156                 case 7: m_135(rychlost_presunu);                     break;
                 _0x11E:
000430 30e7      	CPI  R30,LOW(0x7)
000431 e0a0      	LDI  R26,HIGH(0x7)
000432 07fa      	CPC  R31,R26
000433 f419      	BRNE _0x11F
000434 924a      	ST   -Y,R4
000435 de51      	RCALL _m_135
000436 c044      	RJMP _0x118
                 ; 0000 0157                 case 8: m_135(rychlost_presunu);                          break;
                 _0x11F:
000437 30e8      	CPI  R30,LOW(0x8)
000438 e0a0      	LDI  R26,HIGH(0x8)
000439 07fa      	CPC  R31,R26
00043a f419      	BRNE _0x120
00043b 924a      	ST   -Y,R4
00043c de4a      	RCALL _m_135
00043d c03d      	RJMP _0x118
                 ; 0000 0158                 case 9: m_180(rychlost_presunu);                          break;
                 _0x120:
00043e 30e9      	CPI  R30,LOW(0x9)
00043f e0a0      	LDI  R26,HIGH(0x9)
000440 07fa      	CPC  R31,R26
000441 f419      	BRNE _0x121
000442 924a      	ST   -Y,R4
000443 de51      	RCALL _m_180
000444 c036      	RJMP _0x118
                 ; 0000 0159                 case 10: m_225(rychlost_presunu);                         break;
                 _0x121:
000445 30ea      	CPI  R30,LOW(0xA)
000446 e0a0      	LDI  R26,HIGH(0xA)
000447 07fa      	CPC  R31,R26
000448 f419      	BRNE _0x122
000449 924a      	ST   -Y,R4
00044a de5e      	RCALL _m_225
00044b c02f      	RJMP _0x118
                 ; 0000 015A                 case 11: m_225(rychlost_presunu);                         break;
                 _0x122:
00044c 30eb      	CPI  R30,LOW(0xB)
00044d e0a0      	LDI  R26,HIGH(0xB)
00044e 07fa      	CPC  R31,R26
00044f f419      	BRNE _0x123
000450 924a      	ST   -Y,R4
000451 de57      	RCALL _m_225
000452 c028      	RJMP _0x118
                 ; 0000 015B                 case 12: m_225(rychlost_presunu);                         break;
                 _0x123:
000453 30ec      	CPI  R30,LOW(0xC)
000454 e0a0      	LDI  R26,HIGH(0xC)
000455 07fa      	CPC  R31,R26
000456 f419      	BRNE _0x124
000457 924a      	ST   -Y,R4
000458 de50      	RCALL _m_225
000459 c021      	RJMP _0x118
                 ; 0000 015C         //----------------------------------------------------------------------
                 ; 0000 015D                 case 13: m_270(rychlost_presunu_zrychlene);               break;
                 _0x124:
00045a 30ed      	CPI  R30,LOW(0xD)
00045b e0a0      	LDI  R26,HIGH(0xD)
00045c 07fa      	CPC  R31,R26
00045d f419      	BRNE _0x125
00045e 927a      	ST   -Y,R7
00045f de56      	RCALL _m_270
000460 c01a      	RJMP _0x118
                 ; 0000 015E                 case 14: m_270(rychlost_presunu_zrychlene);               break;
                 _0x125:
000461 30ee      	CPI  R30,LOW(0xE)
000462 e0a0      	LDI  R26,HIGH(0xE)
000463 07fa      	CPC  R31,R26
000464 f419      	BRNE _0x126
000465 927a      	ST   -Y,R7
000466 de4f      	RCALL _m_270
000467 c013      	RJMP _0x118
                 ; 0000 015F                 case 15: m_315(rychlost_presunu_zrychlene);               break;
                 _0x126:
000468 30ef      	CPI  R30,LOW(0xF)
000469 e0a0      	LDI  R26,HIGH(0xF)
00046a 07fa      	CPC  R31,R26
00046b f419      	BRNE _0x127
00046c 927a      	ST   -Y,R7
00046d de59      	RCALL _m_315
00046e c00c      	RJMP _0x118
                 ; 0000 0160                 case 16: m_315(rychlost_presunu_zrychlene);               break;
                 _0x127:
00046f 31e0      	CPI  R30,LOW(0x10)
000470 e0a0      	LDI  R26,HIGH(0x10)
000471 07fa      	CPC  R31,R26
000472 f419      	BRNE _0x128
000473 927a      	ST   -Y,R7
000474 de52      	RCALL _m_315
000475 c005      	RJMP _0x118
                 ; 0000 0161         //----------------------------------------------------------------------
                 ; 0000 0162                 case 17: m_vyp();                                         break;
                 _0x128:
000476 31e1      	CPI  R30,LOW(0x11)
000477 e0a0      	LDI  R26,HIGH(0x11)
000478 07fa      	CPC  R31,R26
000479 f409      	BRNE _0x118
00047a de6a      	RCALL _m_vyp
                 ; 0000 0163         }
                 _0x118:
                 ; 0000 0164     }
                 _0x115:
                 ; 0000 0165 }
                 _0x20A0006:
00047b 9622      	ADIW R28,2
00047c 9508      	RET
                 ;//------------------------------
                 ;//------------------------------
                 ;//odosielanie do PC
                 ;//------------------------------
                 ;void odosli_dataPC(){
                 ; 0000 016A void odosli_dataPC(){
                 _odosli_dataPC:
                 ; 0000 016B //--prijem_dat------------------------
                 ; 0000 016C     char str[20];
                 ; 0000 016D     scanf ("%s",str);
00047d 940e 08ff 	CALL SUBOPT_0x1D
                 ;	str -> Y+0
                 ; 0000 016E //------------------------------------
                 ; 0000 016F //spracovanie dat---------------------
                 ; 0000 0170 //------------------------------------
                 ; 0000 0171     if (strcmpf(str,"data") == 0){
                +
00047f e7e3     +LDI R30 , LOW ( 2 * _0x0 + 3 )
000480 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 3 )
                 	__POINTW1FN _0x0,3
000481 940e 0912 	CALL SUBOPT_0x1E
000483 f5a1      	BRNE _0x12A
                 ; 0000 0172         char data[12];
                 ; 0000 0173         data[0] = Senzor_1;
000484 972c      	SBIW R28,12
                 ;	str -> Y+12
                 ;	data -> Y+0
000485 e0e7      	LDI  R30,LOW(7)
000486 93ea      	ST   -Y,R30
000487 dbfe      	RCALL _read_adc
000488 83e8      	ST   Y,R30
                 ; 0000 0174         data[1] = Senzor_2;
000489 e0e6      	LDI  R30,LOW(6)
00048a 93ea      	ST   -Y,R30
00048b dbfa      	RCALL _read_adc
00048c 83e9      	STD  Y+1,R30
                 ; 0000 0175         data[2] = Senzor_3;
00048d e0e5      	LDI  R30,LOW(5)
00048e 93ea      	ST   -Y,R30
00048f dbf6      	RCALL _read_adc
000490 83ea      	STD  Y+2,R30
                 ; 0000 0176         data[3] = Senzor_4;
000491 e0e4      	LDI  R30,LOW(4)
000492 93ea      	ST   -Y,R30
000493 dbf2      	RCALL _read_adc
000494 83eb      	STD  Y+3,R30
                 ; 0000 0177         data[4] = Senzor_5;
000495 e0e0      	LDI  R30,LOW(0)
000496 93ea      	ST   -Y,R30
000497 dbee      	RCALL _read_adc
000498 83ec      	STD  Y+4,R30
                 ; 0000 0178         data[5] = Senzor_6;
000499 e0e1      	LDI  R30,LOW(1)
00049a 93ea      	ST   -Y,R30
00049b dbea      	RCALL _read_adc
00049c 83ed      	STD  Y+5,R30
                 ; 0000 0179         data[6] = Senzor_7;
00049d e0e2      	LDI  R30,LOW(2)
00049e 93ea      	ST   -Y,R30
00049f dbe6      	RCALL _read_adc
0004a0 83ee      	STD  Y+6,R30
                 ; 0000 017A         data[7] = Senzor_8;
0004a1 e0e3      	LDI  R30,LOW(3)
0004a2 93ea      	ST   -Y,R30
0004a3 dbe2      	RCALL _read_adc
0004a4 83ef      	STD  Y+7,R30
                 ; 0000 017B         data[8] = maxx(200);
0004a5 ece8      	LDI  R30,LOW(200)
0004a6 93ea      	ST   -Y,R30
0004a7 dc19      	RCALL _maxx
0004a8 87e8      	STD  Y+8,R30
                 ; 0000 017C         data[9] = (int)(prepocetcompasu(branka,1)*0.71);
0004a9 940e 0918 	CALL SUBOPT_0x1F
0004ab 2766      	CLR  R22
0004ac 2777      	CLR  R23
0004ad 87e9      	STD  Y+9,R30
                 ; 0000 017D         data[10] = Kick_sens;
0004ae e0e0      	LDI  R30,0
0004af 99b5      	SBIC 0x16,5
0004b0 e0e1      	LDI  R30,1
0004b1 87ea      	STD  Y+10,R30
                 ; 0000 017E         puts(data);
0004b2 940e 092f 	CALL SUBOPT_0x20
0004b4 940e 0644 	CALL _puts
                 ; 0000 017F         }
0004b6 962c      	ADIW R28,12
                 ; 0000 0180     else if (strcmpf(str,"kick") == 0)     kick_no();
0004b7 c105      	RJMP _0x12B
                 _0x12A:
0004b8 940e 092f 	CALL SUBOPT_0x20
                +
0004ba e7e8     +LDI R30 , LOW ( 2 * _0x0 + 8 )
0004bb e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 8 )
                 	__POINTW1FN _0x0,8
0004bc 940e 0912 	CALL SUBOPT_0x1E
0004be f411      	BRNE _0x12C
0004bf de76      	RCALL _kick_no
                 ; 0000 0181     else if (strcmpf(str,"LED0") == 0)     LED = 1;
0004c0 c0fc      	RJMP _0x12D
                 _0x12C:
0004c1 940e 092f 	CALL SUBOPT_0x20
                +
0004c3 e7ed     +LDI R30 , LOW ( 2 * _0x0 + 13 )
0004c4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 13 )
                 	__POINTW1FN _0x0,13
0004c5 940e 0912 	CALL SUBOPT_0x1E
0004c7 f411      	BRNE _0x12E
0004c8 9ac4      	SBI  0x18,4
                 ; 0000 0182     else if (strcmpf(str,"LED1") == 0)     LED = 0;
0004c9 c0f3      	RJMP _0x131
                 _0x12E:
0004ca 940e 092f 	CALL SUBOPT_0x20
                +
0004cc e8e2     +LDI R30 , LOW ( 2 * _0x0 + 18 )
0004cd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 18 )
                 	__POINTW1FN _0x0,18
0004ce 940e 0912 	CALL SUBOPT_0x1E
0004d0 f411      	BRNE _0x132
0004d1 98c4      	CBI  0x18,4
                 ; 0000 0183     else if (strcmpf(str,"blik") == 0)    {
0004d2 c0ea      	RJMP _0x135
                 _0x132:
0004d3 940e 092f 	CALL SUBOPT_0x20
                +
0004d5 e8e7     +LDI R30 , LOW ( 2 * _0x0 + 23 )
0004d6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 23 )
                 	__POINTW1FN _0x0,23
0004d7 940e 0912 	CALL SUBOPT_0x1E
0004d9 f539      	BRNE _0x136
                 ; 0000 0184         int pocet;
                 ; 0000 0185         char str1[20];
                 ; 0000 0186         scanf ("%s",str1);
0004da 9766      	SBIW R28,22
                 ;	str -> Y+22
                 ;	pocet -> Y+20
                 ;	str1 -> Y+0
                +
0004db e7e0     +LDI R30 , LOW ( 2 * _0x0 + 0 )
0004dc e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 0 )
                 	__POINTW1FN _0x0,0
0004dd 93fa      	ST   -Y,R31
0004de 93ea      	ST   -Y,R30
0004df 01fe      	MOVW R30,R28
0004e0 9632      	ADIW R30,2
0004e1 2766      	CLR  R22
0004e2 2777      	CLR  R23
0004e3 940e 0a0b 	CALL __PUTPARD1
0004e5 e084      	LDI  R24,4
0004e6 940e 07ad 	CALL _scanf
0004e8 9626      	ADIW R28,6
                 ; 0000 0187         for(pocet = atoi(str1);pocet!=0;pocet--){
0004e9 940e 092f 	CALL SUBOPT_0x20
0004eb 940e 07cd 	CALL _atoi
0004ed 8bec      	STD  Y+20,R30
0004ee 8bfd      	STD  Y+20+1,R31
                 _0x138:
0004ef 89ec      	LDD  R30,Y+20
0004f0 89fd      	LDD  R31,Y+20+1
0004f1 9730      	SBIW R30,0
0004f2 f061      	BREQ _0x139
                 ; 0000 0188             LED = 0;
0004f3 98c4      	CBI  0x18,4
                 ; 0000 0189             delay_ms(500);
0004f4 940e 0933 	CALL SUBOPT_0x21
                 ; 0000 018A             LED = 1;
0004f6 9ac4      	SBI  0x18,4
                 ; 0000 018B             delay_ms(500);
0004f7 940e 0933 	CALL SUBOPT_0x21
                 ; 0000 018C             }
0004f9 89ec      	LDD  R30,Y+20
0004fa 89fd      	LDD  R31,Y+20+1
0004fb 9731      	SBIW R30,1
0004fc 8bec      	STD  Y+20,R30
0004fd 8bfd      	STD  Y+20+1,R31
0004fe cff0      	RJMP _0x138
                 _0x139:
                 ; 0000 018D     }
0004ff 9666      	ADIW R28,22
                 ; 0000 018E     else if (strcmpf(str,"smer") == 0)    {
000500 c0bc      	RJMP _0x13E
                 _0x136:
000501 940e 092f 	CALL SUBOPT_0x20
                +
000503 e8ec     +LDI R30 , LOW ( 2 * _0x0 + 28 )
000504 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 28 )
                 	__POINTW1FN _0x0,28
000505 940e 0912 	CALL SUBOPT_0x1E
000507 f011      	BREQ PC+3
000508 940c 055f 	JMP _0x13F
                 ; 0000 018F         char str1[20];
                 ; 0000 0190         scanf ("%s",str1);
00050a 940e 08ff 	CALL SUBOPT_0x1D
                 ;	str -> Y+20
                 ;	str1 -> Y+0
                 ; 0000 0191         smer = atoi(str1);
00050c 940e 07cd 	CALL _atoi
00050e 2e8e      	MOV  R8,R30
                 ; 0000 0192         switch(smer){
00050f 2de8      	MOV  R30,R8
000510 e0f0      	LDI  R31,0
                 ; 0000 0193             case 0:
000511 9730      	SBIW R30,0
000512 f411      	BRNE _0x143
                 ; 0000 0194                 m_vyp();
000513 ddd1      	RCALL _m_vyp
                 ; 0000 0195                 break;
000514 c049      	RJMP _0x142
                 ; 0000 0196             case 1:
                 _0x143:
000515 30e1      	CPI  R30,LOW(0x1)
000516 e0a0      	LDI  R26,HIGH(0x1)
000517 07fa      	CPC  R31,R26
000518 f419      	BRNE _0x144
                 ; 0000 0197                 m_0(rychlost);
000519 92da      	ST   -Y,R13
00051a dd3d      	RCALL _m_0
                 ; 0000 0198                 break;
00051b c042      	RJMP _0x142
                 ; 0000 0199             case 2:
                 _0x144:
00051c 30e2      	CPI  R30,LOW(0x2)
00051d e0a0      	LDI  R26,HIGH(0x2)
00051e 07fa      	CPC  R31,R26
00051f f419      	BRNE _0x145
                 ; 0000 019A                 m_45(rychlost);
000520 92da      	ST   -Y,R13
000521 dd46      	RCALL _m_45
                 ; 0000 019B                 break;
000522 c03b      	RJMP _0x142
                 ; 0000 019C             case 3:
                 _0x145:
000523 30e3      	CPI  R30,LOW(0x3)
000524 e0a0      	LDI  R26,HIGH(0x3)
000525 07fa      	CPC  R31,R26
000526 f419      	BRNE _0x146
                 ; 0000 019D                 m_90(rychlost);
000527 92da      	ST   -Y,R13
000528 dd4b      	RCALL _m_90
                 ; 0000 019E                 break;
000529 c034      	RJMP _0x142
                 ; 0000 019F             case 4:
                 _0x146:
00052a 30e4      	CPI  R30,LOW(0x4)
00052b e0a0      	LDI  R26,HIGH(0x4)
00052c 07fa      	CPC  R31,R26
00052d f419      	BRNE _0x147
                 ; 0000 01A0                 m_135(rychlost);
00052e 92da      	ST   -Y,R13
00052f dd57      	RCALL _m_135
                 ; 0000 01A1                 break;
000530 c02d      	RJMP _0x142
                 ; 0000 01A2             case 5:
                 _0x147:
000531 30e5      	CPI  R30,LOW(0x5)
000532 e0a0      	LDI  R26,HIGH(0x5)
000533 07fa      	CPC  R31,R26
000534 f419      	BRNE _0x148
                 ; 0000 01A3                 m_180(rychlost);
000535 92da      	ST   -Y,R13
000536 dd5e      	RCALL _m_180
                 ; 0000 01A4                 break;
000537 c026      	RJMP _0x142
                 ; 0000 01A5             case 6:
                 _0x148:
000538 30e6      	CPI  R30,LOW(0x6)
000539 e0a0      	LDI  R26,HIGH(0x6)
00053a 07fa      	CPC  R31,R26
00053b f419      	BRNE _0x149
                 ; 0000 01A6                 m_225(rychlost);
00053c 92da      	ST   -Y,R13
00053d dd6b      	RCALL _m_225
                 ; 0000 01A7                 break;
00053e c01f      	RJMP _0x142
                 ; 0000 01A8             case 7:
                 _0x149:
00053f 30e7      	CPI  R30,LOW(0x7)
000540 e0a0      	LDI  R26,HIGH(0x7)
000541 07fa      	CPC  R31,R26
000542 f419      	BRNE _0x14A
                 ; 0000 01A9                 m_270(rychlost);
000543 92da      	ST   -Y,R13
000544 dd71      	RCALL _m_270
                 ; 0000 01AA                 break;
000545 c018      	RJMP _0x142
                 ; 0000 01AB             case 8:
                 _0x14A:
000546 30e8      	CPI  R30,LOW(0x8)
000547 e0a0      	LDI  R26,HIGH(0x8)
000548 07fa      	CPC  R31,R26
000549 f419      	BRNE _0x14B
                 ; 0000 01AC                 m_315(rychlost);
00054a 92da      	ST   -Y,R13
00054b dd7b      	RCALL _m_315
                 ; 0000 01AD                 break;
00054c c011      	RJMP _0x142
                 ; 0000 01AE             case 10:
                 _0x14B:
00054d 30ea      	CPI  R30,LOW(0xA)
00054e e0a0      	LDI  R26,HIGH(0xA)
00054f 07fa      	CPC  R31,R26
000550 f419      	BRNE _0x14C
                 ; 0000 01AF                 m_ot(170);
000551 eaea      	LDI  R30,LOW(170)
000552 e0f0      	LDI  R31,HIGH(170)
000553 c007      	RJMP _0x196
                 ; 0000 01B0                 break;
                 ; 0000 01B1             case 9:
                 _0x14C:
000554 30e9      	CPI  R30,LOW(0x9)
000555 e0a0      	LDI  R26,HIGH(0x9)
000556 07fa      	CPC  R31,R26
000557 f431      	BRNE _0x142
                 ; 0000 01B2                 m_ot(-170);
000558 e5e6      	LDI  R30,LOW(65366)
000559 efff      	LDI  R31,HIGH(65366)
00055a efff      	SER  R31
                 _0x196:
00055b 93fa      	ST   -Y,R31
00055c 93ea      	ST   -Y,R30
00055d dd77      	RCALL _m_ot
                 ; 0000 01B3                 break;
                 ; 0000 01B4             }
                 _0x142:
                 ; 0000 01B5         }
00055e c05d      	RJMP _0x197
                 ; 0000 01B6     else if (strcmpf(str,"rych") == 0)    {
                 _0x13F:
00055f 940e 092f 	CALL SUBOPT_0x20
                +
000561 e9e1     +LDI R30 , LOW ( 2 * _0x0 + 33 )
000562 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 33 )
                 	__POINTW1FN _0x0,33
000563 940e 0912 	CALL SUBOPT_0x1E
000565 f011      	BREQ PC+3
000566 940c 05bd 	JMP _0x14F
                 ; 0000 01B7         char str1[20];
                 ; 0000 01B8         scanf ("%s",str1);
000568 940e 08ff 	CALL SUBOPT_0x1D
                 ;	str -> Y+20
                 ;	str1 -> Y+0
                 ; 0000 01B9         rychlost = atoi(str1);
00056a 940e 07cd 	CALL _atoi
00056c 2ede      	MOV  R13,R30
                 ; 0000 01BA         switch(smer){
00056d 2de8      	MOV  R30,R8
00056e e0f0      	LDI  R31,0
                 ; 0000 01BB             case 0:
00056f 9730      	SBIW R30,0
000570 f411      	BRNE _0x153
                 ; 0000 01BC                 m_vyp();
000571 dd73      	RCALL _m_vyp
                 ; 0000 01BD                 break;
000572 c049      	RJMP _0x152
                 ; 0000 01BE             case 1:
                 _0x153:
000573 30e1      	CPI  R30,LOW(0x1)
000574 e0a0      	LDI  R26,HIGH(0x1)
000575 07fa      	CPC  R31,R26
000576 f419      	BRNE _0x154
                 ; 0000 01BF                 m_0(rychlost);
000577 92da      	ST   -Y,R13
000578 dcdf      	RCALL _m_0
                 ; 0000 01C0                 break;
000579 c042      	RJMP _0x152
                 ; 0000 01C1             case 2:
                 _0x154:
00057a 30e2      	CPI  R30,LOW(0x2)
00057b e0a0      	LDI  R26,HIGH(0x2)
00057c 07fa      	CPC  R31,R26
00057d f419      	BRNE _0x155
                 ; 0000 01C2                 m_45(rychlost);
00057e 92da      	ST   -Y,R13
00057f dce8      	RCALL _m_45
                 ; 0000 01C3                 break;
000580 c03b      	RJMP _0x152
                 ; 0000 01C4             case 3:
                 _0x155:
000581 30e3      	CPI  R30,LOW(0x3)
000582 e0a0      	LDI  R26,HIGH(0x3)
000583 07fa      	CPC  R31,R26
000584 f419      	BRNE _0x156
                 ; 0000 01C5                 m_90(rychlost);
000585 92da      	ST   -Y,R13
000586 dced      	RCALL _m_90
                 ; 0000 01C6                 break;
000587 c034      	RJMP _0x152
                 ; 0000 01C7             case 4:
                 _0x156:
000588 30e4      	CPI  R30,LOW(0x4)
000589 e0a0      	LDI  R26,HIGH(0x4)
00058a 07fa      	CPC  R31,R26
00058b f419      	BRNE _0x157
                 ; 0000 01C8                 m_135(rychlost);
00058c 92da      	ST   -Y,R13
00058d dcf9      	RCALL _m_135
                 ; 0000 01C9                 break;
00058e c02d      	RJMP _0x152
                 ; 0000 01CA             case 5:
                 _0x157:
00058f 30e5      	CPI  R30,LOW(0x5)
000590 e0a0      	LDI  R26,HIGH(0x5)
000591 07fa      	CPC  R31,R26
000592 f419      	BRNE _0x158
                 ; 0000 01CB                 m_180(rychlost);
000593 92da      	ST   -Y,R13
000594 dd00      	RCALL _m_180
                 ; 0000 01CC                 break;
000595 c026      	RJMP _0x152
                 ; 0000 01CD             case 6:
                 _0x158:
000596 30e6      	CPI  R30,LOW(0x6)
000597 e0a0      	LDI  R26,HIGH(0x6)
000598 07fa      	CPC  R31,R26
000599 f419      	BRNE _0x159
                 ; 0000 01CE                 m_225(rychlost);
00059a 92da      	ST   -Y,R13
00059b dd0d      	RCALL _m_225
                 ; 0000 01CF                 break;
00059c c01f      	RJMP _0x152
                 ; 0000 01D0             case 7:
                 _0x159:
00059d 30e7      	CPI  R30,LOW(0x7)
00059e e0a0      	LDI  R26,HIGH(0x7)
00059f 07fa      	CPC  R31,R26
0005a0 f419      	BRNE _0x15A
                 ; 0000 01D1                 m_270(rychlost);
0005a1 92da      	ST   -Y,R13
0005a2 dd13      	RCALL _m_270
                 ; 0000 01D2                 break;
0005a3 c018      	RJMP _0x152
                 ; 0000 01D3             case 8:
                 _0x15A:
0005a4 30e8      	CPI  R30,LOW(0x8)
0005a5 e0a0      	LDI  R26,HIGH(0x8)
0005a6 07fa      	CPC  R31,R26
0005a7 f419      	BRNE _0x15B
                 ; 0000 01D4                 m_315(rychlost);
0005a8 92da      	ST   -Y,R13
0005a9 dd1d      	RCALL _m_315
                 ; 0000 01D5                 break;
0005aa c011      	RJMP _0x152
                 ; 0000 01D6             case 10:
                 _0x15B:
0005ab 30ea      	CPI  R30,LOW(0xA)
0005ac e0a0      	LDI  R26,HIGH(0xA)
0005ad 07fa      	CPC  R31,R26
0005ae f419      	BRNE _0x15C
                 ; 0000 01D7                 m_ot(170);
0005af eaea      	LDI  R30,LOW(170)
0005b0 e0f0      	LDI  R31,HIGH(170)
0005b1 c007      	RJMP _0x198
                 ; 0000 01D8                 break;
                 ; 0000 01D9             case 9:
                 _0x15C:
0005b2 30e9      	CPI  R30,LOW(0x9)
0005b3 e0a0      	LDI  R26,HIGH(0x9)
0005b4 07fa      	CPC  R31,R26
0005b5 f431      	BRNE _0x152
                 ; 0000 01DA                 m_ot(-170);
0005b6 e5e6      	LDI  R30,LOW(65366)
0005b7 efff      	LDI  R31,HIGH(65366)
0005b8 efff      	SER  R31
                 _0x198:
0005b9 93fa      	ST   -Y,R31
0005ba 93ea      	ST   -Y,R30
0005bb dd19      	RCALL _m_ot
                 ; 0000 01DB                 break;
                 ; 0000 01DC             }
                 _0x152:
                 ; 0000 01DD         }
                 _0x197:
0005bc 9664      	ADIW R28,20
                 ; 0000 01DE     }
                 _0x14F:
                 _0x13E:
                 _0x135:
                 _0x131:
                 _0x12D:
                 _0x12B:
0005bd 9664      	ADIW R28,20
0005be 9508      	RET
                 ;//---------------------------------
                 ;void kalibracia_kompas(unsigned char mode){
                 ; 0000 01E0 void kalibracia_kompas(unsigned char mode){
                 _kalibracia_kompas:
                 ; 0000 01E1     int kompas;
                 ; 0000 01E2     if (mode == 1){
0005bf 940e 0894 	CALL SUBOPT_0xB
                 ;	mode -> Y+2
                 ;	kompas -> R16,R17
0005c1 f541      	BRNE _0x15E
                 ; 0000 01E3         if (Kick_sens == 0){
0005c2 99b5      	SBIC 0x16,5
0005c3 c025      	RJMP _0x15F
                 ; 0000 01E4         while (Kick_sens == 0){
                 _0x160:
0005c4 99b5      	SBIC 0x16,5
0005c5 c008      	RJMP _0x162
                 ; 0000 01E5             delay_ms(20);
0005c6 e1e4      	LDI  R30,LOW(20)
0005c7 e0f0      	LDI  R31,HIGH(20)
0005c8 940e 0939 	CALL SUBOPT_0x22
                 ; 0000 01E6             branka = cmps03_read(1);
0005ca e0e1      	LDI  R30,LOW(1)
0005cb 940e 093d 	CALL SUBOPT_0x23
                 ; 0000 01E7                     }
0005cd cff6      	RJMP _0x160
                 _0x162:
                 ; 0000 01E8         while(1){
                 _0x163:
                 ; 0000 01E9             kompas = prepocetcompasu(branka,1)*0.71;
0005ce 940e 0918 	CALL SUBOPT_0x1F
0005d0 018f      	MOVW R16,R30
                 ; 0000 01EA             if (kompas > 180)
                +
0005d1 3b05     +CPI R16 , LOW ( 181 )
0005d2 e0e0     +LDI R30 , HIGH ( 181 )
0005d3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,181
0005d4 f014      	BRLT _0x166
                 ; 0000 01EB                 kompas = 180;
                +
0005d5 eb04     +LDI R16 , LOW ( 180 )
0005d6 e010     +LDI R17 , HIGH ( 180 )
                 	__GETWRN 16,17,180
                 ; 0000 01EC             if (kompas < 20){
                 _0x166:
                +
0005d7 3104     +CPI R16 , LOW ( 20 )
0005d8 e0e0     +LDI R30 , HIGH ( 20 )
0005d9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,20
0005da f064      	BRLT _0x199
                 ; 0000 01ED                 LED = 0;
                 ; 0000 01EE             }
                 ; 0000 01EF             else{
                 ; 0000 01F0                 if( kompas < 90){
                +
0005db 350a     +CPI R16 , LOW ( 90 )
0005dc e0e0     +LDI R30 , HIGH ( 90 )
0005dd 071e     +CPC R17 , R30
                 	__CPWRN 16,17,90
0005de f414      	BRGE _0x16B
                 ; 0000 01F1                     LED = 1;
0005df 9ac4      	SBI  0x18,4
                 ; 0000 01F2                 }
                 ; 0000 01F3                 else
0005e0 c007      	RJMP _0x16E
                 _0x16B:
                 ; 0000 01F4                 {
                 ; 0000 01F5                     if (kompas < 160){
                +
0005e1 3a00     +CPI R16 , LOW ( 160 )
0005e2 e0e0     +LDI R30 , HIGH ( 160 )
0005e3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,160
0005e4 f414      	BRGE _0x16F
                 ; 0000 01F6                         LED = 1;
0005e5 9ac4      	SBI  0x18,4
                 ; 0000 01F7                     }
                 ; 0000 01F8                     else {
0005e6 c001      	RJMP _0x172
                 _0x16F:
                 ; 0000 01F9                         LED = 0;
                 _0x199:
0005e7 98c4      	CBI  0x18,4
                 ; 0000 01FA                         }
                 _0x172:
                 ; 0000 01FB                 }
                 _0x16E:
                 ; 0000 01FC             }
                 ; 0000 01FD         }
0005e8 cfe5      	RJMP _0x163
                 ; 0000 01FE         }
                 ; 0000 01FF         }
                 _0x15F:
                 ; 0000 0200     else{
0005e9 c02a      	RJMP _0x175
                 _0x15E:
                 ; 0000 0201          while (Kick_sens == 0){
                 _0x176:
0005ea 99b5      	SBIC 0x16,5
0005eb c008      	RJMP _0x178
                 ; 0000 0202                     branka = cmps03_read(2);
0005ec e0e2      	LDI  R30,LOW(2)
0005ed 940e 093d 	CALL SUBOPT_0x23
                 ; 0000 0203                     delay_ms(10);
0005ef e0ea      	LDI  R30,LOW(10)
0005f0 e0f0      	LDI  R31,HIGH(10)
0005f1 940e 0939 	CALL SUBOPT_0x22
                 ; 0000 0204                             }
0005f3 cff6      	RJMP _0x176
                 _0x178:
                 ; 0000 0205          delay_ms(1000);
0005f4 eee8      	LDI  R30,LOW(1000)
0005f5 e0f3      	LDI  R31,HIGH(1000)
0005f6 940e 0939 	CALL SUBOPT_0x22
                 ; 0000 0206          while(1){
                 _0x179:
                 ; 0000 0207                     kompas = prepocetcompasu(branka,2);
0005f8 e0a0      	LDI  R26,LOW(_branka)
0005f9 e0b0      	LDI  R27,HIGH(_branka)
0005fa 940e 0a17 	CALL __EEPROMRDW
0005fc 93fa      	ST   -Y,R31
0005fd 93ea      	ST   -Y,R30
0005fe e0e2      	LDI  R30,LOW(2)
0005ff 93ea      	ST   -Y,R30
000600 dbde      	RCALL _prepocetcompasu
000601 018f      	MOVW R16,R30
                 ; 0000 0208                     if (kompas < 200){
                +
000602 3c08     +CPI R16 , LOW ( 200 )
000603 e0e0     +LDI R30 , HIGH ( 200 )
000604 071e     +CPC R17 , R30
                 	__CPWRN 16,17,200
000605 f064      	BRLT _0x19A
                 ; 0000 0209                         LED = 0;
                 ; 0000 020A                     }
                 ; 0000 020B                     else{
                 ; 0000 020C                         if( kompas < 1800){
                +
000606 3008     +CPI R16 , LOW ( 1800 )
000607 e0e7     +LDI R30 , HIGH ( 1800 )
000608 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1800
000609 f414      	BRGE _0x180
                 ; 0000 020D                             LED = 1;
00060a 9ac4      	SBI  0x18,4
                 ; 0000 020E                         }
                 ; 0000 020F                         else
00060b c007      	RJMP _0x183
                 _0x180:
                 ; 0000 0210                         {
                 ; 0000 0211                             if (kompas < 3400){
                +
00060c 3408     +CPI R16 , LOW ( 3400 )
00060d e0ed     +LDI R30 , HIGH ( 3400 )
00060e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3400
00060f f414      	BRGE _0x184
                 ; 0000 0212                                 LED = 1;
000610 9ac4      	SBI  0x18,4
                 ; 0000 0213                             }
                 ; 0000 0214                             else {
000611 c001      	RJMP _0x187
                 _0x184:
                 ; 0000 0215                                 LED = 0;
                 _0x19A:
000612 98c4      	CBI  0x18,4
                 ; 0000 0216                                 }
                 _0x187:
                 ; 0000 0217                         }
                 _0x183:
                 ; 0000 0218                     }
                 ; 0000 0219                 }
000613 cfe4      	RJMP _0x179
                 ; 0000 021A     }
                 _0x175:
                 ; 0000 021B }
000614 8119      	LDD  R17,Y+1
000615 8108      	LDD  R16,Y+0
000616 940c 0654 	JMP  _0x20A0004
                 ;//--------------------------------------------------
                 ;void main(void)
                 ; 0000 021E {
                 _main:
                 ; 0000 021F init_8535();
000618 dcd6      	RCALL _init_8535
                 ; 0000 0220 // pre odosielanie do pc nastav 1
                 ; 0000 0221 prog = 1;
000619 e0e1      	LDI  R30,LOW(1)
00061a 2e9e      	MOV  R9,R30
                 ; 0000 0222 //kompas reset, nastavenie rychlosti na 33ms
                 ; 0000 0223 cmps03_reset();
00061b db7c      	RCALL _cmps03_reset
                 ; 0000 0224 cmps03_scanmode(3);
00061c e0e3      	LDI  R30,LOW(3)
00061d 93ea      	ST   -Y,R30
00061e db6d      	RCALL _cmps03_scanmode
                 ; 0000 0225 //-----------------------------------
                 ; 0000 0226 delay_ms(200);
00061f 940e 08ef 	CALL SUBOPT_0x1B
                 ; 0000 0227 kalibracia_kompas(1);
000621 e0e1      	LDI  R30,LOW(1)
000622 93ea      	ST   -Y,R30
000623 df9b      	RCALL _kalibracia_kompas
                 ; 0000 0228 //-----------------------------------
                 ; 0000 0229 testmotor:
                 _0x18A:
                 ; 0000 022A     while(1){
                 ; 0000 022B     /*
                 ; 0000 022C         if (Mot_sens == 1)  {
                 ; 0000 022D           goto zaciatok;
                 ; 0000 022E         }
                 ; 0000 022F         else{
                 ; 0000 0230             switch (senzory){
                 ; 0000 0231                 case 1:     goto zaciatok;                  break;
                 ; 0000 0232         //---------------------------------------------------------------------
                 ; 0000 0233                 case 2:     m_0(255);          break;
                 ; 0000 0234                 case 3:     m_0(255);          break;
                 ; 0000 0235                 case 4:     m_45(255);          break;
                 ; 0000 0236                 case 5:     m_45(255);         break;
                 ; 0000 0237         //---------------------------------------------------------------------
                 ; 0000 0238                 case 6:     m_vyp();                        break;
                 ; 0000 0239                 case 7:     m_vyp();                        break;
                 ; 0000 023A                 case 8:     m_vyp();                        break;
                 ; 0000 023B                 case 9:     m_vyp();                        break;
                 ; 0000 023C                 case 10:    m_vyp();                        break;
                 ; 0000 023D                 case 11:    m_vyp();                        break;
                 ; 0000 023E                 case 12:    m_vyp();                        break;
                 ; 0000 023F         //----------------------------------------------------------------------
                 ; 0000 0240                 case 13:    m_315(255);        break;
                 ; 0000 0241                 case 14:    m_315(255);          break;
                 ; 0000 0242                 case 15:    m_0(255);          break;
                 ; 0000 0243                 case 16:    m_0(255);          break;
                 ; 0000 0244         //----------------------------------------------------------------------
                 ; 0000 0245                 case 17:    m_vyp();                        break;
                 ; 0000 0246             }
                 ; 0000 0247             if (senzory != 1){
                 ; 0000 0248                 delay_ms(400);
                 ; 0000 0249             }
                 ; 0000 024A         }
                 ; 0000 024B         */
                 ; 0000 024C //        while(1){
                 ; 0000 024D           odosli_dataPC();
000624 de58      	RCALL _odosli_dataPC
                 ; 0000 024E     //    }
                 ; 0000 024F goto testmotor;
000625 cffe      	RJMP _0x18A
                 ; 0000 0250 goto zaciatok;
                 ; 0000 0251 }
                 ; 0000 0252 //-----------------------------------
                 ; 0000 0253 zaciatok:
                 ; 0000 0254     while (1){
                 _0x18F:
                 ; 0000 0255         if (0 != nastav_podla_kompasu((int)(prepocetcompasu(branka,1)*0.71))){
000626 940e 0918 	CALL SUBOPT_0x1F
000628 93fa      	ST   -Y,R31
000629 93ea      	ST   -Y,R30
00062a dd14      	RCALL _nastav_podla_kompasu
00062b 9730      	SBIW R30,0
00062c f039      	BREQ _0x192
                 ; 0000 0256             obchadzanie(maxx(200));
00062d ece8      	LDI  R30,LOW(200)
00062e 93ea      	ST   -Y,R30
00062f da91      	RCALL _maxx
000630 e0f0      	LDI  R31,0
000631 93fa      	ST   -Y,R31
000632 93ea      	ST   -Y,R30
000633 dd51      	RCALL _obchadzanie
                 ; 0000 0257         }
                 ; 0000 0258         delay_ms(30);
                 _0x192:
000634 e1ee      	LDI  R30,LOW(30)
000635 e0f0      	LDI  R31,HIGH(30)
000636 940e 0939 	CALL SUBOPT_0x22
                 ; 0000 0259 };
000638 cfed      	RJMP _0x18F
                 ; 0000 025A //-----------------------------------
                 ; 0000 025B }
                 _0x193:
000639 cfff      	RJMP _0x193
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
00063a 9b5f           sbis usr,rxc
00063b cffe           rjmp _getchar
00063c b1ec           in   r30,udr
00063d 9508      	RET
                 _putchar:
00063e 9b5d           sbis usr,udre
00063f cffe           rjmp _putchar
000640 81e8           ld   r30,y
000641 b9ec           out  udr,r30
                 _0x20A0005:
000642 9621      	ADIW R28,1
000643 9508      	RET
                 _puts:
000644 931a      	ST   -Y,R17
                 _0x2000003:
000645 81a9      	LDD  R26,Y+1
000646 81ba      	LDD  R27,Y+1+1
000647 91ed      	LD   R30,X+
000648 83a9      	STD  Y+1,R26
000649 83ba      	STD  Y+1+1,R27
00064a 2f1e      	MOV  R17,R30
00064b 30e0      	CPI  R30,0
00064c f019      	BREQ _0x2000005
00064d 931a      	ST   -Y,R17
00064e dfef      	RCALL _putchar
00064f cff5      	RJMP _0x2000003
                 _0x2000005:
000650 e0ea      	LDI  R30,LOW(10)
000651 93ea      	ST   -Y,R30
000652 dfeb      	RCALL _putchar
000653 8118      	LDD  R17,Y+0
                 _0x20A0004:
000654 9623      	ADIW R28,3
000655 9508      	RET
                 __get_G100:
000656 931a      	ST   -Y,R17
000657 81ab      	LDD  R26,Y+3
000658 81bc      	LDD  R27,Y+3+1
000659 91ec      	LD   R30,X
00065a 2f1e      	MOV  R17,R30
00065b 30e0      	CPI  R30,0
00065c f019      	BREQ _0x2000073
00065d e0e0      	LDI  R30,LOW(0)
00065e 93ec      	ST   X,R30
00065f c014      	RJMP _0x2000074
                 _0x2000073:
000660 81a9      	LDD  R26,Y+1
000661 81ba      	LDD  R27,Y+1+1
000662 940e 0a07 	CALL __GETW1P
000664 9730      	SBIW R30,0
000665 f061      	BREQ _0x2000075
000666 940e 0a07 	CALL __GETW1P
000668 81e0      	LD   R30,Z
000669 2f1e      	MOV  R17,R30
00066a 30e0      	CPI  R30,0
00066b f029      	BREQ _0x2000076
00066c 91ed      	LD   R30,X+
00066d 91fd      	LD   R31,X+
00066e 9631      	ADIW R30,1
00066f 93fe      	ST   -X,R31
000670 93ee      	ST   -X,R30
                 _0x2000076:
000671 c002      	RJMP _0x2000077
                 _0x2000075:
000672 dfc7      	RCALL _getchar
000673 2f1e      	MOV  R17,R30
                 _0x2000077:
                 _0x2000074:
000674 2fe1      	MOV  R30,R17
000675 8118      	LDD  R17,Y+0
                 _0x20A0003:
000676 9625      	ADIW R28,5
000677 9508      	RET
                 __scanf_G100:
000678 9724      	SBIW R28,4
000679 940e 0b26 	CALL __SAVELOCR6
00067b e0e0      	LDI  R30,LOW(0)
00067c 87e9      	STD  Y+9,R30
00067d 2f4e      	MOV  R20,R30
                 _0x2000078:
00067e 85ee      	LDD  R30,Y+14
00067f 85ff      	LDD  R31,Y+14+1
000680 9631      	ADIW R30,1
000681 87ee      	STD  Y+14,R30
000682 87ff      	STD  Y+14+1,R31
000683 9731      	SBIW R30,1
000684 91e4      	LPM  R30,Z
000685 2f3e      	MOV  R19,R30
000686 30e0      	CPI  R30,0
000687 f411      	BRNE PC+3
000688 940c 07a8 	JMP _0x200007A
00068a 940e 0945 	CALL SUBOPT_0x24
00068c f091      	BREQ _0x200007B
                 _0x200007C:
00068d b7ed      	IN   R30,SPL
00068e b7fe      	IN   R31,SPH
00068f 93fa      	ST   -Y,R31
000690 93ea      	ST   -Y,R30
000691 934f      	PUSH R20
000692 940e 094a 	CALL SUBOPT_0x25
000694 914f      	POP  R20
000695 2f3e      	MOV  R19,R30
000696 30e0      	CPI  R30,0
000697 f019      	BREQ _0x200007F
000698 940e 0945 	CALL SUBOPT_0x24
00069a f409      	BRNE _0x2000080
                 _0x200007F:
00069b c001      	RJMP _0x200007E
                 _0x2000080:
00069c cff0      	RJMP _0x200007C
                 _0x200007E:
00069d 2f43      	MOV  R20,R19
00069e c108      	RJMP _0x2000081
                 _0x200007B:
00069f 3235      	CPI  R19,37
0006a0 f011      	BREQ PC+3
0006a1 940c 0797 	JMP _0x2000082
0006a3 e050      	LDI  R21,LOW(0)
                 _0x2000083:
0006a4 85ee      	LDD  R30,Y+14
0006a5 85ff      	LDD  R31,Y+14+1
0006a6 9135      	LPM  R19,Z+
0006a7 87ee      	STD  Y+14,R30
0006a8 87ff      	STD  Y+14+1,R31
0006a9 3330      	CPI  R19,48
0006aa f010      	BRLO _0x2000087
0006ab 333a      	CPI  R19,58
0006ac f008      	BRLO _0x2000086
                 _0x2000087:
0006ad c015      	RJMP _0x2000085
                 _0x2000086:
0006ae 2fa5      	MOV  R26,R21
0006af e0b0      	LDI  R27,0
0006b0 e0ea      	LDI  R30,LOW(10)
0006b1 e0f0      	LDI  R31,HIGH(10)
0006b2 02ea      	MULS R30,R26
0006b3 01f0      	MOVW R30,R0
0006b4 2f5e      	MOV  R21,R30
0006b5 2f65      	MOV  R22,R21
0006b6 2777      	CLR  R23
0006b7 940e 0950 	CALL SUBOPT_0x26
0006b9 e3e0      	LDI  R30,LOW(48)
0006ba e0f0      	LDI  R31,HIGH(48)
0006bb 940e 0a10 	CALL __SWAPW12
0006bd 1bea      	SUB  R30,R26
0006be 0bfb      	SBC  R31,R27
0006bf 01db      	MOVW R26,R22
0006c0 0fea      	ADD  R30,R26
0006c1 2f5e      	MOV  R21,R30
0006c2 cfe1      	RJMP _0x2000083
                 _0x2000085:
0006c3 3030      	CPI  R19,0
0006c4 f409      	BRNE _0x2000089
0006c5 c0e2      	RJMP _0x200007A
                 _0x2000089:
                 _0x200008A:
0006c6 b7ed      	IN   R30,SPL
0006c7 b7fe      	IN   R31,SPH
0006c8 93fa      	ST   -Y,R31
0006c9 93ea      	ST   -Y,R30
0006ca 934f      	PUSH R20
0006cb 940e 094a 	CALL SUBOPT_0x25
0006cd 914f      	POP  R20
0006ce 2f2e      	MOV  R18,R30
0006cf 93ea      	ST   -Y,R30
0006d0 940e 0818 	CALL _isspace
0006d2 30e0      	CPI  R30,0
0006d3 f791      	BRNE _0x200008A
0006d4 3020      	CPI  R18,0
0006d5 f409      	BRNE _0x200008D
0006d6 c0ca      	RJMP _0x200008E
                 _0x200008D:
0006d7 2f42      	MOV  R20,R18
0006d8 3050      	CPI  R21,0
0006d9 f409      	BRNE _0x200008F
0006da ef5f      	LDI  R21,LOW(255)
                 _0x200008F:
0006db 940e 0953 	CALL SUBOPT_0x27
0006dd 36e3      	CPI  R30,LOW(0x63)
0006de e0a0      	LDI  R26,HIGH(0x63)
0006df 07fa      	CPC  R31,R26
0006e0 f469      	BRNE _0x2000093
0006e1 940e 0956 	CALL SUBOPT_0x28
0006e3 b7ed      	IN   R30,SPL
0006e4 b7fe      	IN   R31,SPH
0006e5 93fa      	ST   -Y,R31
0006e6 93ea      	ST   -Y,R30
0006e7 934f      	PUSH R20
0006e8 940e 094a 	CALL SUBOPT_0x25
0006ea 914f      	POP  R20
0006eb 01d8      	MOVW R26,R16
0006ec 93ec      	ST   X,R30
0006ed c0a5      	RJMP _0x2000092
                 _0x2000093:
0006ee 37e3      	CPI  R30,LOW(0x73)
0006ef e0a0      	LDI  R26,HIGH(0x73)
0006f0 07fa      	CPC  R31,R26
0006f1 f511      	BRNE _0x200009B
0006f2 940e 0956 	CALL SUBOPT_0x28
                 _0x2000095:
0006f4 2fe5      	MOV  R30,R21
0006f5 5051      	SUBI R21,1
0006f6 30e0      	CPI  R30,0
0006f7 f0c1      	BREQ _0x2000097
0006f8 b7ed      	IN   R30,SPL
0006f9 b7fe      	IN   R31,SPH
0006fa 93fa      	ST   -Y,R31
0006fb 93ea      	ST   -Y,R30
0006fc 934f      	PUSH R20
0006fd 940e 094a 	CALL SUBOPT_0x25
0006ff 914f      	POP  R20
000700 2f3e      	MOV  R19,R30
000701 30e0      	CPI  R30,0
000702 f019      	BREQ _0x2000099
000703 940e 0945 	CALL SUBOPT_0x24
000705 f009      	BREQ _0x2000098
                 _0x2000099:
000706 c009      	RJMP _0x2000097
                 _0x2000098:
000707 931f      	PUSH R17
000708 930f      	PUSH R16
                +
000709 5f0f     +SUBI R16 , LOW ( - 1 )
00070a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00070b 2fe3      	MOV  R30,R19
00070c 91af      	POP  R26
00070d 91bf      	POP  R27
00070e 93ec      	ST   X,R30
00070f cfe4      	RJMP _0x2000095
                 _0x2000097:
000710 01d8      	MOVW R26,R16
000711 e0e0      	LDI  R30,LOW(0)
000712 93ec      	ST   X,R30
000713 c07f      	RJMP _0x2000092
                 _0x200009B:
000714 e0e1      	LDI  R30,LOW(1)
000715 87e8      	STD  Y+8,R30
000716 940e 0953 	CALL SUBOPT_0x27
000718 36e4      	CPI  R30,LOW(0x64)
000719 e0a0      	LDI  R26,HIGH(0x64)
00071a 07fa      	CPC  R31,R26
00071b f021      	BREQ _0x20000A0
00071c 36e9      	CPI  R30,LOW(0x69)
00071d e0a0      	LDI  R26,HIGH(0x69)
00071e 07fa      	CPC  R31,R26
00071f f419      	BRNE _0x20000A1
                 _0x20000A0:
000720 e0e0      	LDI  R30,LOW(0)
000721 87e8      	STD  Y+8,R30
000722 c004      	RJMP _0x20000A2
                 _0x20000A1:
000723 37e5      	CPI  R30,LOW(0x75)
000724 e0a0      	LDI  R26,HIGH(0x75)
000725 07fa      	CPC  R31,R26
000726 f411      	BRNE _0x20000A3
                 _0x20000A2:
000727 e02a      	LDI  R18,LOW(10)
000728 c00c      	RJMP _0x200009E
                 _0x20000A3:
000729 37e8      	CPI  R30,LOW(0x78)
00072a e0a0      	LDI  R26,HIGH(0x78)
00072b 07fa      	CPC  R31,R26
00072c f411      	BRNE _0x20000A4
00072d e120      	LDI  R18,LOW(16)
00072e c006      	RJMP _0x200009E
                 _0x20000A4:
00072f 32e5      	CPI  R30,LOW(0x25)
000730 e0a0      	LDI  R26,HIGH(0x25)
000731 07fa      	CPC  R31,R26
000732 f409      	BRNE _0x20000A7
000733 c063      	RJMP _0x20000A6
                 _0x20000A7:
000734 c073      	RJMP _0x20A0002
                 _0x200009E:
000735 e0e0      	LDI  R30,0
000736 83ee      	STD  Y+6,R30
000737 83ef      	STD  Y+6+1,R30
                 _0x20000A8:
000738 2fe5      	MOV  R30,R21
000739 5051      	SUBI R21,1
00073a 30e0      	CPI  R30,0
00073b f411      	BRNE PC+3
00073c 940c 0786 	JMP _0x20000AA
00073e b7ed      	IN   R30,SPL
00073f b7fe      	IN   R31,SPH
000740 93fa      	ST   -Y,R31
000741 93ea      	ST   -Y,R30
000742 934f      	PUSH R20
000743 940e 094a 	CALL SUBOPT_0x25
000745 914f      	POP  R20
000746 2f3e      	MOV  R19,R30
000747 32e1      	CPI  R30,LOW(0x21)
000748 f0b8      	BRLO _0x20000AC
000749 85e8      	LDD  R30,Y+8
00074a 30e0      	CPI  R30,0
00074b f439      	BRNE _0x20000AD
00074c 323d      	CPI  R19,45
00074d f419      	BRNE _0x20000AE
00074e efef      	LDI  R30,LOW(255)
00074f 87e8      	STD  Y+8,R30
000750 cfe7      	RJMP _0x20000A8
                 _0x20000AE:
000751 e0e1      	LDI  R30,LOW(1)
000752 87e8      	STD  Y+8,R30
                 _0x20000AD:
000753 3120      	CPI  R18,16
000754 f431      	BRNE _0x20000B0
000755 933a      	ST   -Y,R19
000756 940e 0822 	CALL _isxdigit
000758 30e0      	CPI  R30,0
000759 f031      	BREQ _0x20000AC
00075a c007      	RJMP _0x20000B2
                 _0x20000B0:
00075b 933a      	ST   -Y,R19
00075c 940e 0810 	CALL _isdigit
00075e 30e0      	CPI  R30,0
00075f f411      	BRNE _0x20000B3
                 _0x20000AC:
000760 2f43      	MOV  R20,R19
000761 c024      	RJMP _0x20000AA
                 _0x20000B3:
                 _0x20000B2:
000762 3631      	CPI  R19,97
000763 f028      	BRLO _0x20000B4
000764 940e 0950 	CALL SUBOPT_0x26
000766 e5e7      	LDI  R30,LOW(87)
000767 e0f0      	LDI  R31,HIGH(87)
000768 c00b      	RJMP _0x20000C0
                 _0x20000B4:
000769 3431      	CPI  R19,65
00076a f028      	BRLO _0x20000B6
00076b 940e 0950 	CALL SUBOPT_0x26
00076d e3e7      	LDI  R30,LOW(55)
00076e e0f0      	LDI  R31,HIGH(55)
00076f c004      	RJMP _0x20000C0
                 _0x20000B6:
000770 940e 0950 	CALL SUBOPT_0x26
000772 e3e0      	LDI  R30,LOW(48)
000773 e0f0      	LDI  R31,HIGH(48)
                 _0x20000C0:
000774 940e 0a10 	CALL __SWAPW12
000776 1bea      	SUB  R30,R26
000777 2f3e      	MOV  R19,R30
000778 2fe2      	MOV  R30,R18
000779 e0f0      	LDI  R31,0
00077a 81ae      	LDD  R26,Y+6
00077b 81bf      	LDD  R27,Y+6+1
00077c 940e 09d4 	CALL __MULW12U
00077e 01df      	MOVW R26,R30
00077f 940e 0953 	CALL SUBOPT_0x27
000781 0fea      	ADD  R30,R26
000782 1ffb      	ADC  R31,R27
000783 83ee      	STD  Y+6,R30
000784 83ff      	STD  Y+6+1,R31
000785 cfb2      	RJMP _0x20000A8
                 _0x20000AA:
000786 940e 0956 	CALL SUBOPT_0x28
000788 85e8      	LDD  R30,Y+8
000789 e0f0      	LDI  R31,0
00078a fde7      	SBRC R30,7
00078b efff      	SER  R31
00078c 81ae      	LDD  R26,Y+6
00078d 81bf      	LDD  R27,Y+6+1
00078e 940e 09d4 	CALL __MULW12U
000790 01d8      	MOVW R26,R16
000791 93ed      	ST   X+,R30
000792 93fc      	ST   X,R31
                 _0x2000092:
000793 85e9      	LDD  R30,Y+9
000794 5fef      	SUBI R30,-LOW(1)
000795 87e9      	STD  Y+9,R30
000796 c010      	RJMP _0x20000B8
                 _0x2000082:
                 _0x20000A6:
000797 b7ed      	IN   R30,SPL
000798 b7fe      	IN   R31,SPH
000799 93fa      	ST   -Y,R31
00079a 93ea      	ST   -Y,R30
00079b 934f      	PUSH R20
00079c 940e 094a 	CALL SUBOPT_0x25
00079e 914f      	POP  R20
00079f 17e3      	CP   R30,R19
0007a0 f031      	BREQ _0x20000B9
                 _0x200008E:
0007a1 85e9      	LDD  R30,Y+9
0007a2 30e0      	CPI  R30,0
0007a3 f411      	BRNE _0x20000BA
0007a4 efef      	LDI  R30,LOW(255)
0007a5 c003      	RJMP _0x20A0001
                 _0x20000BA:
0007a6 c001      	RJMP _0x200007A
                 _0x20000B9:
                 _0x20000B8:
                 _0x2000081:
0007a7 ced6      	RJMP _0x2000078
                 _0x200007A:
                 _0x20A0002:
0007a8 85e9      	LDD  R30,Y+9
                 _0x20A0001:
0007a9 940e 0b2d 	CALL __LOADLOCR6
0007ab 9660      	ADIW R28,16
0007ac 9508      	RET
                 _scanf:
0007ad 92ff      	PUSH R15
0007ae 2ef8      	MOV  R15,R24
0007af 9722      	SBIW R28,2
0007b0 931a      	ST   -Y,R17
0007b1 930a      	ST   -Y,R16
0007b2 01de      	MOVW R26,R28
0007b3 940e 09bf 	CALL __ADDW2R15
0007b5 018d      	MOVW R16,R26
0007b6 e0e0      	LDI  R30,0
0007b7 83ea      	STD  Y+2,R30
0007b8 83eb      	STD  Y+2+1,R30
0007b9 01de      	MOVW R26,R28
0007ba 9614      	ADIW R26,4
0007bb 940e 09bf 	CALL __ADDW2R15
0007bd 940e 0a07 	CALL __GETW1P
0007bf 93fa      	ST   -Y,R31
0007c0 93ea      	ST   -Y,R30
0007c1 931a      	ST   -Y,R17
0007c2 930a      	ST   -Y,R16
0007c3 01fe      	MOVW R30,R28
0007c4 9636      	ADIW R30,6
0007c5 93fa      	ST   -Y,R31
0007c6 93ea      	ST   -Y,R30
0007c7 deb0      	RCALL __scanf_G100
0007c8 8119      	LDD  R17,Y+1
0007c9 8108      	LDD  R16,Y+0
0007ca 9624      	ADIW R28,4
0007cb 90ff      	POP  R15
0007cc 9508      	RET
                 
                 	.CSEG
                 _atoi:
0007cd 81b9         	ldd  r27,y+1
0007ce 81a8         	ld   r26,y
                 __atoi0:
0007cf 91ec         	ld   r30,x
0007d0 93ea      	ST   -Y,R30
0007d1 940e 0818 	CALL _isspace
0007d3 23ee         	tst  r30
0007d4 f011         	breq __atoi1
0007d5 9611         	adiw r26,1
0007d6 cff8         	rjmp __atoi0
                 __atoi1:
0007d7 94e8         	clt
0007d8 91ec         	ld   r30,x
0007d9 32ed         	cpi  r30,'-'
0007da f411         	brne __atoi2
0007db 9468         	set
0007dc c002         	rjmp __atoi3
                 __atoi2:
0007dd 32eb         	cpi  r30,'+'
0007de f409         	brne __atoi4
                 __atoi3:
0007df 9611         	adiw r26,1
                 __atoi4:
0007e0 2766         	clr  r22
0007e1 2777         	clr  r23
                 __atoi5:
0007e2 91ec         	ld   r30,x
0007e3 93ea      	ST   -Y,R30
0007e4 940e 0810 	CALL _isdigit
0007e6 23ee         	tst  r30
0007e7 f079         	breq __atoi6
0007e8 01fb         	movw r30,r22
0007e9 0f66         	lsl  r22
0007ea 1f77         	rol  r23
0007eb 0f66         	lsl  r22
0007ec 1f77         	rol  r23
0007ed 0f6e         	add  r22,r30
0007ee 1f7f         	adc  r23,r31
0007ef 0f66         	lsl  r22
0007f0 1f77         	rol  r23
0007f1 91ed         	ld   r30,x+
0007f2 27ff         	clr  r31
0007f3 53e0         	subi r30,'0'
0007f4 0f6e         	add  r22,r30
0007f5 1f7f         	adc  r23,r31
0007f6 cfeb         	rjmp __atoi5
                 __atoi6:
0007f7 01fb         	movw r30,r22
0007f8 f41e         	brtc __atoi7
0007f9 95e0         	com  r30
0007fa 95f0         	com  r31
0007fb 9631         	adiw r30,1
                 __atoi7:
0007fc 9622         	adiw r28,2
0007fd 9508         	ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcmpf:
0007fe 91e9          ld   r30,y+
0007ff 91f9          ld   r31,y+
000800 91a9          ld   r26,y+
000801 91b9          ld   r27,y+
                 strcmpf0:
000802 901d          ld   r1,x+
000803 9005      	lpm  r0,z+
000804 1401          cp   r0,r1
000805 f421          brne strcmpf1
000806 2000          tst  r0
000807 f7d1          brne strcmpf0
                 strcmpf3:
000808 27ee          clr  r30
000809 9508          ret
                 strcmpf1:
00080a 1810          sub  r1,r0
00080b f3e1          breq strcmpf3
00080c e0e1          ldi  r30,1
00080d f408          brcc strcmpf2
00080e 50e2          subi r30,2
                 strcmpf2:
00080f 9508          ret
                 
                 	.CSEG
                 _isdigit:
000810 e0e1          ldi  r30,1
000811 91f9          ld   r31,y+
000812 33f0          cpi  r31,'0'
000813 f010          brlo isdigit0
000814 33fa          cpi  r31,'9'+1
000815 f008          brlo isdigit1
                 isdigit0:
000816 27ee          clr  r30
                 isdigit1:
000817 9508          ret
                 _isspace:
000818 e0e1          ldi  r30,1
000819 91f9          ld   r31,y+
00081a 32f0          cpi  r31,' '
00081b f029          breq isspace1
00081c 30f9          cpi  r31,9
00081d f010          brlo isspace0
00081e 30fe          cpi  r31,13+1
00081f f008          brlo isspace1
                 isspace0:
000820 27ee          clr  r30
                 isspace1:
000821 9508          ret
                 _isxdigit:
000822 e0e1          ldi  r30,1
000823 91f9          ld   r31,y+
000824 53f0          subi r31,0x30
000825 f040          brcs isxdigit0
000826 30fa          cpi  r31,10
000827 f038          brcs isxdigit1
000828 75ff          andi r31,0x5f
000829 50f7          subi r31,7
00082a 30fa          cpi  r31,10
00082b f010          brcs isxdigit0
00082c 31f0          cpi  r31,16
00082d f008          brcs isxdigit1
                 isxdigit0:
00082e 27ee          clr  r30
                 isxdigit1:
00082f 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _datax:
000260           	.BYTE 0x32
                 
                 	.ESEG
                 _branka:
000000 00 00     	.DW  0x0
                 
                 	.DSEG
                 __seed_G101:
000292           	.BYTE 0x4
                 _p_S1020024:
000296           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 28 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0x0:
000830 81e8      	LD   R30,Y
000831 e0f0      	LDI  R31,0
000832 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000833 b1e6      	IN   R30,0x6
000834 e0f0      	LDI  R31,0
000835 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000836 81ea      	LDD  R30,Y+2
000837 93ea      	ST   -Y,R30
000838 81ec      	LDD  R30,Y+4
000839 93ea      	ST   -Y,R30
00083a 930a      	ST   -Y,R16
00083b 940e 009c 	CALL _inrange
00083d 30e1      	CPI  R30,LOW(0x1)
00083e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00083f 85e9      	LDD  R30,Y+9
000840 93ea      	ST   -Y,R30
000841 81eb      	LDD  R30,Y+3
000842 93ea      	ST   -Y,R30
000843 930a      	ST   -Y,R16
000844 940e 009c 	CALL _inrange
000846 30e1      	CPI  R30,LOW(0x1)
000847 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000848 81eb      	LDD  R30,Y+3
000849 93ea      	ST   -Y,R30
00084a 81ed      	LDD  R30,Y+5
00084b 93ea      	ST   -Y,R30
00084c 930a      	ST   -Y,R16
00084d 940e 009c 	CALL _inrange
00084f 30e1      	CPI  R30,LOW(0x1)
000850 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000851 81ec      	LDD  R30,Y+4
000852 93ea      	ST   -Y,R30
000853 81ee      	LDD  R30,Y+6
000854 93ea      	ST   -Y,R30
000855 930a      	ST   -Y,R16
000856 940e 009c 	CALL _inrange
000858 30e1      	CPI  R30,LOW(0x1)
000859 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
00085a 81ed      	LDD  R30,Y+5
00085b 93ea      	ST   -Y,R30
00085c 81ef      	LDD  R30,Y+7
00085d 93ea      	ST   -Y,R30
00085e 930a      	ST   -Y,R16
00085f 940e 009c 	CALL _inrange
000861 30e1      	CPI  R30,LOW(0x1)
000862 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000863 81ee      	LDD  R30,Y+6
000864 93ea      	ST   -Y,R30
000865 85e8      	LDD  R30,Y+8
000866 93ea      	ST   -Y,R30
000867 930a      	ST   -Y,R16
000868 940e 009c 	CALL _inrange
00086a 30e1      	CPI  R30,LOW(0x1)
00086b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00086c 81ef      	LDD  R30,Y+7
00086d 93ea      	ST   -Y,R30
00086e 85e9      	LDD  R30,Y+9
00086f 93ea      	ST   -Y,R30
000870 930a      	ST   -Y,R16
000871 940e 009c 	CALL _inrange
000873 30e1      	CPI  R30,LOW(0x1)
000874 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000875 85e8      	LDD  R30,Y+8
000876 93ea      	ST   -Y,R30
000877 85ea      	LDD  R30,Y+10
000878 93ea      	ST   -Y,R30
000879 930a      	ST   -Y,R16
00087a 940e 009c 	CALL _inrange
00087c 30e1      	CPI  R30,LOW(0x1)
00087d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
00087e 940e 0966 	CALL _i2c_start
000880 ece0      	LDI  R30,LOW(192)
000881 93ea      	ST   -Y,R30
000882 940e 099a 	CALL _i2c_write
000884 e1e2      	LDI  R30,LOW(18)
000885 93ea      	ST   -Y,R30
000886 940e 099a 	CALL _i2c_write
000888 e5e5      	LDI  R30,LOW(85)
000889 93ea      	ST   -Y,R30
00088a 940e 099a 	CALL _i2c_write
00088c e5ea      	LDI  R30,LOW(90)
00088d 93ea      	ST   -Y,R30
00088e 940e 099a 	CALL _i2c_write
000890 eae5      	LDI  R30,LOW(165)
000891 93ea      	ST   -Y,R30
000892 940c 099a 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000894 931a      	ST   -Y,R17
000895 930a      	ST   -Y,R16
000896 81aa      	LDD  R26,Y+2
000897 30a1      	CPI  R26,LOW(0x1)
000898 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000899 940e 0966 	CALL _i2c_start
00089b ece0      	LDI  R30,LOW(192)
00089c 93ea      	ST   -Y,R30
00089d 940c 099a 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
00089f 93ea      	ST   -Y,R30
0008a0 940e 099a 	CALL _i2c_write
0008a2 940e 0966 	CALL _i2c_start
0008a4 ece1      	LDI  R30,LOW(193)
0008a5 93ea      	ST   -Y,R30
0008a6 940c 099a 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
0008a8 93ea      	ST   -Y,R30
0008a9 940e 01a1 	CALL _cmps03_read
0008ab 01df      	MOVW R26,R30
0008ac 81eb      	LDD  R30,Y+3
0008ad 81fc      	LDD  R31,Y+3+1
0008ae 1bae      	SUB  R26,R30
0008af 0bbf      	SBC  R27,R31
0008b0 018d      	MOVW R16,R26
0008b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0008b2 81a8      	LD   R26,Y
0008b3 81b9      	LDD  R27,Y+1
0008b4 940e 0b22 	CALL __CPW02
0008b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x10:
0008b7 81a8      	LD   R26,Y
0008b8 81b9      	LDD  R27,Y+1
0008b9 efef      	LDI  R30,LOW(65535)
0008ba efff      	LDI  R31,HIGH(65535)
0008bb 940e 09dc 	CALL __MULW12
0008bd 83e8      	ST   Y,R30
0008be 83f9      	STD  Y+1,R31
0008bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x11:
0008c0 940e 09c3 	CALL __ANEGW1
0008c2 93fa      	ST   -Y,R31
0008c3 93ea      	ST   -Y,R30
0008c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x12:
0008c5 940e 0202 	CALL _motor1
0008c7 cf68      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x13:
0008c8 940e 022e 	CALL _motor2
0008ca cf65      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x14:
0008cb 93fa      	ST   -Y,R31
0008cc 93ea      	ST   -Y,R30
0008cd 940e 0218 	CALL _motor3
0008cf cf60      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
0008d0 93fa      	ST   -Y,R31
0008d1 93ea      	ST   -Y,R30
0008d2 940c 0243 	JMP  _motor4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x16:
0008d4 e0e0      	LDI  R30,LOW(0)
0008d5 e0f0      	LDI  R31,HIGH(0)
0008d6 93fa      	ST   -Y,R31
0008d7 93ea      	ST   -Y,R30
0008d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0008d9 940e 022e 	CALL _motor2
0008db e0e0      	LDI  R30,LOW(0)
0008dc e0f0      	LDI  R31,HIGH(0)
0008dd cfed      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0008de 940e 0202 	CALL _motor1
0008e0 cff3      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x19:
0008e1 940e 0218 	CALL _motor3
0008e3 e0e0      	LDI  R30,LOW(0)
0008e4 e0f0      	LDI  R31,HIGH(0)
0008e5 cfea      	RJMP SUBOPT_0x15
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
0008e6 81a8      	LD   R26,Y
0008e7 81b9      	LDD  R27,Y+1
0008e8 e0e3      	LDI  R30,LOW(3)
0008e9 e0f0      	LDI  R31,HIGH(3)
0008ea 940e 09f4 	CALL __DIVW21
0008ec 93fa      	ST   -Y,R31
0008ed 93ea      	ST   -Y,R30
0008ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0008ef ece8      	LDI  R30,LOW(200)
0008f0 e0f0      	LDI  R31,HIGH(200)
0008f1 93fa      	ST   -Y,R31
0008f2 93ea      	ST   -Y,R30
0008f3 940c 09b3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1C:
0008f5 2da4      	MOV  R26,R4
0008f6 e0b0      	LDI  R27,0
0008f7 e0ea      	LDI  R30,LOW(10)
0008f8 e0f0      	LDI  R31,HIGH(10)
0008f9 940e 0a10 	CALL __SWAPW12
0008fb 1bea      	SUB  R30,R26
0008fc 0bfb      	SBC  R31,R27
0008fd 93ea      	ST   -Y,R30
0008fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x1D:
0008ff 9764      	SBIW R28,20
                +
000900 e7e0     +LDI R30 , LOW ( 2 * _0x0 + 0 )
000901 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 0 )
                 	__POINTW1FN _0x0,0
000902 93fa      	ST   -Y,R31
000903 93ea      	ST   -Y,R30
000904 01fe      	MOVW R30,R28
000905 9632      	ADIW R30,2
000906 2766      	CLR  R22
000907 2777      	CLR  R23
000908 940e 0a0b 	CALL __PUTPARD1
00090a e084      	LDI  R24,4
00090b 940e 07ad 	CALL _scanf
00090d 9626      	ADIW R28,6
00090e 01fe      	MOVW R30,R28
00090f 93fa      	ST   -Y,R31
000910 93ea      	ST   -Y,R30
000911 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1E:
000912 93fa      	ST   -Y,R31
000913 93ea      	ST   -Y,R30
000914 940e 07fe 	CALL _strcmpf
000916 30e0      	CPI  R30,0
000917 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x1F:
000918 e0a0      	LDI  R26,LOW(_branka)
000919 e0b0      	LDI  R27,HIGH(_branka)
00091a 940e 0a17 	CALL __EEPROMRDW
00091c 93fa      	ST   -Y,R31
00091d 93ea      	ST   -Y,R30
00091e e0e1      	LDI  R30,LOW(1)
00091f 93ea      	ST   -Y,R30
000920 940e 01df 	CALL _prepocetcompasu
000922 940e 09cf 	CALL __CWD1
000924 940e 0aa6 	CALL __CDF1
                +
000926 e8af     +LDI R26 , LOW ( 0x3F35C28F )
000927 ecb2     +LDI R27 , HIGH ( 0x3F35C28F )
000928 e385     +LDI R24 , BYTE3 ( 0x3F35C28F )
000929 e39f     +LDI R25 , BYTE4 ( 0x3F35C28F )
                 	__GETD2N 0x3F35C28F
00092a 940e 0ad4 	CALL __MULF12
00092c 940e 0a6f 	CALL __CFD1
00092e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x20:
00092f 01fe      	MOVW R30,R28
000930 93fa      	ST   -Y,R31
000931 93ea      	ST   -Y,R30
000932 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
000933 efe4      	LDI  R30,LOW(500)
000934 e0f1      	LDI  R31,HIGH(500)
000935 93fa      	ST   -Y,R31
000936 93ea      	ST   -Y,R30
000937 940c 09b3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
000939 93fa      	ST   -Y,R31
00093a 93ea      	ST   -Y,R30
00093b 940c 09b3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x23:
00093d 93ea      	ST   -Y,R30
00093e 940e 01a1 	CALL _cmps03_read
000940 e0a0      	LDI  R26,LOW(_branka)
000941 e0b0      	LDI  R27,HIGH(_branka)
000942 940e 0a27 	CALL __EEPROMWRW
000944 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
000945 933a      	ST   -Y,R19
000946 940e 0818 	CALL _isspace
000948 30e0      	CPI  R30,0
000949 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x25:
00094a 85ec      	LDD  R30,Y+12
00094b 85fd      	LDD  R31,Y+12+1
00094c 93fa      	ST   -Y,R31
00094d 93ea      	ST   -Y,R30
00094e 940c 0656 	JMP  __get_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000950 2fa3      	MOV  R26,R19
000951 e0b0      	LDI  R27,0
000952 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000953 2fe3      	MOV  R30,R19
000954 e0f0      	LDI  R31,0
000955 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x28:
000956 85ec      	LDD  R30,Y+12
000957 85fd      	LDD  R31,Y+12+1
000958 9734      	SBIW R30,4
000959 87ec      	STD  Y+12,R30
00095a 87fd      	STD  Y+12+1,R31
00095b 85ac      	LDD  R26,Y+12
00095c 85bd      	LDD  R27,Y+12+1
00095d 9614      	ADIW R26,4
00095e 910d      	LD   R16,X+
00095f 911c      	LD   R17,X
000960 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
000961 9892      	cbi  __i2c_port,__scl_bit
000962 9893      	cbi  __i2c_port,__sda_bit
000963 9a8a      	sbi  __i2c_dir,__scl_bit
000964 988b      	cbi  __i2c_dir,__sda_bit
000965 c015      	rjmp __i2c_delay2
                 _i2c_start:
000966 988b      	cbi  __i2c_dir,__sda_bit
000967 988a      	cbi  __i2c_dir,__scl_bit
000968 27ee      	clr  r30
000969 0000      	nop
00096a 9b83      	sbis __i2c_pin,__sda_bit
00096b 9508      	ret
00096c 9b82      	sbis __i2c_pin,__scl_bit
00096d 9508      	ret
00096e d004      	rcall __i2c_delay1
00096f 9a8b      	sbi  __i2c_dir,__sda_bit
000970 d002      	rcall __i2c_delay1
000971 9a8a      	sbi  __i2c_dir,__scl_bit
000972 e0e1      	ldi  r30,1
                 __i2c_delay1:
000973 e162      	ldi  r22,18
000974 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000975 9a8b      	sbi  __i2c_dir,__sda_bit
000976 9a8a      	sbi  __i2c_dir,__scl_bit
000977 d003      	rcall __i2c_delay2
000978 988a      	cbi  __i2c_dir,__scl_bit
000979 dff9      	rcall __i2c_delay1
00097a 988b      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
00097b e265      	ldi  r22,37
                 __i2c_delay2l:
00097c 956a      	dec  r22
00097d f7f1      	brne __i2c_delay2l
00097e 9508      	ret
                 _i2c_read:
00097f e078      	ldi  r23,8
                 __i2c_read0:
000980 988a      	cbi  __i2c_dir,__scl_bit
000981 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000982 9b82      	sbis __i2c_pin,__scl_bit
000983 cffe      	rjmp __i2c_read3
000984 dfee      	rcall __i2c_delay1
000985 9488      	clc
000986 9983      	sbic __i2c_pin,__sda_bit
000987 9408      	sec
000988 9a8a      	sbi  __i2c_dir,__scl_bit
000989 dff1      	rcall __i2c_delay2
00098a 1fee      	rol  r30
00098b 957a      	dec  r23
00098c f799      	brne __i2c_read0
00098d 9179      	ld   r23,y+
00098e 2377      	tst  r23
00098f f411      	brne __i2c_read1
000990 988b      	cbi  __i2c_dir,__sda_bit
000991 c001      	rjmp __i2c_read2
                 __i2c_read1:
000992 9a8b      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000993 dfdf      	rcall __i2c_delay1
000994 988a      	cbi  __i2c_dir,__scl_bit
000995 dfe5      	rcall __i2c_delay2
000996 9a8a      	sbi  __i2c_dir,__scl_bit
000997 dfdb      	rcall __i2c_delay1
000998 988b      	cbi  __i2c_dir,__sda_bit
000999 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
00099a 91e9      	ld   r30,y+
00099b e078      	ldi  r23,8
                 __i2c_write0:
00099c 0fee      	lsl  r30
00099d f410      	brcc __i2c_write1
00099e 988b      	cbi  __i2c_dir,__sda_bit
00099f c001      	rjmp __i2c_write2
                 __i2c_write1:
0009a0 9a8b      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0009a1 dfd9      	rcall __i2c_delay2
0009a2 988a      	cbi  __i2c_dir,__scl_bit
0009a3 dfcf      	rcall __i2c_delay1
                 __i2c_write3:
0009a4 9b82      	sbis __i2c_pin,__scl_bit
0009a5 cffe      	rjmp __i2c_write3
0009a6 dfcc      	rcall __i2c_delay1
0009a7 9a8a      	sbi  __i2c_dir,__scl_bit
0009a8 957a      	dec  r23
0009a9 f791      	brne __i2c_write0
0009aa 988b      	cbi  __i2c_dir,__sda_bit
0009ab dfc7      	rcall __i2c_delay1
0009ac 988a      	cbi  __i2c_dir,__scl_bit
0009ad dfcd      	rcall __i2c_delay2
0009ae e0e1      	ldi  r30,1
0009af 9983      	sbic __i2c_pin,__sda_bit
0009b0 27ee      	clr  r30
0009b1 9a8a      	sbi  __i2c_dir,__scl_bit
0009b2 9508      	ret
                 
                 _delay_ms:
0009b3 91e9      	ld   r30,y+
0009b4 91f9      	ld   r31,y+
0009b5 9630      	adiw r30,0
0009b6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0009b7 ec8d     +LDI R24 , LOW ( 0xACD )
0009b8 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0009b9 9701     +SBIW R24 , 1
0009ba f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0009bb 95a8      	wdr
0009bc 9731      	sbiw r30,1
0009bd f7c9      	brne __delay_ms0
                 __delay_ms1:
0009be 9508      	ret
                 
                 __ADDW2R15:
0009bf 2400      	CLR  R0
0009c0 0daf      	ADD  R26,R15
0009c1 1db0      	ADC  R27,R0
0009c2 9508      	RET
                 
                 __ANEGW1:
0009c3 95f1      	NEG  R31
0009c4 95e1      	NEG  R30
0009c5 40f0      	SBCI R31,0
0009c6 9508      	RET
                 
                 __ANEGD1:
0009c7 95f0      	COM  R31
0009c8 9560      	COM  R22
0009c9 9570      	COM  R23
0009ca 95e1      	NEG  R30
0009cb 4fff      	SBCI R31,-1
0009cc 4f6f      	SBCI R22,-1
0009cd 4f7f      	SBCI R23,-1
0009ce 9508      	RET
                 
                 __CWD1:
0009cf 2f6f      	MOV  R22,R31
0009d0 0f66      	ADD  R22,R22
0009d1 0b66      	SBC  R22,R22
0009d2 2f76      	MOV  R23,R22
0009d3 9508      	RET
                 
                 __MULW12U:
0009d4 9ffa      	MUL  R31,R26
0009d5 2df0      	MOV  R31,R0
0009d6 9feb      	MUL  R30,R27
0009d7 0df0      	ADD  R31,R0
0009d8 9fea      	MUL  R30,R26
0009d9 2de0      	MOV  R30,R0
0009da 0df1      	ADD  R31,R1
0009db 9508      	RET
                 
                 __MULW12:
0009dc d01c      	RCALL __CHKSIGNW
0009dd dff6      	RCALL __MULW12U
0009de f40e      	BRTC __MULW121
0009df dfe3      	RCALL __ANEGW1
                 __MULW121:
0009e0 9508      	RET
                 
                 __DIVW21U:
0009e1 2400      	CLR  R0
0009e2 2411      	CLR  R1
0009e3 e190      	LDI  R25,16
                 __DIVW21U1:
0009e4 0faa      	LSL  R26
0009e5 1fbb      	ROL  R27
0009e6 1c00      	ROL  R0
0009e7 1c11      	ROL  R1
0009e8 1a0e      	SUB  R0,R30
0009e9 0a1f      	SBC  R1,R31
0009ea f418      	BRCC __DIVW21U2
0009eb 0e0e      	ADD  R0,R30
0009ec 1e1f      	ADC  R1,R31
0009ed c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0009ee 60a1      	SBR  R26,1
                 __DIVW21U3:
0009ef 959a      	DEC  R25
0009f0 f799      	BRNE __DIVW21U1
0009f1 01fd      	MOVW R30,R26
0009f2 01d0      	MOVW R26,R0
0009f3 9508      	RET
                 
                 __DIVW21:
0009f4 d004      	RCALL __CHKSIGNW
0009f5 dfeb      	RCALL __DIVW21U
0009f6 f40e      	BRTC __DIVW211
0009f7 dfcb      	RCALL __ANEGW1
                 __DIVW211:
0009f8 9508      	RET
                 
                 __CHKSIGNW:
0009f9 94e8      	CLT
0009fa fff7      	SBRS R31,7
0009fb c002      	RJMP __CHKSW1
0009fc dfc6      	RCALL __ANEGW1
0009fd 9468      	SET
                 __CHKSW1:
0009fe ffb7      	SBRS R27,7
0009ff c006      	RJMP __CHKSW2
000a00 95a0      	COM  R26
000a01 95b0      	COM  R27
000a02 9611      	ADIW R26,1
000a03 f800      	BLD  R0,0
000a04 9403      	INC  R0
000a05 fa00      	BST  R0,0
                 __CHKSW2:
000a06 9508      	RET
                 
                 __GETW1P:
000a07 91ed      	LD   R30,X+
000a08 91fc      	LD   R31,X
000a09 9711      	SBIW R26,1
000a0a 9508      	RET
                 
                 __PUTPARD1:
000a0b 937a      	ST   -Y,R23
000a0c 936a      	ST   -Y,R22
000a0d 93fa      	ST   -Y,R31
000a0e 93ea      	ST   -Y,R30
000a0f 9508      	RET
                 
                 __SWAPW12:
000a10 2e1b      	MOV  R1,R27
000a11 2fbf      	MOV  R27,R31
000a12 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000a13 2e1a      	MOV  R1,R26
000a14 2fae      	MOV  R26,R30
000a15 2de1      	MOV  R30,R1
000a16 9508      	RET
                 
                 __EEPROMRDW:
000a17 9611      	ADIW R26,1
000a18 d002      	RCALL __EEPROMRDB
000a19 2ffe      	MOV  R31,R30
000a1a 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000a1b 99e1      	SBIC EECR,EEWE
000a1c cffe      	RJMP __EEPROMRDB
000a1d 93ff      	PUSH R31
000a1e b7ff      	IN   R31,SREG
000a1f 94f8      	CLI
000a20 bbae      	OUT  EEARL,R26
000a21 bbbf      	OUT  EEARH,R27
000a22 9ae0      	SBI  EECR,EERE
000a23 b3ed      	IN   R30,EEDR
000a24 bfff      	OUT  SREG,R31
000a25 91ff      	POP  R31
000a26 9508      	RET
                 
                 __EEPROMWRW:
000a27 d007      	RCALL __EEPROMWRB
000a28 9611      	ADIW R26,1
000a29 93ef      	PUSH R30
000a2a 2fef      	MOV  R30,R31
000a2b d003      	RCALL __EEPROMWRB
000a2c 91ef      	POP  R30
000a2d 9711      	SBIW R26,1
000a2e 9508      	RET
                 
                 __EEPROMWRB:
000a2f 9be1      	SBIS EECR,EEWE
000a30 c002      	RJMP __EEPROMWRB1
000a31 95a8      	WDR
000a32 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000a33 b79f      	IN   R25,SREG
000a34 94f8      	CLI
000a35 bbae      	OUT  EEARL,R26
000a36 bbbf      	OUT  EEARH,R27
000a37 9ae0      	SBI  EECR,EERE
000a38 b38d      	IN   R24,EEDR
000a39 17e8      	CP   R30,R24
000a3a f019      	BREQ __EEPROMWRB0
000a3b bbed      	OUT  EEDR,R30
000a3c 9ae2      	SBI  EECR,EEMWE
000a3d 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000a3e bf9f      	OUT  SREG,R25
000a3f 9508      	RET
                 
                 __ROUND_REPACK:
000a40 2355      	TST  R21
000a41 f442      	BRPL __REPACK
000a42 3850      	CPI  R21,0x80
000a43 f411      	BRNE __ROUND_REPACK0
000a44 ffe0      	SBRS R30,0
000a45 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000a46 9631      	ADIW R30,1
000a47 1f69      	ADC  R22,R25
000a48 1f79      	ADC  R23,R25
000a49 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000a4a e850      	LDI  R21,0x80
000a4b 2757      	EOR  R21,R23
000a4c f411      	BRNE __REPACK0
000a4d 935f      	PUSH R21
000a4e c073      	RJMP __ZERORES
                 __REPACK0:
000a4f 3f5f      	CPI  R21,0xFF
000a50 f031      	BREQ __REPACK1
000a51 0f66      	LSL  R22
000a52 0c00      	LSL  R0
000a53 9557      	ROR  R21
000a54 9567      	ROR  R22
000a55 2f75      	MOV  R23,R21
000a56 9508      	RET
                 __REPACK1:
000a57 935f      	PUSH R21
000a58 2000      	TST  R0
000a59 f00a      	BRMI __REPACK2
000a5a c073      	RJMP __MAXRES
                 __REPACK2:
000a5b c06c      	RJMP __MINRES
                 
                 __UNPACK:
000a5c e850      	LDI  R21,0x80
000a5d 2e19      	MOV  R1,R25
000a5e 2215      	AND  R1,R21
000a5f 0f88      	LSL  R24
000a60 1f99      	ROL  R25
000a61 2795      	EOR  R25,R21
000a62 0f55      	LSL  R21
000a63 9587      	ROR  R24
                 
                 __UNPACK1:
000a64 e850      	LDI  R21,0x80
000a65 2e07      	MOV  R0,R23
000a66 2205      	AND  R0,R21
000a67 0f66      	LSL  R22
000a68 1f77      	ROL  R23
000a69 2775      	EOR  R23,R21
000a6a 0f55      	LSL  R21
000a6b 9567      	ROR  R22
000a6c 9508      	RET
                 
                 __CFD1U:
000a6d 9468      	SET
000a6e c001      	RJMP __CFD1U0
                 __CFD1:
000a6f 94e8      	CLT
                 __CFD1U0:
000a70 935f      	PUSH R21
000a71 dff2      	RCALL __UNPACK1
000a72 3870      	CPI  R23,0x80
000a73 f018      	BRLO __CFD10
000a74 3f7f      	CPI  R23,0xFF
000a75 f408      	BRCC __CFD10
000a76 c04b      	RJMP __ZERORES
                 __CFD10:
000a77 e156      	LDI  R21,22
000a78 1b57      	SUB  R21,R23
000a79 f4aa      	BRPL __CFD11
000a7a 9551      	NEG  R21
000a7b 3058      	CPI  R21,8
000a7c f40e      	BRTC __CFD19
000a7d 3059      	CPI  R21,9
                 __CFD19:
000a7e f030      	BRLO __CFD17
000a7f efef      	SER  R30
000a80 efff      	SER  R31
000a81 ef6f      	SER  R22
000a82 e77f      	LDI  R23,0x7F
000a83 f977      	BLD  R23,7
000a84 c01a      	RJMP __CFD15
                 __CFD17:
000a85 2777      	CLR  R23
000a86 2355      	TST  R21
000a87 f0b9      	BREQ __CFD15
                 __CFD18:
000a88 0fee      	LSL  R30
000a89 1fff      	ROL  R31
000a8a 1f66      	ROL  R22
000a8b 1f77      	ROL  R23
000a8c 955a      	DEC  R21
000a8d f7d1      	BRNE __CFD18
000a8e c010      	RJMP __CFD15
                 __CFD11:
000a8f 2777      	CLR  R23
                 __CFD12:
000a90 3058      	CPI  R21,8
000a91 f028      	BRLO __CFD13
000a92 2fef      	MOV  R30,R31
000a93 2ff6      	MOV  R31,R22
000a94 2f67      	MOV  R22,R23
000a95 5058      	SUBI R21,8
000a96 cff9      	RJMP __CFD12
                 __CFD13:
000a97 2355      	TST  R21
000a98 f031      	BREQ __CFD15
                 __CFD14:
000a99 9576      	LSR  R23
000a9a 9567      	ROR  R22
000a9b 95f7      	ROR  R31
000a9c 95e7      	ROR  R30
000a9d 955a      	DEC  R21
000a9e f7d1      	BRNE __CFD14
                 __CFD15:
000a9f 2000      	TST  R0
000aa0 f40a      	BRPL __CFD16
000aa1 df25      	RCALL __ANEGD1
                 __CFD16:
000aa2 915f      	POP  R21
000aa3 9508      	RET
                 
                 __CDF1U:
000aa4 9468      	SET
000aa5 c001      	RJMP __CDF1U0
                 __CDF1:
000aa6 94e8      	CLT
                 __CDF1U0:
000aa7 9730      	SBIW R30,0
000aa8 4060      	SBCI R22,0
000aa9 4070      	SBCI R23,0
000aaa f0b1      	BREQ __CDF10
000aab 2400      	CLR  R0
000aac f026      	BRTS __CDF11
000aad 2377      	TST  R23
000aae f412      	BRPL __CDF11
000aaf 9400      	COM  R0
000ab0 df16      	RCALL __ANEGD1
                 __CDF11:
000ab1 2e17      	MOV  R1,R23
000ab2 e17e      	LDI  R23,30
000ab3 2011      	TST  R1
                 __CDF12:
000ab4 f032      	BRMI __CDF13
000ab5 957a      	DEC  R23
000ab6 0fee      	LSL  R30
000ab7 1fff      	ROL  R31
000ab8 1f66      	ROL  R22
000ab9 1c11      	ROL  R1
000aba cff9      	RJMP __CDF12
                 __CDF13:
000abb 2fef      	MOV  R30,R31
000abc 2ff6      	MOV  R31,R22
000abd 2d61      	MOV  R22,R1
000abe 935f      	PUSH R21
000abf df8a      	RCALL __REPACK
000ac0 915f      	POP  R21
                 __CDF10:
000ac1 9508      	RET
                 
                 __ZERORES:
000ac2 27ee      	CLR  R30
000ac3 27ff      	CLR  R31
000ac4 2766      	CLR  R22
000ac5 2777      	CLR  R23
000ac6 915f      	POP  R21
000ac7 9508      	RET
                 
                 __MINRES:
000ac8 efef      	SER  R30
000ac9 efff      	SER  R31
000aca e76f      	LDI  R22,0x7F
000acb ef7f      	SER  R23
000acc 915f      	POP  R21
000acd 9508      	RET
                 
                 __MAXRES:
000ace efef      	SER  R30
000acf efff      	SER  R31
000ad0 e76f      	LDI  R22,0x7F
000ad1 e77f      	LDI  R23,0x7F
000ad2 915f      	POP  R21
000ad3 9508      	RET
                 
                 __MULF12:
000ad4 935f      	PUSH R21
000ad5 df86      	RCALL __UNPACK
000ad6 3870      	CPI  R23,0x80
000ad7 f351      	BREQ __ZERORES
000ad8 3890      	CPI  R25,0x80
000ad9 f341      	BREQ __ZERORES
000ada 2401      	EOR  R0,R1
000adb 9408      	SEC
000adc 1f79      	ADC  R23,R25
000add f423      	BRVC __MULF124
000ade f31c      	BRLT __ZERORES
                 __MULF125:
000adf 2000      	TST  R0
000ae0 f33a      	BRMI __MINRES
000ae1 cfec      	RJMP __MAXRES
                 __MULF124:
000ae2 920f      	PUSH R0
000ae3 931f      	PUSH R17
000ae4 932f      	PUSH R18
000ae5 933f      	PUSH R19
000ae6 934f      	PUSH R20
000ae7 2711      	CLR  R17
000ae8 2722      	CLR  R18
000ae9 2799      	CLR  R25
000aea 9f68      	MUL  R22,R24
000aeb 01a0      	MOVW R20,R0
000aec 9f8f      	MUL  R24,R31
000aed 2d30      	MOV  R19,R0
000aee 0d41      	ADD  R20,R1
000aef 1f59      	ADC  R21,R25
000af0 9f6b      	MUL  R22,R27
000af1 0d30      	ADD  R19,R0
000af2 1d41      	ADC  R20,R1
000af3 1f59      	ADC  R21,R25
000af4 9f8e      	MUL  R24,R30
000af5 d027      	RCALL __MULF126
000af6 9fbf      	MUL  R27,R31
000af7 d025      	RCALL __MULF126
000af8 9f6a      	MUL  R22,R26
000af9 d023      	RCALL __MULF126
000afa 9fbe      	MUL  R27,R30
000afb d01d      	RCALL __MULF127
000afc 9faf      	MUL  R26,R31
000afd d01b      	RCALL __MULF127
000afe 9fae      	MUL  R26,R30
000aff 0d11      	ADD  R17,R1
000b00 1f29      	ADC  R18,R25
000b01 1f39      	ADC  R19,R25
000b02 1f49      	ADC  R20,R25
000b03 1f59      	ADC  R21,R25
000b04 2fe3      	MOV  R30,R19
000b05 2ff4      	MOV  R31,R20
000b06 2f65      	MOV  R22,R21
000b07 2f52      	MOV  R21,R18
000b08 914f      	POP  R20
000b09 913f      	POP  R19
000b0a 912f      	POP  R18
000b0b 911f      	POP  R17
000b0c 900f      	POP  R0
000b0d 2366      	TST  R22
000b0e f02a      	BRMI __MULF122
000b0f 0f55      	LSL  R21
000b10 1fee      	ROL  R30
000b11 1fff      	ROL  R31
000b12 1f66      	ROL  R22
000b13 c002      	RJMP __MULF123
                 __MULF122:
000b14 9573      	INC  R23
000b15 f24b      	BRVS __MULF125
                 __MULF123:
000b16 df29      	RCALL __ROUND_REPACK
000b17 915f      	POP  R21
000b18 9508      	RET
                 
                 __MULF127:
000b19 0d10      	ADD  R17,R0
000b1a 1d21      	ADC  R18,R1
000b1b 1f39      	ADC  R19,R25
000b1c c002      	RJMP __MULF128
                 __MULF126:
000b1d 0d20      	ADD  R18,R0
000b1e 1d31      	ADC  R19,R1
                 __MULF128:
000b1f 1f49      	ADC  R20,R25
000b20 1f59      	ADC  R21,R25
000b21 9508      	RET
                 
                 __CPW02:
000b22 2400      	CLR  R0
000b23 160a      	CP   R0,R26
000b24 060b      	CPC  R0,R27
000b25 9508      	RET
                 
                 __SAVELOCR6:
000b26 935a      	ST   -Y,R21
                 __SAVELOCR5:
000b27 934a      	ST   -Y,R20
                 __SAVELOCR4:
000b28 933a      	ST   -Y,R19
                 __SAVELOCR3:
000b29 932a      	ST   -Y,R18
                 __SAVELOCR2:
000b2a 931a      	ST   -Y,R17
000b2b 930a      	ST   -Y,R16
000b2c 9508      	RET
                 
                 __LOADLOCR6:
000b2d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000b2e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000b2f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000b30 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000b31 8119      	LDD  R17,Y+1
000b32 8108      	LD   R16,Y
000b33 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  41 r1 :  25 r2 :   0 r3 :   0 r4 :  15 r5 :  18 r6 :   7 r7 :   9 
r8 :   3 r9 :   1 r10:   0 r11:   0 r12:   3 r13:  17 r14:   0 r15:   4 
r16:  54 r17:  89 r18:  16 r19:  32 r20:  26 r21:  57 r22:  50 r23:  47 
r24:  22 r25:  25 r26: 241 r27:  60 r28:  31 r29:   1 r30: 664 r31: 263 
x  :  24 y  : 421 z  :  11 
Registers used: 30 out of 35 (85.7%)

ATmega32 instruction use summary:
adc   :  23 add   :  17 adiw  :  33 and   :   2 andi  :   4 asr   :   0 
bclr  :   0 bld   :   2 brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   4 
break :   0 breq  :  31 brge  :  13 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :  22 brlt  :   8 brmi  :   4 brne  : 130 brpl  :   6 
brsh  :   9 brtc  :   4 brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 
bst   :   1 call  : 221 cbi   :  39 cbr   :   0 clc   :   1 clh   :   0 
cli   :   3 cln   :   0 clr   :  34 cls   :   0 clt   :   4 clv   :   0 
clz   :   0 com   :   8 cp    :  25 cpc   :  77 cpi   : 137 cpse  :   0 
dec   :   9 des   :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :  21 inc   :   2 jmp   :  50 ld    :  44 
ldd   : 132 ldi   : 326 lds   :   0 lpm   :  11 lsl   :  14 lsr   :   1 
mov   :  70 movw  :  29 mul   :  12 muls  :   1 mulsu :   0 neg   :   4 
nop   :   1 or    :   0 ori   :   4 out   :  64 pop   :  22 push  :  21 
rcall : 132 ret   :  81 reti  :   0 rjmp  : 180 rol   :  18 ror   :   7 
sbc   :   6 sbci  :  12 sbi   :  32 sbic  :   7 sbis  :   8 sbiw  :  28 
sbr   :   1 sbrc  :   1 sbrs  :   3 sec   :   2 seh   :   0 sei   :   0 
sen   :   0 ser   :  11 ses   :   0 set   :   4 sev   :   0 sez   :   0 
sleep :   0 spm   :   0 st    : 225 std   :  45 sts   :   0 sub   :   8 
subi  :  14 swap  :   0 tst   :  15 wdr   :   2 
Instructions used: 75 out of 112 (67.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001668   5648     88   5736   32768  17.5%
[.dseg] 0x000060 0x000298      0     56     56    2048   2.7%
[.eseg] 0x000000 0x000002      0      2      2    1024   0.2%

Assembly complete, 0 errors, 11 warnings
