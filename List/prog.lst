
AVRASM ver. 2.1.17  C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm Tue Nov 29 16:51:25 2011

C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1026): warning: Register r5 already defined by the .DEF directive
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1027): warning: Register r4 already defined by the .DEF directive
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1028): warning: Register r7 already defined by the .DEF directive
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1029): warning: Register r6 already defined by the .DEF directive
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1030): warning: Register r9 already defined by the .DEF directive
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1031): warning: Register r8 already defined by the .DEF directive
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1032): warning: Register r10 already defined by the .DEF directive
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1033): warning: Register r13 already defined by the .DEF directive
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1034): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.4 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : Yes
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : No
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _maxh=R5
                 	.DEF _rychlost_presunu=R4
                 	.DEF _rychlost_presunu_zrychlene=R7
                 	.DEF _rychlost_presunu_vzad=R6
                 	.DEF _prog=R9
                 	.DEF _smer=R8
                 	.DEF _x1=R10
                 	.DEF _rychlost=R13
                 	.DEF _rychl=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 005b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x19C:
000033 00d2
000034 d2c8
000035 0000
000036 0000      	.DB  0xD2,0x0,0xC8,0xD2,0x0,0x0,0x0,0x0
000037 c800      	.DB  0x0,0xC8
                 _0x0:
000038 7325
000039 6400
00003a 7461
00003b 0061      	.DB  0x25,0x73,0x0,0x64,0x61,0x74,0x61,0x0
00003c 696b
00003d 6b63
00003e 4c00
00003f 6531      	.DB  0x6B,0x69,0x63,0x6B,0x0,0x4C,0x31,0x65
000040 0064
000041 304c
000042 6465
000043 4c00      	.DB  0x64,0x0,0x4C,0x30,0x65,0x64,0x0,0x4C
000044 4445
000045 0030
000046 454c
000047 3144      	.DB  0x45,0x44,0x30,0x0,0x4C,0x45,0x44,0x31
000048 7300
000049 656d
00004a 0072
00004b 7972      	.DB  0x0,0x73,0x6D,0x65,0x72,0x0,0x72,0x79
00004c 6863
00004d 6f00
00004e 6362
00004f 0068      	.DB  0x63,0x68,0x0,0x6F,0x62,0x63,0x68,0x0
                 _0x202005F:
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1079): warning: .cseg .db misalignment - padding zero byte
000050 0001      	.DB  0x1
                 _0x2020000:
000051 4e2d
000052 4e41
C:\Users\Jufo\Desktop\robot com soft -13.11\codevision_program\List\prog.asm(1081): warning: .cseg .db misalignment - padding zero byte
000053 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
000054 000a      	.DW  0x0A
000055 0004      	.DW  0x04
000056 0066      	.DW  _0x19C*2
                 
000057 0001      	.DW  0x01
000058 0293      	.DW  __seed_G101
000059 00a0      	.DW  _0x202005F*2
                 
                 _0xFFFFFFFF:
00005a 0000      	.DW  0
                 
                 __RESET:
00005b 94f8      	CLI
00005c 27ee      	CLR  R30
00005d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005e e0f1      	LDI  R31,1
00005f bffb      	OUT  GICR,R31
000060 bfeb      	OUT  GICR,R30
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000062 e1f8      	LDI  R31,0x18
000063 bdf1      	OUT  WDTCR,R31
000064 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000065 e08d      	LDI  R24,(14-2)+1
000066 e0a2      	LDI  R26,2
000067 27bb      	CLR  R27
                 __CLEAR_REG:
000068 93ed      	ST   X+,R30
000069 958a      	DEC  R24
00006a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006b e080      	LDI  R24,LOW(0x800)
00006c e098      	LDI  R25,HIGH(0x800)
00006d e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
00006e 93ed      	ST   X+,R30
00006f 9701      	SBIW R24,1
000070 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000071 eae8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000072 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000073 9185      	LPM  R24,Z+
000074 9195      	LPM  R25,Z+
000075 9700      	SBIW R24,0
000076 f061      	BREQ __GLOBAL_INI_END
000077 91a5      	LPM  R26,Z+
000078 91b5      	LPM  R27,Z+
000079 9005      	LPM  R0,Z+
00007a 9015      	LPM  R1,Z+
00007b 01bf      	MOVW R22,R30
00007c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007d 9005      	LPM  R0,Z+
00007e 920d      	ST   X+,R0
00007f 9701      	SBIW R24,1
000080 f7e1      	BRNE __GLOBAL_INI_LOOP
000081 01fb      	MOVW R30,R22
000082 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000083 e5ef      	LDI  R30,LOW(0x85F)
000084 bfed      	OUT  SPL,R30
000085 e0e8      	LDI  R30,HIGH(0x85F)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e6c0      	LDI  R28,LOW(0x260)
000088 e0d2      	LDI  R29,HIGH(0x260)
                 
000089 940c 06a9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project : Robot_sutaz Istambul
                 ;Version : V1.2
                 ;Date    : 21. 5. 2011
                 ;Author  : Juraj Fojtik
                 ;Company : PrianicSlovakia
                 ;
                 ;Chip type           : ATmega8535
                 ;Program type        : Application
                 ;Clock frequency     : 11,059200 MHz
                 ;Memory model        : Small
                 ;External RAM size   : 0
                 ;Data Stack size     : 128
                 ;*****************************************************/
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// I2C Bus function
                 ;#asm
                    .equ __i2c_port=0x12 ;PORTD
                    .equ __sda_bit=3
                    .equ __scl_bit=2
                 ; 0000 0016 #endasm
                 ;
                 ;//---------------------------------
                 ;//zmena rychlosti Uart
                 ;//---------------------------------
                 ;void nastav_9600(){
                 ; 0000 001B void nastav_9600(){
                 
                 	.CSEG
                 ; 0000 001C UCSRA=0x00;
                 ; 0000 001D UCSRB=0x18;
                 ; 0000 001E UCSRC=0x86;
                 ; 0000 001F UBRRH=0x00;
                 ; 0000 0020 UBRRL=0x47;
                 ; 0000 0021 }
                 ;void nastav_115200(){
                 ; 0000 0022 void nastav_115200(){
                 ; 0000 0023 UCSRA=0x00;
                 ; 0000 0024 UCSRB=0x18;
                 ; 0000 0025 UCSRC=0x86;
                 ; 0000 0026 UBRRH=0x00;
                 ; 0000 0027 UBRRL=0x05;
                 ; 0000 0028 }
                 ;//---------------------------------
                 ;//--------------------------------
                 ;// Kniznice
                 ;//--------------------------------
                 ;#include <i2c.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#define ADC_VREF_TYPE 0x60
                 ;#include "library_snimace.c"
                 ;#define Senzor_8 read_adc(3)
                 ;#define Senzor_7 read_adc(2)
                 ;#define Senzor_6 read_adc(1)
                 ;#define Senzor_5 read_adc(0)
                 ;#define Senzor_4 read_adc(4)
                 ;#define Senzor_3 read_adc(5)
                 ;#define Senzor_2 read_adc(6)
                 ;#define Senzor_1 read_adc(7)
                 ;#define Kick_sens   PINB.5                     //kicker senzor
                 ;#define Mot_sens    PINB.6                     //motor prudova ochrana
                 ;
                 ;//---------------------------------
                 ;// Nacitavanie ADC - 8bit
                 ;//---------------------------------
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0033 {
                 _read_adc:
                 ;ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
00008b 940e 08bf 	CALL SUBOPT_0x0
00008d 66e0      	ORI  R30,LOW(0x60)
00008e b9e7      	OUT  0x7,R30
                 ;// Delay needed for the stabilization of the ADC input voltage
                 ;delay_us(10);
                +
00008f e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
000090 958a     +DEC R24
000091 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ;// Start the AD conversion
                 ;ADCSRA|=0x40;
000092 940e 08c2 	CALL SUBOPT_0x1
000094 64e0      	ORI  R30,0x40
000095 b9e6      	OUT  0x6,R30
                 ;// Wait for the AD conversion to complete
                 ;while ((ADCSRA & 0x10)==0);
                 _0x3:
000096 940e 08c2 	CALL SUBOPT_0x1
000098 71e0      	ANDI R30,LOW(0x10)
000099 f3e1      	BREQ _0x3
                 ;ADCSRA|=0x10;
00009a 940e 08c2 	CALL SUBOPT_0x1
00009c 61e0      	ORI  R30,0x10
00009d b9e6      	OUT  0x6,R30
                 ;return ADCH;
00009e b1e5      	IN   R30,0x5
00009f c0f9      	RJMP _0x20A0009
                 ;}
                 ;//senzory lopty
                 ;//------------------------------
                 ;unsigned char maxh;
                 ;unsigned char inrange(unsigned char a, unsigned char b, unsigned char range){
                 _inrange:
                 ;if (a <= b && b <= (a+range))
                 ;	a -> Y+2
                 ;	b -> Y+1
                 ;	range -> Y+0
0000a0 81e9      	LDD  R30,Y+1
0000a1 81aa      	LDD  R26,Y+2
0000a2 17ea      	CP   R30,R26
0000a3 f050      	BRLO _0x7
0000a4 27bb      	CLR  R27
0000a5 940e 08bf 	CALL SUBOPT_0x0
0000a7 0fea      	ADD  R30,R26
0000a8 1ffb      	ADC  R31,R27
0000a9 81a9      	LDD  R26,Y+1
0000aa e0b0      	LDI  R27,0
0000ab 17ea      	CP   R30,R26
0000ac 07fb      	CPC  R31,R27
0000ad f40c      	BRGE _0x8
                 _0x7:
0000ae c002      	RJMP _0x6
                 _0x8:
                 ;    return 1;
0000af e0e1      	LDI  R30,LOW(1)
0000b0 c106      	RJMP _0x20A0008
                 ;if (b <= a && a <= (b+range))
                 _0x6:
0000b1 81ea      	LDD  R30,Y+2
0000b2 81a9      	LDD  R26,Y+1
0000b3 17ea      	CP   R30,R26
0000b4 f050      	BRLO _0xA
0000b5 27bb      	CLR  R27
0000b6 940e 08bf 	CALL SUBOPT_0x0
0000b8 0fea      	ADD  R30,R26
0000b9 1ffb      	ADC  R31,R27
0000ba 81aa      	LDD  R26,Y+2
0000bb e0b0      	LDI  R27,0
0000bc 17ea      	CP   R30,R26
0000bd 07fb      	CPC  R31,R27
0000be f40c      	BRGE _0xB
                 _0xA:
0000bf c002      	RJMP _0x9
                 _0xB:
                 ;    return 1;
0000c0 e0e1      	LDI  R30,LOW(1)
0000c1 c0f5      	RJMP _0x20A0008
                 ;else
                 _0x9:
                 ;    return 0;
0000c2 e0e0      	LDI  R30,LOW(0)
0000c3 c0f3      	RJMP _0x20A0008
                 ;}
                 ;unsigned char maxx(unsigned char maxvid/*maximalna hodnota videnia*/){
                 _maxx:
                 ;    unsigned char sens = 17;
                 ;    unsigned char s[8];
                 ;    unsigned char rozptyl = 8;
                 ;    maxh = 255;
0000c4 9728      	SBIW R28,8
0000c5 931a      	ST   -Y,R17
0000c6 930a      	ST   -Y,R16
                 ;	maxvid -> Y+10
                 ;	sens -> R17
                 ;	s -> Y+2
                 ;	rozptyl -> R16
0000c7 e111      	LDI  R17,17
0000c8 e008      	LDI  R16,8
0000c9 efef      	LDI  R30,LOW(255)
0000ca 2e5e      	MOV  R5,R30
                 ;    s[0] = Senzor_1;
0000cb e0e7      	LDI  R30,LOW(7)
0000cc 93ea      	ST   -Y,R30
0000cd dfbd      	RCALL _read_adc
0000ce 83ea      	STD  Y+2,R30
                 ;    if (s[0] < maxvid ){
0000cf 85ea      	LDD  R30,Y+10
0000d0 81aa      	LDD  R26,Y+2
0000d1 17ae      	CP   R26,R30
0000d2 f420      	BRSH _0xD
                 ;        if (s[0] <= maxh){
0000d3 165a      	CP   R5,R26
0000d4 f010      	BRLO _0xE
                 ;            sens = 1;
0000d5 e011      	LDI  R17,LOW(1)
                 ;            maxh = s[0];
0000d6 805a      	LDD  R5,Y+2
                 ;            }
                 ;    }
                 _0xE:
                 ;    s[1] = Senzor_2;
                 _0xD:
0000d7 e0e6      	LDI  R30,LOW(6)
0000d8 93ea      	ST   -Y,R30
0000d9 dfb1      	RCALL _read_adc
0000da 83eb      	STD  Y+3,R30
                 ;    if (s[1] < maxvid ){
0000db 85ea      	LDD  R30,Y+10
0000dc 81ab      	LDD  R26,Y+3
0000dd 17ae      	CP   R26,R30
0000de f420      	BRSH _0xF
                 ;        if (s[1] <= maxh){
0000df 165a      	CP   R5,R26
0000e0 f010      	BRLO _0x10
                 ;            sens = 3;
0000e1 e013      	LDI  R17,LOW(3)
                 ;            maxh = s[1];
0000e2 805b      	LDD  R5,Y+3
                 ;            }
                 ;    }
                 _0x10:
                 ;    s[2] = Senzor_3;
                 _0xF:
0000e3 e0e5      	LDI  R30,LOW(5)
0000e4 93ea      	ST   -Y,R30
0000e5 dfa5      	RCALL _read_adc
0000e6 83ec      	STD  Y+4,R30
                 ;    if (s[2] < maxvid ){
0000e7 85ea      	LDD  R30,Y+10
0000e8 81ac      	LDD  R26,Y+4
0000e9 17ae      	CP   R26,R30
0000ea f420      	BRSH _0x11
                 ;        if (s[2] < maxh){
0000eb 15a5      	CP   R26,R5
0000ec f410      	BRSH _0x12
                 ;            sens = 5;
0000ed e015      	LDI  R17,LOW(5)
                 ;            maxh = s[2];
0000ee 805c      	LDD  R5,Y+4
                 ;            }
                 ;    }
                 _0x12:
                 ;    s[3] = Senzor_4;
                 _0x11:
0000ef e0e4      	LDI  R30,LOW(4)
0000f0 93ea      	ST   -Y,R30
0000f1 df99      	RCALL _read_adc
0000f2 83ed      	STD  Y+5,R30
                 ;    if (s[3] < maxvid ){
0000f3 85ea      	LDD  R30,Y+10
0000f4 81ad      	LDD  R26,Y+5
0000f5 17ae      	CP   R26,R30
0000f6 f420      	BRSH _0x13
                 ;        if (s[3] <= maxh){
0000f7 165a      	CP   R5,R26
0000f8 f010      	BRLO _0x14
                 ;            sens = 7;
0000f9 e017      	LDI  R17,LOW(7)
                 ;            maxh = s[3];
0000fa 805d      	LDD  R5,Y+5
                 ;            }
                 ;    }
                 _0x14:
                 ;    s[4] = Senzor_5;
                 _0x13:
0000fb e0e0      	LDI  R30,LOW(0)
0000fc 93ea      	ST   -Y,R30
0000fd df8d      	RCALL _read_adc
0000fe 83ee      	STD  Y+6,R30
                 ;    if (s[4] < maxvid ){
0000ff 85ea      	LDD  R30,Y+10
000100 81ae      	LDD  R26,Y+6
000101 17ae      	CP   R26,R30
000102 f420      	BRSH _0x15
                 ;        if (s[4] <= maxh){
000103 165a      	CP   R5,R26
000104 f010      	BRLO _0x16
                 ;            sens = 9;
000105 e019      	LDI  R17,LOW(9)
                 ;            maxh = s[4];
000106 805e      	LDD  R5,Y+6
                 ;            }
                 ;    }
                 _0x16:
                 ;    s[5] = Senzor_6;
                 _0x15:
000107 e0e1      	LDI  R30,LOW(1)
000108 93ea      	ST   -Y,R30
000109 df81      	RCALL _read_adc
00010a 83ef      	STD  Y+7,R30
                 ;    if (s[5] < maxvid ){
00010b 85ea      	LDD  R30,Y+10
00010c 81af      	LDD  R26,Y+7
00010d 17ae      	CP   R26,R30
00010e f420      	BRSH _0x17
                 ;        if (s[5] <= maxh){
00010f 165a      	CP   R5,R26
000110 f010      	BRLO _0x18
                 ;            sens = 11;
000111 e01b      	LDI  R17,LOW(11)
                 ;            maxh = s[5];
000112 805f      	LDD  R5,Y+7
                 ;            }
                 ;    }
                 _0x18:
                 ;    s[6] = Senzor_7;
                 _0x17:
000113 e0e2      	LDI  R30,LOW(2)
000114 93ea      	ST   -Y,R30
000115 df75      	RCALL _read_adc
000116 87e8      	STD  Y+8,R30
                 ;    if (s[6] < maxvid ){
000117 85ea      	LDD  R30,Y+10
000118 85a8      	LDD  R26,Y+8
000119 17ae      	CP   R26,R30
00011a f420      	BRSH _0x19
                 ;        if (s[6] <= maxh){
00011b 165a      	CP   R5,R26
00011c f010      	BRLO _0x1A
                 ;            sens = 13;
00011d e01d      	LDI  R17,LOW(13)
                 ;            maxh = s[6];
00011e 8458      	LDD  R5,Y+8
                 ;            }
                 ;    }
                 _0x1A:
                 ;    s[7] = Senzor_8;
                 _0x19:
00011f e0e3      	LDI  R30,LOW(3)
000120 93ea      	ST   -Y,R30
000121 df69      	RCALL _read_adc
000122 87e9      	STD  Y+9,R30
                 ;    if (s[7] < maxvid ){
000123 85ea      	LDD  R30,Y+10
000124 85a9      	LDD  R26,Y+9
000125 17ae      	CP   R26,R30
000126 f420      	BRSH _0x1B
                 ;        if (s[7] <= maxh){
000127 165a      	CP   R5,R26
000128 f010      	BRLO _0x1C
                 ;            sens = 15;
000129 e01f      	LDI  R17,LOW(15)
                 ;            maxh = s[7];
00012a 8459      	LDD  R5,Y+9
                 ;            }
                 ;    }
                 _0x1C:
                 ;    if (sens == 1){
                 _0x1B:
00012b 3011      	CPI  R17,1
00012c f451      	BRNE _0x1D
                 ;        if (inrange(s[0],s[1],rozptyl) == 1)
00012d 940e 08c5 	CALL SUBOPT_0x2
00012f f411      	BRNE _0x1E
                 ;            sens = 2;
000130 e012      	LDI  R17,LOW(2)
                 ;        else if(inrange(s[7],s[0],rozptyl) == 1)
000131 c004      	RJMP _0x1F
                 _0x1E:
000132 940e 08ce 	CALL SUBOPT_0x3
000134 f409      	BRNE _0x20
                 ;            sens = 16;
000135 e110      	LDI  R17,LOW(16)
                 ;            }
                 _0x20:
                 _0x1F:
                 ;    else if (sens == 3){
000136 c053      	RJMP _0x21
                 _0x1D:
000137 3013      	CPI  R17,3
000138 f451      	BRNE _0x22
                 ;        if (inrange(s[1],s[2],rozptyl) == 1)
000139 940e 08d7 	CALL SUBOPT_0x4
00013b f411      	BRNE _0x23
                 ;            sens = 4;
00013c e014      	LDI  R17,LOW(4)
                 ;        else if(inrange(s[0],s[1],rozptyl) == 1)
00013d c004      	RJMP _0x24
                 _0x23:
00013e 940e 08c5 	CALL SUBOPT_0x2
000140 f409      	BRNE _0x25
                 ;            sens = 2;
000141 e012      	LDI  R17,LOW(2)
                 ;            }
                 _0x25:
                 _0x24:
                 ;    else if (sens == 5){
000142 c047      	RJMP _0x26
                 _0x22:
000143 3015      	CPI  R17,5
000144 f451      	BRNE _0x27
                 ;        if (inrange(s[2],s[3],rozptyl) == 1)
000145 940e 08e0 	CALL SUBOPT_0x5
000147 f411      	BRNE _0x28
                 ;            sens = 6;
000148 e016      	LDI  R17,LOW(6)
                 ;        else if(inrange(s[1],s[2],rozptyl) == 1)
000149 c004      	RJMP _0x29
                 _0x28:
00014a 940e 08d7 	CALL SUBOPT_0x4
00014c f409      	BRNE _0x2A
                 ;            sens = 4;
00014d e014      	LDI  R17,LOW(4)
                 ;            }
                 _0x2A:
                 _0x29:
                 ;    else if (sens == 7){
00014e c03b      	RJMP _0x2B
                 _0x27:
00014f 3017      	CPI  R17,7
000150 f451      	BRNE _0x2C
                 ;        if (inrange(s[3],s[4],rozptyl) == 1)
000151 940e 08e9 	CALL SUBOPT_0x6
000153 f411      	BRNE _0x2D
                 ;            sens = 8;
000154 e018      	LDI  R17,LOW(8)
                 ;        else if(inrange(s[2],s[3],rozptyl) == 1)
000155 c004      	RJMP _0x2E
                 _0x2D:
000156 940e 08e0 	CALL SUBOPT_0x5
000158 f409      	BRNE _0x2F
                 ;            sens = 6;
000159 e016      	LDI  R17,LOW(6)
                 ;            }
                 _0x2F:
                 _0x2E:
                 ;    else if (sens == 9){
00015a c02f      	RJMP _0x30
                 _0x2C:
00015b 3019      	CPI  R17,9
00015c f451      	BRNE _0x31
                 ;        if (inrange(s[4],s[5],rozptyl) == 1)
00015d 940e 08f2 	CALL SUBOPT_0x7
00015f f411      	BRNE _0x32
                 ;            sens = 10;
000160 e01a      	LDI  R17,LOW(10)
                 ;        else if(inrange(s[3],s[4],rozptyl) == 1)
000161 c004      	RJMP _0x33
                 _0x32:
000162 940e 08e9 	CALL SUBOPT_0x6
000164 f409      	BRNE _0x34
                 ;            sens = 8;
000165 e018      	LDI  R17,LOW(8)
                 ;            }
                 _0x34:
                 _0x33:
                 ;    else if (sens == 11){
000166 c023      	RJMP _0x35
                 _0x31:
000167 301b      	CPI  R17,11
000168 f451      	BRNE _0x36
                 ;        if (inrange(s[5],s[6],rozptyl) == 1)
000169 940e 08fb 	CALL SUBOPT_0x8
00016b f411      	BRNE _0x37
                 ;            sens = 12;
00016c e01c      	LDI  R17,LOW(12)
                 ;        else if(inrange(s[4],s[5],rozptyl) == 1)
00016d c004      	RJMP _0x38
                 _0x37:
00016e 940e 08f2 	CALL SUBOPT_0x7
000170 f409      	BRNE _0x39
                 ;            sens = 10;
000171 e01a      	LDI  R17,LOW(10)
                 ;            }
                 _0x39:
                 _0x38:
                 ;    else if (sens == 13){
000172 c017      	RJMP _0x3A
                 _0x36:
000173 301d      	CPI  R17,13
000174 f451      	BRNE _0x3B
                 ;        if (inrange(s[6],s[7],rozptyl) == 1)
000175 940e 0904 	CALL SUBOPT_0x9
000177 f411      	BRNE _0x3C
                 ;            sens = 14;
000178 e01e      	LDI  R17,LOW(14)
                 ;        else if(inrange(s[5],s[6],rozptyl) == 1)
000179 c004      	RJMP _0x3D
                 _0x3C:
00017a 940e 08fb 	CALL SUBOPT_0x8
00017c f409      	BRNE _0x3E
                 ;            sens = 12;
00017d e01c      	LDI  R17,LOW(12)
                 ;            }
                 _0x3E:
                 _0x3D:
                 ;    else if (sens == 15){
00017e c00b      	RJMP _0x3F
                 _0x3B:
00017f 301f      	CPI  R17,15
000180 f449      	BRNE _0x40
                 ;        if (inrange(s[7],s[0],rozptyl) == 1)
000181 940e 08ce 	CALL SUBOPT_0x3
000183 f411      	BRNE _0x41
                 ;            sens = 16;
000184 e110      	LDI  R17,LOW(16)
                 ;        else if(inrange(s[6],s[7],rozptyl) == 1)
000185 c004      	RJMP _0x42
                 _0x41:
000186 940e 0904 	CALL SUBOPT_0x9
000188 f409      	BRNE _0x43
                 ;            sens = 14;
000189 e01e      	LDI  R17,LOW(14)
                 ;            }
                 _0x43:
                 _0x42:
                 ;return sens;
                 _0x40:
                 _0x3F:
                 _0x3A:
                 _0x35:
                 _0x30:
                 _0x2B:
                 _0x26:
                 _0x21:
00018a 2fe1      	MOV  R30,R17
00018b 8119      	LDD  R17,Y+1
00018c 8108      	LDD  R16,Y+0
00018d 962b      	ADIW R28,11
00018e 9508      	RET
                 ;}
                 ;//kompas
                 ;//------------------------------
                 ;unsigned char compass_2(){
                 ;    unsigned char value;
                 ;    i2c_start();
                 ;	value -> R17
                 ;    i2c_write(0xC0);
                 ;    i2c_write(1);
                 ;    i2c_start();
                 ;    i2c_write(0xC1);
                 ;    value = i2c_read(0);
                 ;    i2c_stop();
                 ;    return value;
                 ;}
                 ;//------------------------------
                 ;void cmps03_scanmode(unsigned char mode){
                 _cmps03_scanmode:
                 ;        i2c_start();
                 ;	mode -> Y+0
00018f 940e 090d 	CALL SUBOPT_0xA
                 ;        i2c_write(0xC0);
                 ;        i2c_write(0x12);
                 ;        i2c_write(0x55);
                 ;        i2c_write(0x5A);
                 ;        i2c_write(0xA5);
                 ;        i2c_write(0x09 + mode);
000191 940e 08bf 	CALL SUBOPT_0x0
000193 9639      	ADIW R30,9
000194 93ea      	ST   -Y,R30
000195 940e 0a2a 	CALL _i2c_write
                 ;        i2c_stop();
000197 940e 0a05 	CALL _i2c_stop
                 ;}
                 _0x20A0009:
000199 9621      	ADIW R28,1
00019a 9508      	RET
                 ;void cmps03_reset(void){
                 _cmps03_reset:
                 ;        i2c_start();
00019b 940e 090d 	CALL SUBOPT_0xA
                 ;        i2c_write(0xC0);
                 ;        i2c_write(0x12);
                 ;        i2c_write(0x55);
                 ;        i2c_write(0x5A);
                 ;        i2c_write(0xA5);
                 ;        i2c_write(0xF2);
00019d efe2      	LDI  R30,LOW(242)
00019e 93ea      	ST   -Y,R30
00019f 940e 0a2a 	CALL _i2c_write
                 ;        i2c_stop();
0001a1 940e 0a05 	CALL _i2c_stop
                 ;}
0001a3 9508      	RET
                 ;int cmps03_read(unsigned char mode){
                 _cmps03_read:
                 ;    unsigned char a,b;
                 ;    if (mode==1){
0001a4 940e 0923 	CALL SUBOPT_0xB
                 ;	mode -> Y+2
                 ;	a -> R17
                 ;	b -> R16
0001a6 f491      	BRNE _0x44
                 ;        i2c_start();
0001a7 940e 0928 	CALL SUBOPT_0xC
                 ;        i2c_write(0xC0);
                 ;        i2c_write(0x01);
0001a9 e0e1      	LDI  R30,LOW(1)
0001aa 940e 092e 	CALL SUBOPT_0xD
                 ;        i2c_start();
                 ;        i2c_write(0xC1);
                 ;        a = i2c_read(0);
0001ac e0e0      	LDI  R30,LOW(0)
0001ad 93ea      	ST   -Y,R30
0001ae 940e 0a0f 	CALL _i2c_read
0001b0 2f1e      	MOV  R17,R30
                 ;        i2c_stop();
0001b1 940e 0a05 	CALL _i2c_stop
                 ;        return a;
0001b3 2fe1      	MOV  R30,R17
0001b4 e0f0      	LDI  R31,0
0001b5 8119      	LDD  R17,Y+1
0001b6 8108      	LDD  R16,Y+0
                 _0x20A0008:
0001b7 9623      	ADIW R28,3
0001b8 9508      	RET
                 ;    }
                 ;    else if(mode==2){
                 _0x44:
0001b9 81aa      	LDD  R26,Y+2
0001ba 30a2      	CPI  R26,LOW(0x2)
0001bb f501      	BRNE _0x46
                 ;        i2c_start();
0001bc 940e 0928 	CALL SUBOPT_0xC
                 ;        i2c_write(0xC0);
                 ;        i2c_write(0x02);
0001be e0e2      	LDI  R30,LOW(2)
0001bf 940e 092e 	CALL SUBOPT_0xD
                 ;        i2c_start();
                 ;        i2c_write(0xC1);
                 ;        a = i2c_read(1);
0001c1 e0e1      	LDI  R30,LOW(1)
0001c2 93ea      	ST   -Y,R30
0001c3 940e 0a0f 	CALL _i2c_read
0001c5 2f1e      	MOV  R17,R30
                 ;        b = i2c_read(0);
0001c6 e0e0      	LDI  R30,LOW(0)
0001c7 93ea      	ST   -Y,R30
0001c8 940e 0a0f 	CALL _i2c_read
0001ca 2f0e      	MOV  R16,R30
                 ;        i2c_stop();
0001cb 940e 0a05 	CALL _i2c_stop
                 ;        return (a * 256 + b);
0001cd 2fa1      	MOV  R26,R17
0001ce e0b0      	LDI  R27,0
0001cf e0e0      	LDI  R30,LOW(256)
0001d0 e0f1      	LDI  R31,HIGH(256)
0001d1 940e 0a6c 	CALL __MULW12
0001d3 01df      	MOVW R26,R30
0001d4 2fe0      	MOV  R30,R16
0001d5 e0f0      	LDI  R31,0
0001d6 0fea      	ADD  R30,R26
0001d7 1ffb      	ADC  R31,R27
0001d8 8119      	LDD  R17,Y+1
0001d9 8108      	LDD  R16,Y+0
0001da 940c 06e3 	JMP  _0x20A0004
                 ;    }
                 ;    else{
                 _0x46:
                 ;        return -1;
0001dc efef      	LDI  R30,LOW(65535)
0001dd efff      	LDI  R31,HIGH(65535)
0001de 8119      	LDD  R17,Y+1
0001df 8108      	LDD  R16,Y+0
0001e0 940c 06e3 	JMP  _0x20A0004
                 ;    }
                 ;}
                 ;int prepocetcompasu(int stupen, unsigned char mode){
                 _prepocetcompasu:
                 ;    int prepocet;
                 ;    if (mode == 1){
0001e2 940e 0923 	CALL SUBOPT_0xB
                 ;	stupen -> Y+3
                 ;	mode -> Y+2
                 ;	prepocet -> R16,R17
0001e4 f471      	BRNE _0x48
                 ;        prepocet = cmps03_read(1) - stupen;
0001e5 e0e1      	LDI  R30,LOW(1)
0001e6 940e 0937 	CALL SUBOPT_0xE
                 ;        if (prepocet >= 255){
                +
0001e8 3f0f     +CPI R16 , LOW ( 255 )
0001e9 e0e0     +LDI R30 , HIGH ( 255 )
0001ea 071e     +CPC R17 , R30
                 	__CPWRN 16,17,255
0001eb f014      	BRLT _0x49
                 ;            prepocet = prepocet - 255;
                +
0001ec 5f0f     +SUBI R16 , LOW ( 255 )
0001ed 4010     +SBCI R17 , HIGH ( 255 )
                 	__SUBWRN 16,17,255
                 ;        }
                 ;        if (prepocet < 0){
                 _0x49:
0001ee 2311      	TST  R17
0001ef f412      	BRPL _0x4A
                 ;            prepocet = prepocet + 255;
                +
0001f0 5001     +SUBI R16 , LOW ( - 255 )
0001f1 4f1f     +SBCI R17 , HIGH ( - 255 )
                 	__ADDWRN 16,17,255
                 ;        }
                 ;    }
                 _0x4A:
                 ;    else {
0001f2 c00d      	RJMP _0x4B
                 _0x48:
                 ;        prepocet = cmps03_read(2) - stupen;
0001f3 e0e2      	LDI  R30,LOW(2)
0001f4 940e 0937 	CALL SUBOPT_0xE
                 ;        if (prepocet > 3599){
                +
0001f6 3100     +CPI R16 , LOW ( 3600 )
0001f7 e0ee     +LDI R30 , HIGH ( 3600 )
0001f8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3600
0001f9 f014      	BRLT _0x4C
                 ;            prepocet = prepocet - 3599;
                +
0001fa 500f     +SUBI R16 , LOW ( 3599 )
0001fb 401e     +SBCI R17 , HIGH ( 3599 )
                 	__SUBWRN 16,17,3599
                 ;        }
                 ;        if (prepocet < 0){
                 _0x4C:
0001fc 2311      	TST  R17
0001fd f412      	BRPL _0x4D
                 ;            prepocet = prepocet + 3599;
                +
0001fe 5f01     +SUBI R16 , LOW ( - 3599 )
0001ff 4f11     +SBCI R17 , HIGH ( - 3599 )
                 	__ADDWRN 16,17,3599
                 ;        }
                 ;    }
                 _0x4D:
                 _0x4B:
                 ;
                 ;
                 ;    return prepocet;
000200 01f8      	MOVW R30,R16
000201 8119      	LDD  R17,Y+1
000202 8108      	LDD  R16,Y+0
000203 940c 0705 	JMP  _0x20A0003
                 ;}
                 ;//------------------------------
                 ;//Ultrazvuky
                 ;//------------------------------
                 ;int ult_lavy()
                 ;{
                 ;   char ulth[3];
                 ;   int vysl;
                 ;   nastav_9600();
                 ;	ulth -> Y+2
                 ;	vysl -> R16,R17
                 ;    PORTC.5 = 1 ;
                 ;    delay_ms(10);
                 ;    while(getchar() != 0x52);
                 ;    ulth[0] = getchar();
                 ;    ulth[1] = getchar();
                 ;    ulth[2] = getchar();
                 ;    PORTC.5 = 0 ;
                 ;    vysl = atoi(ulth);
                 ;          nastav_115200();
                 ;    delay_ms(5);
                 ;    return vysl;
                 ;}
                 ;int ult_zadny()
                 ;{
                 ;   char ulth[3];
                 ;   int vysl;
                 ;   nastav_9600();
                 ;	ulth -> Y+2
                 ;	vysl -> R16,R17
                 ;   PORTC.7 = 1 ;
                 ;   delay_ms(10);
                 ;    while(getchar() != 0x52);
                 ;    ulth[0] = getchar();
                 ;    ulth[1] = getchar();
                 ;    ulth[2] = getchar();
                 ;    PORTC.7 = 0 ;
                 ;    vysl = atoi(ulth);
                 ;          nastav_115200();
                 ;    delay_ms(5);
                 ;    return vysl;
                 ;}
                 ;//------------------------------
                 ;#include "protocol.c"
                 ;#include <string.h>
                 ;
                 ;#define byte_for_dat 1        //2 na bit_for_dat = pocet dat ktore sa daju prenpiest
                 ;#define byte_for_char 1        //2 na bit_for_char = pocet znakov v jednotlivych datach
                 ;#define char_for_array 10    //pocet znakov pre pole
                 ;
                 ;//funkcia zakoduje data do klastroveho protokolu, data_vystup = tu su zakodovane data, data_vstup=je to
                 ;//vstup vo forme multiarray, size = velkost pola
                 ;int zakoduj(char data_vystup[],char data_vstup[][char_for_array],int size){
                 ; 0000 0034 int zakoduj(char data_vystup[],char data_vstup[][10    ],int size){
                 ;    int posun = 0;
                 ;    int i=0;
                 ;    int z=0;
                 ;//urcuje pocet dat-----------------------
                 ;    data_vystup[posun] = size&0xFF;
                 ;	data_vystup -> Y+10
                 ;	data_vstup -> Y+8
                 ;	size -> Y+6
                 ;	posun -> R16,R17
                 ;	i -> R18,R19
                 ;	z -> R20,R21
                 ;    posun++;
                 ;//----------------------------------------
                 ;    for(i=0;i < size;i++){
                 ;//pocet znakov v nasledujucom data------------------
                 ;        data_vystup[posun] = strlen(data_vstup[i])&0xFF;
                 ;        posun++;
                 ;//vkladanie data do znakov--------------------------
                 ;        for(z=0;z< strlen(data_vstup[i]);z++){
                 ;            data_vystup[posun] = data_vstup[i][z];    //vlozi hodnotu znaku
                 ;            posun++;
                 ;        }
                 ;//--------------------------------------------------
                 ;    }
                 ;}
                 ;//data_vystup je multiarray = vystupne rozkodovane data
                 ;//data_vstup je char = zakodovane data v klastrovom protokole
                 ;int dekoduj(char data_vystup[][char_for_array],char data_vstup[]){
                 _dekoduj:
                 ;    int posun=0;
                 ;    int size=0;
                 ;    int poc_znakov=0;
                 ;    int i=0;
                 ;    int z=0;
                 ;//nacita pocet dat--------------------
                 ;    size=data_vstup[posun];
000205 9724      	SBIW R28,4
000206 e0e0      	LDI  R30,LOW(0)
000207 83e8      	ST   Y,R30
000208 83e9      	STD  Y+1,R30
000209 83ea      	STD  Y+2,R30
00020a 83eb      	STD  Y+3,R30
00020b 940e 0bb6 	CALL __SAVELOCR6
                 ;	data_vystup -> Y+12
                 ;	data_vstup -> Y+10
                 ;	posun -> R16,R17
                 ;	size -> R18,R19
                 ;	poc_znakov -> R20,R21
                 ;	i -> Y+8
                 ;	z -> Y+6
                +
00020d e000     +LDI R16 , LOW ( 0 )
00020e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00020f e020     +LDI R18 , LOW ( 0 )
000210 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000211 e040     +LDI R20 , LOW ( 0 )
000212 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000213 940e 0941 	CALL SUBOPT_0xF
000215 912c      	LD   R18,X
000216 2733      	CLR  R19
                 ;    posun++;
                +
000217 5f0f     +SUBI R16 , LOW ( - 1 )
000218 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;//------------------------------------
                 ;    for(i=0;i < size;i++){
000219 e0e0      	LDI  R30,0
00021a 87e8      	STD  Y+8,R30
00021b 87e9      	STD  Y+8+1,R30
                 _0x63:
00021c 85a8      	LDD  R26,Y+8
00021d 85b9      	LDD  R27,Y+8+1
00021e 17a2      	CP   R26,R18
00021f 07b3      	CPC  R27,R19
000220 f584      	BRGE _0x64
                 ;//------------------------------------
                 ;        poc_znakov=data_vstup[posun];
000221 940e 0941 	CALL SUBOPT_0xF
000223 914c      	LD   R20,X
000224 2755      	CLR  R21
                 ;        posun++;
                +
000225 5f0f     +SUBI R16 , LOW ( - 1 )
000226 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;//prijma znaky----------------------
                 ;        for(z=0;z< poc_znakov;z++){
000227 e0e0      	LDI  R30,0
000228 83ee      	STD  Y+6,R30
000229 83ef      	STD  Y+6+1,R30
                 _0x66:
00022a 81ae      	LDD  R26,Y+6
00022b 81bf      	LDD  R27,Y+6+1
00022c 17a4      	CP   R26,R20
00022d 07b5      	CPC  R27,R21
00022e f4e4      	BRGE _0x67
                 ;            data_vystup[i][z] = data_vstup[posun];
00022f 85e8      	LDD  R30,Y+8
000230 85f9      	LDD  R31,Y+8+1
                +
000231 856c     +LDD R22 , Y + 12
000232 857d     +LDD R23 , Y + 12 + 1
                 	__GETWRS 22,23,12
000233 e0aa      	LDI  R26,LOW(10)
000234 e0b0      	LDI  R27,HIGH(10)
000235 940e 0a64 	CALL __MULW12U
000237 0fe6      	ADD  R30,R22
000238 1ff7      	ADC  R31,R23
000239 81ae      	LDD  R26,Y+6
00023a 81bf      	LDD  R27,Y+6+1
00023b 0fea      	ADD  R30,R26
00023c 1ffb      	ADC  R31,R27
00023d 010f      	MOVW R0,R30
00023e 940e 0941 	CALL SUBOPT_0xF
000240 91ec      	LD   R30,X
000241 01d0      	MOVW R26,R0
000242 93ec      	ST   X,R30
                 ;            posun++;
                +
000243 5f0f     +SUBI R16 , LOW ( - 1 )
000244 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;        }
000245 81ee      	LDD  R30,Y+6
000246 81ff      	LDD  R31,Y+6+1
000247 9631      	ADIW R30,1
000248 83ee      	STD  Y+6,R30
000249 83ff      	STD  Y+6+1,R31
00024a cfdf      	RJMP _0x66
                 _0x67:
                 ;//------------------------------------------
                 ;    }
00024b 85e8      	LDD  R30,Y+8
00024c 85f9      	LDD  R31,Y+8+1
00024d 9631      	ADIW R30,1
00024e 87e8      	STD  Y+8,R30
00024f 87f9      	STD  Y+8+1,R31
000250 cfcb      	RJMP _0x63
                 _0x64:
                 ;}
000251 940e 0bbd 	CALL __LOADLOCR6
000253 c3fa      	RJMP _0x20A0006
                 ;void odosli_data_beagle(char data[][char_for_array],int pocet_dat){
                 ;    char buffer[128];
                 ;    zakoduj(buffer,data,pocet_dat);
                 ;	data -> Y+130
                 ;	pocet_dat -> Y+128
                 ;	buffer -> Y+0
                 ;    puts(buffer);
                 ;}
                 ;char datax[5][char_for_array];
                 ;void prijem_dat(){
                 _prijem_dat:
                 ;//---------------------------
                 ;    char str[128];
                 ;    scanf ("%s",str);
000254 97ef      	SBIW R28,63
000255 97ef      	SBIW R28,63
000256 9722      	SBIW R28,2
                 ;	str -> Y+0
                +
000257 e7e0     +LDI R30 , LOW ( 2 * _0x0 + 0 )
000258 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 0 )
                 	__POINTW1FN _0x0,0
000259 93fa      	ST   -Y,R31
00025a 93ea      	ST   -Y,R30
00025b 01fe      	MOVW R30,R28
00025c 9632      	ADIW R30,2
00025d 2766      	CLR  R22
00025e 2777      	CLR  R23
00025f 940e 0a9b 	CALL __PUTPARD1
000261 e084      	LDI  R24,4
000262 940e 083c 	CALL _scanf
000264 9626      	ADIW R28,6
                 ;    dekoduj(datax,str);
000265 940e 0947 	CALL SUBOPT_0x10
000267 940e 094c 	CALL SUBOPT_0x11
000269 df9b      	RCALL _dekoduj
                 ;}
00026a 96ef      	ADIW R28,63
00026b 96ef      	ADIW R28,63
00026c 9622      	ADIW R28,2
00026d 9508      	RET
                 ;//------------------------------
                 ;//------------------------------
                 ;#include "library_motor.c"
                 ;//kniznice pre riadeie motorov
                 ;//---------------------------------
                 ;void motor1(int rychlost ){
                 ; 0000 0035 void motor1(int rychlost ){
                 _motor1:
                 ;    if (rychlost > 0){
                 ;	rychlost -> Y+0
00026e 940e 0951 	CALL SUBOPT_0x12
000270 f41c      	BRGE _0x68
                 ;        PORTC.3 = 1;
000271 9aab      	SBI  0x15,3
                 ;        PORTC.4 = 0;
000272 98ac      	CBI  0x15,4
                 ;    }
                 ;    else if(rychlost == 0){
000273 c00b      	RJMP _0x6D
                 _0x68:
000274 81e8      	LD   R30,Y
000275 81f9      	LDD  R31,Y+1
000276 9730      	SBIW R30,0
000277 f419      	BRNE _0x6E
                 ;        PORTC.3 = 0;
000278 98ab      	CBI  0x15,3
                 ;        PORTC.4 = 0;
000279 98ac      	CBI  0x15,4
                 ;    }
                 ;    else{
00027a c004      	RJMP _0x73
                 _0x6E:
                 ;        PORTC.3 = 0;
00027b 98ab      	CBI  0x15,3
                 ;        PORTC.4 = 1;
00027c 9aac      	SBI  0x15,4
                 ;        rychlost = rychlost*(-1);
00027d 940e 0956 	CALL SUBOPT_0x13
                 ;    }
                 _0x73:
                 _0x6D:
                 ;    OCR1B = rychlost;
00027f 81e8      	LD   R30,Y
000280 81f9      	LDD  R31,Y+1
000281 bdf9      	OUT  0x28+1,R31
000282 bde8      	OUT  0x28,R30
                 ;}
000283 c262      	RJMP _0x20A0007
                 ;void motor3(int rychlost){
                 _motor3:
                 ;    if (rychlost > 0){
                 ;	rychlost -> Y+0
000284 940e 0951 	CALL SUBOPT_0x12
000286 f41c      	BRGE _0x78
                 ;        PORTC.2 = 0;
000287 98aa      	CBI  0x15,2
                 ;        PORTD.6 = 1;
000288 9a96      	SBI  0x12,6
                 ;    }
                 ;    else if(rychlost == 0){
000289 c00b      	RJMP _0x7D
                 _0x78:
00028a 81e8      	LD   R30,Y
00028b 81f9      	LDD  R31,Y+1
00028c 9730      	SBIW R30,0
00028d f419      	BRNE _0x7E
                 ;        PORTC.2 = 0;
00028e 98aa      	CBI  0x15,2
                 ;        PORTD.6 = 0;
00028f 9896      	CBI  0x12,6
                 ;    }
                 ;    else{
000290 c004      	RJMP _0x83
                 _0x7E:
                 ;        PORTC.2 = 1;
000291 9aaa      	SBI  0x15,2
                 ;        PORTD.6 = 0;
000292 9896      	CBI  0x12,6
                 ;        rychlost = rychlost*(-1);
000293 940e 0956 	CALL SUBOPT_0x13
                 ;    }
                 _0x83:
                 _0x7D:
                 ;    OCR1A = rychlost;
000295 81e8      	LD   R30,Y
000296 81f9      	LDD  R31,Y+1
000297 bdfb      	OUT  0x2A+1,R31
000298 bdea      	OUT  0x2A,R30
                 ;}
000299 c24c      	RJMP _0x20A0007
                 ;void motor2(int rychlost){
                 _motor2:
                 ;    if (rychlost > 0){
                 ;	rychlost -> Y+0
00029a 940e 0951 	CALL SUBOPT_0x12
00029c f41c      	BRGE _0x88
                 ;        PORTC.1 = 1;
00029d 9aa9      	SBI  0x15,1
                 ;        PORTC.0 = 0;
00029e 98a8      	CBI  0x15,0
                 ;    }
                 ;    else if(rychlost == 0){
00029f c00b      	RJMP _0x8D
                 _0x88:
0002a0 81e8      	LD   R30,Y
0002a1 81f9      	LDD  R31,Y+1
0002a2 9730      	SBIW R30,0
0002a3 f419      	BRNE _0x8E
                 ;        PORTC.1 = 0;
0002a4 98a9      	CBI  0x15,1
                 ;        PORTC.0 = 0;
0002a5 98a8      	CBI  0x15,0
                 ;    }
                 ;    else{
0002a6 c004      	RJMP _0x93
                 _0x8E:
                 ;        PORTC.1 = 0;
0002a7 98a9      	CBI  0x15,1
                 ;        PORTC.0 = 1;
0002a8 9aa8      	SBI  0x15,0
                 ;        rychlost = rychlost*(-1);
0002a9 940e 0956 	CALL SUBOPT_0x13
                 ;    }
                 _0x93:
                 _0x8D:
                 ;    OCR2 = rychlost;
0002ab 81e8      	LD   R30,Y
0002ac 81f9      	LDD  R31,Y+1
0002ad bde3      	OUT  0x23,R30
                 ;}
0002ae c237      	RJMP _0x20A0007
                 ;void motor4(int rychlost){
                 _motor4:
                 ;    if (rychlost > 0){
                 ;	rychlost -> Y+0
0002af 940e 0951 	CALL SUBOPT_0x12
0002b1 f41c      	BRGE _0x98
                 ;        PORTB.1 = 0;
0002b2 98c1      	CBI  0x18,1
                 ;        PORTB.2 = 1;
0002b3 9ac2      	SBI  0x18,2
                 ;    }
                 ;    else if(rychlost == 0){
0002b4 c00b      	RJMP _0x9D
                 _0x98:
0002b5 81e8      	LD   R30,Y
0002b6 81f9      	LDD  R31,Y+1
0002b7 9730      	SBIW R30,0
0002b8 f419      	BRNE _0x9E
                 ;        PORTB.1 = 0;
0002b9 98c1      	CBI  0x18,1
                 ;        PORTB.2 = 0;
0002ba 98c2      	CBI  0x18,2
                 ;    }
                 ;    else{
0002bb c004      	RJMP _0xA3
                 _0x9E:
                 ;        PORTB.1 = 1;
0002bc 9ac1      	SBI  0x18,1
                 ;        PORTB.2 = 0;
0002bd 98c2      	CBI  0x18,2
                 ;        rychlost = rychlost*(-1);
0002be 940e 0956 	CALL SUBOPT_0x13
                 ;    }
                 _0xA3:
                 _0x9D:
                 ;    OCR0 = rychlost;
0002c0 81e8      	LD   R30,Y
0002c1 81f9      	LDD  R31,Y+1
0002c2 bfec      	OUT  0x3C,R30
                 ;}
0002c3 c222      	RJMP _0x20A0007
                 ;void m_0(unsigned char rychlost){
                 _m_0:
                 ;motor1(-rychlost);
                 ;	rychlost -> Y+0
0002c4 940e 08bf 	CALL SUBOPT_0x0
0002c6 940e 095f 	CALL SUBOPT_0x14
0002c8 940e 0964 	CALL SUBOPT_0x15
                 ;motor2(-rychlost);
0002ca 940e 095f 	CALL SUBOPT_0x14
0002cc 940e 0967 	CALL SUBOPT_0x16
                 ;motor3(rychlost);
0002ce 940e 096a 	CALL SUBOPT_0x17
                 ;motor4(rychlost);
0002d0 940e 096f 	CALL SUBOPT_0x18
                 ;}
0002d2 940c 06d1 	JMP  _0x20A0005
                 ;void m_45(unsigned char rychlost){
                 _m_45:
                 ;motor1(0);
                 ;	rychlost -> Y+0
0002d4 940e 0973 	CALL SUBOPT_0x19
0002d6 940e 0964 	CALL SUBOPT_0x15
                 ;motor2(-rychlost);
0002d8 940e 095f 	CALL SUBOPT_0x14
0002da 940e 0978 	CALL SUBOPT_0x1A
                 ;motor3(0);
                 ;motor4(rychlost);
0002dc 940e 096f 	CALL SUBOPT_0x18
                 ;}
0002de 940c 06d1 	JMP  _0x20A0005
                 ;void m_90(unsigned char rychlost){
                 _m_90:
                 ;motor1(rychlost);
                 ;	rychlost -> Y+0
0002e0 940e 08bf 	CALL SUBOPT_0x0
0002e2 93fa      	ST   -Y,R31
0002e3 93ea      	ST   -Y,R30
0002e4 940e 0964 	CALL SUBOPT_0x15
                 ;motor2(-rychlost);
0002e6 940e 095f 	CALL SUBOPT_0x14
0002e8 940e 0967 	CALL SUBOPT_0x16
                 ;motor3(-rychlost);
0002ea 940e 095f 	CALL SUBOPT_0x14
0002ec df97      	RCALL _motor3
                 ;motor4(rychlost);
0002ed 940e 08bf 	CALL SUBOPT_0x0
0002ef 940e 096f 	CALL SUBOPT_0x18
                 ;}
0002f1 940c 06d1 	JMP  _0x20A0005
                 ;void m_135(unsigned char rychlost){
                 _m_135:
                 ;motor1(rychlost);
                 ;	rychlost -> Y+0
0002f3 940e 08bf 	CALL SUBOPT_0x0
0002f5 93fa      	ST   -Y,R31
0002f6 93ea      	ST   -Y,R30
0002f7 940e 097d 	CALL SUBOPT_0x1B
                 ;motor2(0);
0002f9 940e 0967 	CALL SUBOPT_0x16
                 ;motor3(-rychlost);
0002fb 940e 095f 	CALL SUBOPT_0x14
0002fd 940e 0980 	CALL SUBOPT_0x1C
                 ;motor4(0);
                 ;}
0002ff 940c 06d1 	JMP  _0x20A0005
                 ;void m_180(unsigned char rychlost){
                 _m_180:
                 ;motor1(rychlost);
                 ;	rychlost -> Y+0
000301 940e 08bf 	CALL SUBOPT_0x0
000303 93fa      	ST   -Y,R31
000304 93ea      	ST   -Y,R30
000305 940e 0964 	CALL SUBOPT_0x15
                 ;motor2(rychlost);
000307 93fa      	ST   -Y,R31
000308 93ea      	ST   -Y,R30
000309 940e 0967 	CALL SUBOPT_0x16
                 ;motor3(-rychlost);
00030b 940e 095f 	CALL SUBOPT_0x14
00030d df76      	RCALL _motor3
                 ;motor4(-rychlost);
00030e 940e 08bf 	CALL SUBOPT_0x0
000310 940e 095f 	CALL SUBOPT_0x14
000312 df9c      	RCALL _motor4
                 ;}
000313 940c 06d1 	JMP  _0x20A0005
                 ;void m_225(unsigned char rychlost){
                 _m_225:
                 ;motor1(0);
                 ;	rychlost -> Y+0
000315 940e 0973 	CALL SUBOPT_0x19
000317 940e 0964 	CALL SUBOPT_0x15
                 ;motor2(rychlost);
000319 93fa      	ST   -Y,R31
00031a 93ea      	ST   -Y,R30
00031b 940e 0978 	CALL SUBOPT_0x1A
                 ;motor3(0);
                 ;motor4(-rychlost);
00031d 940e 095f 	CALL SUBOPT_0x14
00031f df8f      	RCALL _motor4
                 ;}
000320 940c 06d1 	JMP  _0x20A0005
                 ;void m_270(unsigned char rychlost){
                 _m_270:
                 ;motor1(-rychlost);
                 ;	rychlost -> Y+0
000322 940e 08bf 	CALL SUBOPT_0x0
000324 940e 095f 	CALL SUBOPT_0x14
000326 940e 0964 	CALL SUBOPT_0x15
                 ;motor2(rychlost);
000328 93fa      	ST   -Y,R31
000329 93ea      	ST   -Y,R30
00032a 940e 0967 	CALL SUBOPT_0x16
                 ;motor3(rychlost);
00032c 940e 096a 	CALL SUBOPT_0x17
                 ;motor4(-rychlost);
00032e 940e 095f 	CALL SUBOPT_0x14
000330 df7e      	RCALL _motor4
                 ;}
000331 940c 06d1 	JMP  _0x20A0005
                 ;void m_315(unsigned char rychlost){
                 _m_315:
                 ;motor1(-rychlost);
                 ;	rychlost -> Y+0
000333 940e 08bf 	CALL SUBOPT_0x0
000335 940e 095f 	CALL SUBOPT_0x14
000337 940e 097d 	CALL SUBOPT_0x1B
                 ;motor2(0);
000339 940e 0967 	CALL SUBOPT_0x16
                 ;motor3(rychlost);
00033b 93fa      	ST   -Y,R31
00033c 93ea      	ST   -Y,R30
00033d 940e 0980 	CALL SUBOPT_0x1C
                 ;motor4(0);
                 ;}
00033f 940c 06d1 	JMP  _0x20A0005
                 ;void m_ot(int rychlost){
                 _m_ot:
                 ;motor1(rychlost);
                 ;	rychlost -> Y+0
000341 81e8      	LD   R30,Y
000342 81f9      	LDD  R31,Y+1
000343 93fa      	ST   -Y,R31
000344 93ea      	ST   -Y,R30
000345 df28      	RCALL _motor1
                 ;motor2(rychlost/3);
000346 940e 0985 	CALL SUBOPT_0x1D
000348 df51      	RCALL _motor2
                 ;motor3(rychlost/3);
000349 940e 0985 	CALL SUBOPT_0x1D
00034b df38      	RCALL _motor3
                 ;motor4(rychlost);
00034c 81e8      	LD   R30,Y
00034d 81f9      	LDD  R31,Y+1
00034e 940e 096f 	CALL SUBOPT_0x18
                 ;}
000350 c195      	RJMP _0x20A0007
                 ;void m_vyp(){
                 _m_vyp:
                 ;motor1(0);
000351 940e 0973 	CALL SUBOPT_0x19
000353 940e 097d 	CALL SUBOPT_0x1B
                 ;motor2(0);
000355 df44      	RCALL _motor2
                 ;motor3(0);
000356 940e 0973 	CALL SUBOPT_0x19
000358 940e 0980 	CALL SUBOPT_0x1C
                 ;motor4(0);
                 ;}
00035a 9508      	RET
                 ;//------------------------------
                 ;//--------------------------------
                 ;//Definovanie
                 ;//--------------------------------
                 ;#define LED         PORTB.4
                 ;#define Kick        PORTB.0                    //kicker riadeni
                 ;//---------------------------------
                 ;// Premenne
                 ;//---------------------------------
                 ;eeprom int branka=0;
                 ;unsigned char rychlost_presunu = 210;
                 ;unsigned char rychlost_presunu_zrychlene = 210;
                 ;unsigned char rychlost_presunu_vzad = 200;
                 ;unsigned char prog=0;
                 ;unsigned char smer=0;
                 ;unsigned int x1;
                 ;unsigned char rychlost=200;
                 ;unsigned char rychl;
                 ;eeprom char on = 0;
                 ;//---------------------------------
                 ;//inicializacia procesoru
                 ;//---------------------------------
                 ;void init_8535(){
                 ; 0000 004B void init_8535(){
                 _init_8535:
                 ; 0000 004C // Input/Output Ports initialization
                 ; 0000 004D // Port A initialization
                 ; 0000 004E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 004F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0050 PORTA=0x00;
00035b e0e0      	LDI  R30,LOW(0)
00035c bbeb      	OUT  0x1B,R30
                 ; 0000 0051 DDRA=0x00;
00035d bbea      	OUT  0x1A,R30
                 ; 0000 0052 
                 ; 0000 0053 // Port B initialization
                 ; 0000 0054 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0055 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 0056 PORTB=0x20;
00035e e2e0      	LDI  R30,LOW(32)
00035f bbe8      	OUT  0x18,R30
                 ; 0000 0057 DDRB=0x1F;
000360 e1ef      	LDI  R30,LOW(31)
000361 bbe7      	OUT  0x17,R30
                 ; 0000 0058 
                 ; 0000 0059 // Port C initialization
                 ; 0000 005A // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 005B // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 005C PORTC=0x00;
000362 e0e0      	LDI  R30,LOW(0)
000363 bbe5      	OUT  0x15,R30
                 ; 0000 005D DDRC=0xFF;
000364 efef      	LDI  R30,LOW(255)
000365 bbe4      	OUT  0x14,R30
                 ; 0000 005E 
                 ; 0000 005F // Port D initialization
                 ; 0000 0060 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0061 // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 0062 PORTD=0x00;
000366 e0e0      	LDI  R30,LOW(0)
000367 bbe2      	OUT  0x12,R30
                 ; 0000 0063 DDRD=0xF0;
000368 efe0      	LDI  R30,LOW(240)
000369 bbe1      	OUT  0x11,R30
                 ; 0000 0064 
                 ; 0000 0065 // Timer/Counter 0 initialization
                 ; 0000 0066 // Clock source: System Clock
                 ; 0000 0067 // Clock value: 1382,400 kHz
                 ; 0000 0068 // Mode: Fast PWM top=FFh
                 ; 0000 0069 // OC0 output: Non-Inverted PWM
                 ; 0000 006A TCCR0=0x6A;
00036a e6ea      	LDI  R30,LOW(106)
00036b bfe3      	OUT  0x33,R30
                 ; 0000 006B TCNT0=0x00;
00036c e0e0      	LDI  R30,LOW(0)
00036d bfe2      	OUT  0x32,R30
                 ; 0000 006C OCR0=0x00;
00036e bfec      	OUT  0x3C,R30
                 ; 0000 006D 
                 ; 0000 006E // Timer/Counter 1 initialization
                 ; 0000 006F // Clock source: System Clock
                 ; 0000 0070 // Clock value: 1382,400 kHz
                 ; 0000 0071 // Mode: Fast PWM top=00FFh
                 ; 0000 0072 // OC1A output: Non-Inv.
                 ; 0000 0073 // OC1B output: Non-Inv.
                 ; 0000 0074 // Noise Canceler: Off
                 ; 0000 0075 // Input Capture on Falling Edge
                 ; 0000 0076 // Timer 1 Overflow Interrupt: Off
                 ; 0000 0077 // Input Capture Interrupt: Off
                 ; 0000 0078 // Compare A Match Interrupt: Off
                 ; 0000 0079 // Compare B Match Interrupt: Off
                 ; 0000 007A TCCR1A=0xA1;
00036f eae1      	LDI  R30,LOW(161)
000370 bdef      	OUT  0x2F,R30
                 ; 0000 007B TCCR1B=0x0A;
000371 e0ea      	LDI  R30,LOW(10)
000372 bdee      	OUT  0x2E,R30
                 ; 0000 007C TCNT1H=0x00;
000373 e0e0      	LDI  R30,LOW(0)
000374 bded      	OUT  0x2D,R30
                 ; 0000 007D TCNT1L=0x00;
000375 bdec      	OUT  0x2C,R30
                 ; 0000 007E ICR1H=0x00;
000376 bde7      	OUT  0x27,R30
                 ; 0000 007F ICR1L=0x00;
000377 bde6      	OUT  0x26,R30
                 ; 0000 0080 OCR1AH=0x00;
000378 bdeb      	OUT  0x2B,R30
                 ; 0000 0081 OCR1AL=0x00;
000379 bdea      	OUT  0x2A,R30
                 ; 0000 0082 OCR1BH=0x00;
00037a bde9      	OUT  0x29,R30
                 ; 0000 0083 OCR1BL=0x00;
00037b bde8      	OUT  0x28,R30
                 ; 0000 0084 
                 ; 0000 0085 // Timer/Counter 2 initialization
                 ; 0000 0086 // Clock source: System Clock
                 ; 0000 0087 // Clock value: 1382,400 kHz
                 ; 0000 0088 // Mode: Fast PWM top=FFh
                 ; 0000 0089 // OC2 output: Non-Inverted PWM
                 ; 0000 008A ASSR=0x00;
00037c bde2      	OUT  0x22,R30
                 ; 0000 008B TCCR2=0x6A;
00037d e6ea      	LDI  R30,LOW(106)
00037e bde5      	OUT  0x25,R30
                 ; 0000 008C TCNT2=0x00;
00037f e0e0      	LDI  R30,LOW(0)
000380 bde4      	OUT  0x24,R30
                 ; 0000 008D OCR2=0x00;
000381 bde3      	OUT  0x23,R30
                 ; 0000 008E 
                 ; 0000 008F // External Interrupt(s) initialization
                 ; 0000 0090 // INT0: Off
                 ; 0000 0091 // INT1: Off
                 ; 0000 0092 // INT2: Off
                 ; 0000 0093 MCUCR=0x00;
000382 bfe5      	OUT  0x35,R30
                 ; 0000 0094 MCUCSR=0x00;
000383 bfe4      	OUT  0x34,R30
                 ; 0000 0095 
                 ; 0000 0096 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0097 TIMSK=0x00;
000384 bfe9      	OUT  0x39,R30
                 ; 0000 0098 
                 ; 0000 0099 // USART initialization
                 ; 0000 009A // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 009B // USART Receiver: On
                 ; 0000 009C // USART Transmitter: On
                 ; 0000 009D // USART Mode: Asynchronous
                 ; 0000 009E // USART Baud Rate: 115200
                 ; 0000 009F UCSRA=0x00;
000385 b9eb      	OUT  0xB,R30
                 ; 0000 00A0 UCSRB=0x18;
000386 e1e8      	LDI  R30,LOW(24)
000387 b9ea      	OUT  0xA,R30
                 ; 0000 00A1 UCSRC=0x86;
000388 e8e6      	LDI  R30,LOW(134)
000389 bde0      	OUT  0x20,R30
                 ; 0000 00A2 UBRRH=0x00;
00038a e0e0      	LDI  R30,LOW(0)
00038b bde0      	OUT  0x20,R30
                 ; 0000 00A3 UBRRL=0x05;
00038c e0e5      	LDI  R30,LOW(5)
00038d b9e9      	OUT  0x9,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // Analog Comparator initialization
                 ; 0000 00A6 // Analog Comparator: Off
                 ; 0000 00A7 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00A8 ACSR=0x80;
00038e e8e0      	LDI  R30,LOW(128)
00038f b9e8      	OUT  0x8,R30
                 ; 0000 00A9 SFIOR=0x00;
000390 e0e0      	LDI  R30,LOW(0)
000391 bfe0      	OUT  0x30,R30
                 ; 0000 00AA 
                 ; 0000 00AB // ADC initialization
                 ; 0000 00AC // ADC Clock frequency: 691,200 kHz
                 ; 0000 00AD // ADC Voltage Reference: AVCC pin
                 ; 0000 00AE // ADC High Speed Mode: On
                 ; 0000 00AF // ADC Auto Trigger Source: None
                 ; 0000 00B0 // Only the 8 most significant bits of
                 ; 0000 00B1 // the AD conversion result are used
                 ; 0000 00B2 ADMUX=ADC_VREF_TYPE & 0xff;
000392 e6e0      	LDI  R30,LOW(96)
000393 b9e7      	OUT  0x7,R30
                 ; 0000 00B3 ADCSRA=0x84;
000394 e8e4      	LDI  R30,LOW(132)
000395 b9e6      	OUT  0x6,R30
                 ; 0000 00B4 SFIOR&=0xEF;
000396 b7e0      	IN   R30,0x30
000397 e0f0      	LDI  R31,0
000398 7eef      	ANDI R30,LOW(0xEF)
000399 70f0      	ANDI R31,HIGH(0xEF)
00039a bfe0      	OUT  0x30,R30
                 ; 0000 00B5 SFIOR|=0x10;
00039b b7e0      	IN   R30,0x30
00039c e0f0      	LDI  R31,0
00039d 61e0      	ORI  R30,0x10
00039e bfe0      	OUT  0x30,R30
                 ; 0000 00B6 
                 ; 0000 00B7 // I2C Bus initialization
                 ; 0000 00B8 i2c_init();
00039f 940e 09f1 	CALL _i2c_init
                 ; 0000 00B9 }
0003a1 9508      	RET
                 ;//---------------------------------
                 ;//------------------------------
                 ;//kicker
                 ;//------------------------------
                 ;void kick(){
                 ; 0000 00BE void kick(){
                 ; 0000 00BF int senzory;
                 ; 0000 00C0 if (Kick_sens == 0){
                 ;	senzory -> R16,R17
                 ; 0000 00C1     m_vyp();
                 ; 0000 00C2     Kick = 1;
                 ; 0000 00C3     LED = 0;
                 ; 0000 00C4     delay_ms(200);
                 ; 0000 00C5     while (Kick_sens == 0);
                 ; 0000 00C6     Kick = 0;
                 ; 0000 00C7     LED = 1;
                 ; 0000 00C8     x1 = 400;
                 ; 0000 00C9     while(x1 != 0 ){
                 ; 0000 00CA         senzory = maxx(200);
                 ; 0000 00CB         if (maxh < 75){
                 ; 0000 00CC         switch (senzory){
                 ; 0000 00CD             case 1: m_0(rychlost_presunu);          break;
                 ; 0000 00CE     //---------------------------------------------------------------------
                 ; 0000 00CF             case 2: m_90(rychlost_presunu);              break;
                 ; 0000 00D0             case 3: m_135(rychlost_presunu);                 break;
                 ; 0000 00D1             case 4: m_135(rychlost_presunu);                 break;
                 ; 0000 00D2             case 5: m_180(rychlost_presunu);                 break;  //stvrtina z kruhu
                 ; 0000 00D3     //---------------------------------------------------------------------
                 ; 0000 00D4             case 6: m_225(rychlost_presunu);                 break;
                 ; 0000 00D5             case 7: m_225(rychlost_presunu);                break;
                 ; 0000 00D6             case 8: m_270(rychlost_presunu);                 break;
                 ; 0000 00D7             case 9: m_270(rychlost_presunu);                 break;  //polovica kruhu
                 ; 0000 00D8     //----------------------------------------------------------------------
                 ; 0000 00D9             case 10: m_90(rychlost_presunu);               break;
                 ; 0000 00DA             case 11: m_135(rychlost_presunu);                break;
                 ; 0000 00DB             case 12: m_135(rychlost_presunu);                break;
                 ; 0000 00DC             case 13: m_180(rychlost_presunu);                 break;  //tretina kruhu
                 ; 0000 00DD     //----------------------------------------------------------------------
                 ; 0000 00DE             case 14: m_225(rychlost_presunu);                break;
                 ; 0000 00DF             case 15: m_225(rychlost_presunu);                break;
                 ; 0000 00E0             case 16: m_270(rychlost_presunu);             break;  //cely kruh
                 ; 0000 00E1     //----------------------------------------------------------------------
                 ; 0000 00E2             case 17: m_vyp();                                break;
                 ; 0000 00E3         }
                 ; 0000 00E4     }
                 ; 0000 00E5         else{
                 ; 0000 00E6        switch (senzory){
                 ; 0000 00E7             case 1: m_0(rychlost_presunu);        break;
                 ; 0000 00E8     //---------------------------------------------------------------------
                 ; 0000 00E9             case 2: m_90(rychlost_presunu);              break;
                 ; 0000 00EA             case 3: m_90(rychlost_presunu);                 break;
                 ; 0000 00EB             case 4: m_90(rychlost_presunu);                 break;
                 ; 0000 00EC             case 5: m_90(rychlost_presunu);                 break;  //stvrtina z kruhu
                 ; 0000 00ED     //---------------------------------------------------------------------
                 ; 0000 00EE             case 6: m_135(rychlost_presunu);                 break;
                 ; 0000 00EF             case 7: m_135(rychlost_presunu);                break;
                 ; 0000 00F0             case 8: m_135(rychlost_presunu);                 break;
                 ; 0000 00F1             case 9: m_180(rychlost_presunu);                 break;  //polovica kruhu
                 ; 0000 00F2     //----------------------------------------------------------------------
                 ; 0000 00F3             case 10: m_225(rychlost_presunu);               break;
                 ; 0000 00F4             case 11: m_225(rychlost_presunu);                break;
                 ; 0000 00F5             case 12: m_225(rychlost_presunu);                break;
                 ; 0000 00F6             case 13: m_270(rychlost_presunu);                 break;  //tretina kruhu
                 ; 0000 00F7     //----------------------------------------------------------------------
                 ; 0000 00F8             case 14: m_315(rychlost_presunu);                break;
                 ; 0000 00F9             case 15: m_315(rychlost_presunu);                break;
                 ; 0000 00FA             case 16: m_315(rychlost_presunu);             break;  //cely kruh
                 ; 0000 00FB     //----------------------------------------------------------------------
                 ; 0000 00FC             case 17: m_vyp();                                break;
                 ; 0000 00FD         }
                 ; 0000 00FE     }
                 ; 0000 00FF         x1=x1-1;
                 ; 0000 0100         delay_ms(2);
                 ; 0000 0101         }
                 ; 0000 0102     }
                 ; 0000 0103 else{
                 ; 0000 0104     Kick = 0;
                 ; 0000 0105 }
                 ; 0000 0106 }
                 ;void kick_no(){
                 ; 0000 0107 void kick_no(){
                 _kick_no:
                 ; 0000 0108     Kick = 1;
0003a2 9ac0      	SBI  0x18,0
                 ; 0000 0109     LED = 0;
0003a3 98c4      	CBI  0x18,4
                 ; 0000 010A     delay_ms(200);
0003a4 940e 098e 	CALL SUBOPT_0x1E
                 ; 0000 010B     while (Kick_sens == 0);
                 _0xE8:
0003a6 9bb5      	SBIS 0x16,5
0003a7 cffe      	RJMP _0xE8
                 ; 0000 010C     Kick = 0;
0003a8 98c0      	CBI  0x18,0
                 ; 0000 010D     LED = 1;
0003a9 9ac4      	SBI  0x18,4
                 ; 0000 010E }
0003aa 9508      	RET
                 ;//------------------------------
                 ;//------------------------------
                 ;int nastav_podla_kompasu(int kompas){             //prepocetcompasu(branka,1)*0.71
                 ; 0000 0111 int nastav_podla_kompasu(int kompas){
                 _nastav_podla_kompasu:
                 ; 0000 0112     int komp_ret = 0;
                 ; 0000 0113     if (kompas > 180)
0003ab 931a      	ST   -Y,R17
0003ac 930a      	ST   -Y,R16
                 ;	kompas -> Y+2
                 ;	komp_ret -> R16,R17
                +
0003ad e000     +LDI R16 , LOW ( 0 )
0003ae e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0003af 81aa      	LDD  R26,Y+2
0003b0 81bb      	LDD  R27,Y+2+1
0003b1 3ba5      	CPI  R26,LOW(0xB5)
0003b2 e0e0      	LDI  R30,HIGH(0xB5)
0003b3 07be      	CPC  R27,R30
0003b4 f024      	BRLT _0xEF
                 ; 0000 0114         kompas = 180;
0003b5 ebe4      	LDI  R30,LOW(180)
0003b6 e0f0      	LDI  R31,HIGH(180)
0003b7 83ea      	STD  Y+2,R30
0003b8 83fb      	STD  Y+2+1,R31
                 ; 0000 0115     //prepocet rychlost kolies pre kompas------------------
                 ; 0000 0116     if (kompas < 90){
                 _0xEF:
0003b9 81aa      	LDD  R26,Y+2
0003ba 81bb      	LDD  R27,Y+2+1
0003bb 35aa      	CPI  R26,LOW(0x5A)
0003bc e0e0      	LDI  R30,HIGH(0x5A)
0003bd 07be      	CPC  R27,R30
0003be f41c      	BRGE _0xF0
                 ; 0000 0117         rychl = kompas + 100;
0003bf 81ea      	LDD  R30,Y+2
0003c0 81fb      	LDD  R31,Y+2+1
0003c1 c006      	RJMP _0x196
                 ; 0000 0118     }
                 ; 0000 0119     else{
                 _0xF0:
                 ; 0000 011A         rychl = (180 - kompas) + 100;
0003c2 81aa      	LDD  R26,Y+2
0003c3 81bb      	LDD  R27,Y+2+1
0003c4 ebe4      	LDI  R30,LOW(180)
0003c5 e0f0      	LDI  R31,HIGH(180)
0003c6 1bea      	SUB  R30,R26
0003c7 0bfb      	SBC  R31,R27
                 _0x196:
0003c8 59ec      	SUBI R30,LOW(-100)
0003c9 4fff      	SBCI R31,HIGH(-100)
0003ca 2ece      	MOV  R12,R30
                 ; 0000 011B     }
                 ; 0000 011C     //------------------------------------------------------
                 ; 0000 011D     if (kompas <= 10){
0003cb 81aa      	LDD  R26,Y+2
0003cc 81bb      	LDD  R27,Y+2+1
0003cd 971b      	SBIW R26,11
0003ce f0cc      	BRLT _0x197
                 ; 0000 011E         LED = 1;
                 ; 0000 011F         komp_ret = 1;
                 ; 0000 0120     }
                 ; 0000 0121     else{
                 ; 0000 0122         if( kompas <= 90){
0003cf 81aa      	LDD  R26,Y+2
0003d0 81bb      	LDD  R27,Y+2+1
0003d1 35ab      	CPI  R26,LOW(0x5B)
0003d2 e0e0      	LDI  R30,HIGH(0x5B)
0003d3 07be      	CPC  R27,R30
0003d4 f43c      	BRGE _0xF6
                 ; 0000 0123             LED = 0;
0003d5 98c4      	CBI  0x18,4
                 ; 0000 0124             m_ot(-rychl);
0003d6 2dec      	MOV  R30,R12
0003d7 e0f0      	LDI  R31,0
0003d8 940e 095f 	CALL SUBOPT_0x14
0003da df66      	RCALL _m_ot
                 ; 0000 0125         }
                 ; 0000 0126         else{
0003db c00f      	RJMP _0xF9
                 _0xF6:
                 ; 0000 0127             if (kompas <= 170){
0003dc 81aa      	LDD  R26,Y+2
0003dd 81bb      	LDD  R27,Y+2+1
0003de 3aab      	CPI  R26,LOW(0xAB)
0003df e0e0      	LDI  R30,HIGH(0xAB)
0003e0 07be      	CPC  R27,R30
0003e1 f434      	BRGE _0xFA
                 ; 0000 0128                 LED = 0;
0003e2 98c4      	CBI  0x18,4
                 ; 0000 0129                 m_ot(rychl);
0003e3 2dec      	MOV  R30,R12
0003e4 940e 0994 	CALL SUBOPT_0x1F
0003e6 df5a      	RCALL _m_ot
                 ; 0000 012A             }
                 ; 0000 012B             else {
0003e7 c003      	RJMP _0xFD
                 _0xFA:
                 ; 0000 012C                 LED = 1;
                 _0x197:
0003e8 9ac4      	SBI  0x18,4
                 ; 0000 012D                 komp_ret = 1;
                +
0003e9 e001     +LDI R16 , LOW ( 1 )
0003ea e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 012E             }
                 _0xFD:
                 ; 0000 012F         }
                 _0xF9:
                 ; 0000 0130     }
                 ; 0000 0131     return komp_ret;
0003eb 01f8      	MOVW R30,R16
0003ec 8119      	LDD  R17,Y+1
0003ed 8108      	LDD  R16,Y+0
0003ee 9624      	ADIW R28,4
0003ef 9508      	RET
                 ; 0000 0132 }
                 ;void obchadzanie(int senzory){
                 ; 0000 0133 void obchadzanie(int senzory){
                 _obchadzanie:
                 ; 0000 0134     if (maxh < 80){
                 ;	senzory -> Y+0
0003f0 e5e0      	LDI  R30,LOW(80)
0003f1 165e      	CP   R5,R30
0003f2 f010      	BRLO PC+3
0003f3 940c 046f 	JMP _0x100
                 ; 0000 0135             switch (senzory){
0003f5 81e8      	LD   R30,Y
0003f6 81f9      	LDD  R31,Y+1
                 ; 0000 0136                 case 1: m_0(rychlost_presunu);          break;
0003f7 30e1      	CPI  R30,LOW(0x1)
0003f8 e0a0      	LDI  R26,HIGH(0x1)
0003f9 07fa      	CPC  R31,R26
0003fa f419      	BRNE _0x104
0003fb 924a      	ST   -Y,R4
0003fc dec7      	RCALL _m_0
0003fd c070      	RJMP _0x103
                 ; 0000 0137         //---------------------------------------------------------------------
                 ; 0000 0138                 case 2: m_90(rychlost_presunu-10);              break;
                 _0x104:
0003fe 30e2      	CPI  R30,LOW(0x2)
0003ff e0a0      	LDI  R26,HIGH(0x2)
000400 07fa      	CPC  R31,R26
000401 f421      	BRNE _0x105
000402 940e 0998 	CALL SUBOPT_0x20
000404 dedb      	RCALL _m_90
000405 c068      	RJMP _0x103
                 ; 0000 0139                 case 3: m_135(rychlost_presunu);                break;
                 _0x105:
000406 30e3      	CPI  R30,LOW(0x3)
000407 e0a0      	LDI  R26,HIGH(0x3)
000408 07fa      	CPC  R31,R26
000409 f419      	BRNE _0x106
00040a 924a      	ST   -Y,R4
00040b dee7      	RCALL _m_135
00040c c061      	RJMP _0x103
                 ; 0000 013A                 case 4: m_135(rychlost_presunu);                break;
                 _0x106:
00040d 30e4      	CPI  R30,LOW(0x4)
00040e e0a0      	LDI  R26,HIGH(0x4)
00040f 07fa      	CPC  R31,R26
000410 f419      	BRNE _0x107
000411 924a      	ST   -Y,R4
000412 dee0      	RCALL _m_135
000413 c05a      	RJMP _0x103
                 ; 0000 013B                 case 5: m_180(rychlost_presunu);                break;
                 _0x107:
000414 30e5      	CPI  R30,LOW(0x5)
000415 e0a0      	LDI  R26,HIGH(0x5)
000416 07fa      	CPC  R31,R26
000417 f419      	BRNE _0x108
000418 924a      	ST   -Y,R4
000419 dee7      	RCALL _m_180
00041a c053      	RJMP _0x103
                 ; 0000 013C         //---------------------------------------------------------------------
                 ; 0000 013D                 case 6: m_225(rychlost_presunu_vzad);           break;
                 _0x108:
00041b 30e6      	CPI  R30,LOW(0x6)
00041c e0a0      	LDI  R26,HIGH(0x6)
00041d 07fa      	CPC  R31,R26
00041e f419      	BRNE _0x109
00041f 926a      	ST   -Y,R6
000420 def4      	RCALL _m_225
000421 c04c      	RJMP _0x103
                 ; 0000 013E                 case 7: m_225(rychlost_presunu_vzad);           break;
                 _0x109:
000422 30e7      	CPI  R30,LOW(0x7)
000423 e0a0      	LDI  R26,HIGH(0x7)
000424 07fa      	CPC  R31,R26
000425 f419      	BRNE _0x10A
000426 926a      	ST   -Y,R6
000427 deed      	RCALL _m_225
000428 c045      	RJMP _0x103
                 ; 0000 013F                 case 8: m_270(rychlost_presunu_vzad);           break;
                 _0x10A:
000429 30e8      	CPI  R30,LOW(0x8)
00042a e0a0      	LDI  R26,HIGH(0x8)
00042b 07fa      	CPC  R31,R26
00042c f419      	BRNE _0x10B
00042d 926a      	ST   -Y,R6
00042e def3      	RCALL _m_270
00042f c03e      	RJMP _0x103
                 ; 0000 0140                 case 9: m_270(rychlost_presunu_vzad);           break;
                 _0x10B:
000430 30e9      	CPI  R30,LOW(0x9)
000431 e0a0      	LDI  R26,HIGH(0x9)
000432 07fa      	CPC  R31,R26
000433 f419      	BRNE _0x10C
000434 926a      	ST   -Y,R6
000435 deec      	RCALL _m_270
000436 c037      	RJMP _0x103
                 ; 0000 0141                 case 10: m_90(rychlost_presunu_vzad);           break;
                 _0x10C:
000437 30ea      	CPI  R30,LOW(0xA)
000438 e0a0      	LDI  R26,HIGH(0xA)
000439 07fa      	CPC  R31,R26
00043a f419      	BRNE _0x10D
00043b 926a      	ST   -Y,R6
00043c dea3      	RCALL _m_90
00043d c030      	RJMP _0x103
                 ; 0000 0142                 case 11: m_135(rychlost_presunu_vzad);          break;
                 _0x10D:
00043e 30eb      	CPI  R30,LOW(0xB)
00043f e0a0      	LDI  R26,HIGH(0xB)
000440 07fa      	CPC  R31,R26
000441 f419      	BRNE _0x10E
000442 926a      	ST   -Y,R6
000443 deaf      	RCALL _m_135
000444 c029      	RJMP _0x103
                 ; 0000 0143                 case 12: m_135(rychlost_presunu_vzad);          break;
                 _0x10E:
000445 30ec      	CPI  R30,LOW(0xC)
000446 e0a0      	LDI  R26,HIGH(0xC)
000447 07fa      	CPC  R31,R26
000448 f419      	BRNE _0x10F
000449 926a      	ST   -Y,R6
00044a dea8      	RCALL _m_135
00044b c022      	RJMP _0x103
                 ; 0000 0144         //----------------------------------------------------------------------
                 ; 0000 0145                 case 13: m_180(rychlost_presunu);               break;
                 _0x10F:
00044c 30ed      	CPI  R30,LOW(0xD)
00044d e0a0      	LDI  R26,HIGH(0xD)
00044e 07fa      	CPC  R31,R26
00044f f419      	BRNE _0x110
000450 924a      	ST   -Y,R4
000451 deaf      	RCALL _m_180
000452 c01b      	RJMP _0x103
                 ; 0000 0146                 case 14: m_225(rychlost_presunu);               break;
                 _0x110:
000453 30ee      	CPI  R30,LOW(0xE)
000454 e0a0      	LDI  R26,HIGH(0xE)
000455 07fa      	CPC  R31,R26
000456 f419      	BRNE _0x111
000457 924a      	ST   -Y,R4
000458 debc      	RCALL _m_225
000459 c014      	RJMP _0x103
                 ; 0000 0147                 case 15: m_225(rychlost_presunu);               break;
                 _0x111:
00045a 30ef      	CPI  R30,LOW(0xF)
00045b e0a0      	LDI  R26,HIGH(0xF)
00045c 07fa      	CPC  R31,R26
00045d f419      	BRNE _0x112
00045e 924a      	ST   -Y,R4
00045f deb5      	RCALL _m_225
000460 c00d      	RJMP _0x103
                 ; 0000 0148                 case 16: m_270(rychlost_presunu-10);            break;
                 _0x112:
000461 31e0      	CPI  R30,LOW(0x10)
000462 e0a0      	LDI  R26,HIGH(0x10)
000463 07fa      	CPC  R31,R26
000464 f421      	BRNE _0x113
000465 940e 0998 	CALL SUBOPT_0x20
000467 deba      	RCALL _m_270
000468 c005      	RJMP _0x103
                 ; 0000 0149         //----------------------------------------------------------------------
                 ; 0000 014A                 case 17: m_vyp();                               break;
                 _0x113:
000469 31e1      	CPI  R30,LOW(0x11)
00046a e0a0      	LDI  R26,HIGH(0x11)
00046b 07fa      	CPC  R31,R26
00046c f409      	BRNE _0x103
00046d dee3      	RCALL _m_vyp
                 ; 0000 014B             }
                 _0x103:
                 ; 0000 014C        }
                 ; 0000 014D     else{
00046e c077      	RJMP _0x115
                 _0x100:
                 ; 0000 014E            switch (senzory){
00046f 81e8      	LD   R30,Y
000470 81f9      	LDD  R31,Y+1
                 ; 0000 014F                 case 1: m_0(rychlost_presunu_zrychlene);         break;
000471 30e1      	CPI  R30,LOW(0x1)
000472 e0a0      	LDI  R26,HIGH(0x1)
000473 07fa      	CPC  R31,R26
000474 f419      	BRNE _0x119
000475 927a      	ST   -Y,R7
000476 de4d      	RCALL _m_0
000477 c06e      	RJMP _0x118
                 ; 0000 0150         //---------------------------------------------------------------------
                 ; 0000 0151                 case 2: m_45(rychlost_presunu_zrychlene);                 break;
                 _0x119:
000478 30e2      	CPI  R30,LOW(0x2)
000479 e0a0      	LDI  R26,HIGH(0x2)
00047a 07fa      	CPC  R31,R26
00047b f419      	BRNE _0x11A
00047c 927a      	ST   -Y,R7
00047d de56      	RCALL _m_45
00047e c067      	RJMP _0x118
                 ; 0000 0152                 case 3: m_45(rychlost_presunu_zrychlene);                 break;
                 _0x11A:
00047f 30e3      	CPI  R30,LOW(0x3)
000480 e0a0      	LDI  R26,HIGH(0x3)
000481 07fa      	CPC  R31,R26
000482 f419      	BRNE _0x11B
000483 927a      	ST   -Y,R7
000484 de4f      	RCALL _m_45
000485 c060      	RJMP _0x118
                 ; 0000 0153                 case 4: m_90(rychlost_presunu_zrychlene);                 break;
                 _0x11B:
000486 30e4      	CPI  R30,LOW(0x4)
000487 e0a0      	LDI  R26,HIGH(0x4)
000488 07fa      	CPC  R31,R26
000489 f419      	BRNE _0x11C
00048a 927a      	ST   -Y,R7
00048b de54      	RCALL _m_90
00048c c059      	RJMP _0x118
                 ; 0000 0154                 case 5: m_90(rychlost_presunu_zrychlene);                 break;
                 _0x11C:
00048d 30e5      	CPI  R30,LOW(0x5)
00048e e0a0      	LDI  R26,HIGH(0x5)
00048f 07fa      	CPC  R31,R26
000490 f419      	BRNE _0x11D
000491 927a      	ST   -Y,R7
000492 de4d      	RCALL _m_90
000493 c052      	RJMP _0x118
                 ; 0000 0155         //---------------------------------------------------------------------
                 ; 0000 0156                 case 6: m_135(rychlost_presunu);                     break;
                 _0x11D:
000494 30e6      	CPI  R30,LOW(0x6)
000495 e0a0      	LDI  R26,HIGH(0x6)
000496 07fa      	CPC  R31,R26
000497 f419      	BRNE _0x11E
000498 924a      	ST   -Y,R4
000499 de59      	RCALL _m_135
00049a c04b      	RJMP _0x118
                 ; 0000 0157                 case 7: m_135(rychlost_presunu);                     break;
                 _0x11E:
00049b 30e7      	CPI  R30,LOW(0x7)
00049c e0a0      	LDI  R26,HIGH(0x7)
00049d 07fa      	CPC  R31,R26
00049e f419      	BRNE _0x11F
00049f 924a      	ST   -Y,R4
0004a0 de52      	RCALL _m_135
0004a1 c044      	RJMP _0x118
                 ; 0000 0158                 case 8: m_135(rychlost_presunu);                          break;
                 _0x11F:
0004a2 30e8      	CPI  R30,LOW(0x8)
0004a3 e0a0      	LDI  R26,HIGH(0x8)
0004a4 07fa      	CPC  R31,R26
0004a5 f419      	BRNE _0x120
0004a6 924a      	ST   -Y,R4
0004a7 de4b      	RCALL _m_135
0004a8 c03d      	RJMP _0x118
                 ; 0000 0159                 case 9: m_180(rychlost_presunu);                          break;
                 _0x120:
0004a9 30e9      	CPI  R30,LOW(0x9)
0004aa e0a0      	LDI  R26,HIGH(0x9)
0004ab 07fa      	CPC  R31,R26
0004ac f419      	BRNE _0x121
0004ad 924a      	ST   -Y,R4
0004ae de52      	RCALL _m_180
0004af c036      	RJMP _0x118
                 ; 0000 015A                 case 10: m_225(rychlost_presunu);                         break;
                 _0x121:
0004b0 30ea      	CPI  R30,LOW(0xA)
0004b1 e0a0      	LDI  R26,HIGH(0xA)
0004b2 07fa      	CPC  R31,R26
0004b3 f419      	BRNE _0x122
0004b4 924a      	ST   -Y,R4
0004b5 de5f      	RCALL _m_225
0004b6 c02f      	RJMP _0x118
                 ; 0000 015B                 case 11: m_225(rychlost_presunu);                         break;
                 _0x122:
0004b7 30eb      	CPI  R30,LOW(0xB)
0004b8 e0a0      	LDI  R26,HIGH(0xB)
0004b9 07fa      	CPC  R31,R26
0004ba f419      	BRNE _0x123
0004bb 924a      	ST   -Y,R4
0004bc de58      	RCALL _m_225
0004bd c028      	RJMP _0x118
                 ; 0000 015C                 case 12: m_225(rychlost_presunu);                         break;
                 _0x123:
0004be 30ec      	CPI  R30,LOW(0xC)
0004bf e0a0      	LDI  R26,HIGH(0xC)
0004c0 07fa      	CPC  R31,R26
0004c1 f419      	BRNE _0x124
0004c2 924a      	ST   -Y,R4
0004c3 de51      	RCALL _m_225
0004c4 c021      	RJMP _0x118
                 ; 0000 015D         //----------------------------------------------------------------------
                 ; 0000 015E                 case 13: m_270(rychlost_presunu_zrychlene);               break;
                 _0x124:
0004c5 30ed      	CPI  R30,LOW(0xD)
0004c6 e0a0      	LDI  R26,HIGH(0xD)
0004c7 07fa      	CPC  R31,R26
0004c8 f419      	BRNE _0x125
0004c9 927a      	ST   -Y,R7
0004ca de57      	RCALL _m_270
0004cb c01a      	RJMP _0x118
                 ; 0000 015F                 case 14: m_270(rychlost_presunu_zrychlene);               break;
                 _0x125:
0004cc 30ee      	CPI  R30,LOW(0xE)
0004cd e0a0      	LDI  R26,HIGH(0xE)
0004ce 07fa      	CPC  R31,R26
0004cf f419      	BRNE _0x126
0004d0 927a      	ST   -Y,R7
0004d1 de50      	RCALL _m_270
0004d2 c013      	RJMP _0x118
                 ; 0000 0160                 case 15: m_315(rychlost_presunu_zrychlene);               break;
                 _0x126:
0004d3 30ef      	CPI  R30,LOW(0xF)
0004d4 e0a0      	LDI  R26,HIGH(0xF)
0004d5 07fa      	CPC  R31,R26
0004d6 f419      	BRNE _0x127
0004d7 927a      	ST   -Y,R7
0004d8 de5a      	RCALL _m_315
0004d9 c00c      	RJMP _0x118
                 ; 0000 0161                 case 16: m_315(rychlost_presunu_zrychlene);               break;
                 _0x127:
0004da 31e0      	CPI  R30,LOW(0x10)
0004db e0a0      	LDI  R26,HIGH(0x10)
0004dc 07fa      	CPC  R31,R26
0004dd f419      	BRNE _0x128
0004de 927a      	ST   -Y,R7
0004df de53      	RCALL _m_315
0004e0 c005      	RJMP _0x118
                 ; 0000 0162         //----------------------------------------------------------------------
                 ; 0000 0163                 case 17: m_vyp();                                         break;
                 _0x128:
0004e1 31e1      	CPI  R30,LOW(0x11)
0004e2 e0a0      	LDI  R26,HIGH(0x11)
0004e3 07fa      	CPC  R31,R26
0004e4 f409      	BRNE _0x118
0004e5 de6b      	RCALL _m_vyp
                 ; 0000 0164         }
                 _0x118:
                 ; 0000 0165     }
                 _0x115:
                 ; 0000 0166 }
                 _0x20A0007:
0004e6 9622      	ADIW R28,2
0004e7 9508      	RET
                 ;//------------------------------
                 ;//------------------------------
                 ;//odosielanie do PC
                 ;//------------------------------
                 ;char bolo_nacita = 0;
                 ;void odosli_dataPC(){
                 ; 0000 016C void odosli_dataPC(){
                 _odosli_dataPC:
                 ; 0000 016D     char data[12];
                 ; 0000 016E     int test;
                 ; 0000 016F //--prijem_dat------------------------
                 ; 0000 0170     prijem_dat();
0004e8 972c      	SBIW R28,12
0004e9 931a      	ST   -Y,R17
0004ea 930a      	ST   -Y,R16
                 ;	data -> Y+2
                 ;	test -> R16,R17
0004eb dd68      	RCALL _prijem_dat
                 ; 0000 0171 //------------------------------------
                 ; 0000 0172 //printf("test\n");
                 ; 0000 0173 //spracovanie dat---------------------
                 ; 0000 0174 //------------------------------------
                 ; 0000 0175     if (strcmpf(datax[0],"data") == 0){
0004ec 940e 0947 	CALL SUBOPT_0x10
                +
0004ee e7e3     +LDI R30 , LOW ( 2 * _0x0 + 3 )
0004ef e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 3 )
                 	__POINTW1FN _0x0,3
0004f0 940e 09a2 	CALL SUBOPT_0x21
0004f2 f5a9      	BRNE _0x12A
                 ; 0000 0176         data[0] = Senzor_1;
0004f3 e0e7      	LDI  R30,LOW(7)
0004f4 93ea      	ST   -Y,R30
0004f5 db95      	RCALL _read_adc
0004f6 83ea      	STD  Y+2,R30
                 ; 0000 0177         data[1] = Senzor_2;
0004f7 e0e6      	LDI  R30,LOW(6)
0004f8 93ea      	ST   -Y,R30
0004f9 db91      	RCALL _read_adc
0004fa 83eb      	STD  Y+3,R30
                 ; 0000 0178         data[2] = Senzor_3;
0004fb e0e5      	LDI  R30,LOW(5)
0004fc 93ea      	ST   -Y,R30
0004fd db8d      	RCALL _read_adc
0004fe 83ec      	STD  Y+4,R30
                 ; 0000 0179         data[3] = Senzor_4;
0004ff e0e4      	LDI  R30,LOW(4)
000500 93ea      	ST   -Y,R30
000501 db89      	RCALL _read_adc
000502 83ed      	STD  Y+5,R30
                 ; 0000 017A         data[4] = Senzor_5;
000503 e0e0      	LDI  R30,LOW(0)
000504 93ea      	ST   -Y,R30
000505 db85      	RCALL _read_adc
000506 83ee      	STD  Y+6,R30
                 ; 0000 017B         data[5] = Senzor_6;
000507 e0e1      	LDI  R30,LOW(1)
000508 93ea      	ST   -Y,R30
000509 db81      	RCALL _read_adc
00050a 83ef      	STD  Y+7,R30
                 ; 0000 017C         data[6] = Senzor_7;
00050b e0e2      	LDI  R30,LOW(2)
00050c 93ea      	ST   -Y,R30
00050d db7d      	RCALL _read_adc
00050e 87e8      	STD  Y+8,R30
                 ; 0000 017D         data[7] = Senzor_8;
00050f e0e3      	LDI  R30,LOW(3)
000510 93ea      	ST   -Y,R30
000511 db79      	RCALL _read_adc
000512 87e9      	STD  Y+9,R30
                 ; 0000 017E         data[8] = maxx(200);
000513 940e 09a8 	CALL SUBOPT_0x22
000515 87ea      	STD  Y+10,R30
                 ; 0000 017F         data[9] = Kick_sens+20;
000516 e0e0      	LDI  R30,0
000517 99b5      	SBIC 0x16,5
000518 e0e1      	LDI  R30,1
000519 5eec      	SUBI R30,-LOW(20)
00051a 87eb      	STD  Y+11,R30
                 ; 0000 0180         data[10] = (int)(prepocetcompasu(branka,1)*0.71);
00051b 940e 09ac 	CALL SUBOPT_0x23
00051d 2766      	CLR  R22
00051e 2777      	CLR  R23
00051f 87ec      	STD  Y+12,R30
                 ; 0000 0181         puts(data);
000520 940e 094c 	CALL SUBOPT_0x11
000522 940e 06d3 	CALL _puts
                 ; 0000 0182         bolo_nacita = 1;
000524 e0e1      	LDI  R30,LOW(1)
000525 93e0 0292 	STS  _bolo_nacita,R30
                 ; 0000 0183         }
                 ; 0000 0184     else if (strcmpf(datax[0],"kick") == 0)     kick_no();
000527 c10a      	RJMP _0x12B
                 _0x12A:
000528 940e 0947 	CALL SUBOPT_0x10
                +
00052a e7e8     +LDI R30 , LOW ( 2 * _0x0 + 8 )
00052b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 8 )
                 	__POINTW1FN _0x0,8
00052c 940e 09a2 	CALL SUBOPT_0x21
00052e f411      	BRNE _0x12C
00052f de72      	RCALL _kick_no
                 ; 0000 0185     else if (strcmpf(datax[0],"L1ed") == 0){     on = 1; }
000530 c101      	RJMP _0x12D
                 _0x12C:
000531 940e 0947 	CALL SUBOPT_0x10
                +
000533 e7ed     +LDI R30 , LOW ( 2 * _0x0 + 13 )
000534 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 13 )
                 	__POINTW1FN _0x0,13
000535 940e 09a2 	CALL SUBOPT_0x21
000537 f431      	BRNE _0x12E
000538 e0a2      	LDI  R26,LOW(_on)
000539 e0b0      	LDI  R27,HIGH(_on)
00053a e0e1      	LDI  R30,LOW(1)
00053b 940e 0abf 	CALL __EEPROMWRB
                 ; 0000 0186     else if (strcmpf(datax[0],"L0ed") == 0){      on = 0;}
00053d c0f4      	RJMP _0x12F
                 _0x12E:
00053e 940e 0947 	CALL SUBOPT_0x10
                +
000540 e8e2     +LDI R30 , LOW ( 2 * _0x0 + 18 )
000541 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 18 )
                 	__POINTW1FN _0x0,18
000542 940e 09a2 	CALL SUBOPT_0x21
000544 f431      	BRNE _0x130
000545 e0a2      	LDI  R26,LOW(_on)
000546 e0b0      	LDI  R27,HIGH(_on)
000547 e0e0      	LDI  R30,LOW(0)
000548 940e 0abf 	CALL __EEPROMWRB
                 ; 0000 0187     else if (strcmpf(datax[0],"LED0") == 0)     LED = 1;
00054a c0e7      	RJMP _0x131
                 _0x130:
00054b 940e 0947 	CALL SUBOPT_0x10
                +
00054d e8e7     +LDI R30 , LOW ( 2 * _0x0 + 23 )
00054e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 23 )
                 	__POINTW1FN _0x0,23
00054f 940e 09a2 	CALL SUBOPT_0x21
000551 f411      	BRNE _0x132
000552 9ac4      	SBI  0x18,4
                 ; 0000 0188     else if (strcmpf(datax[0],"LED1") == 0)     LED = 0;
000553 c0de      	RJMP _0x135
                 _0x132:
000554 940e 0947 	CALL SUBOPT_0x10
                +
000556 e8ec     +LDI R30 , LOW ( 2 * _0x0 + 28 )
000557 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 28 )
                 	__POINTW1FN _0x0,28
000558 940e 09a2 	CALL SUBOPT_0x21
00055a f411      	BRNE _0x136
00055b 98c4      	CBI  0x18,4
                 ; 0000 0189     else if (strcmpf(datax[0],"smer") == 0)    {
00055c c0d5      	RJMP _0x139
                 _0x136:
00055d 940e 0947 	CALL SUBOPT_0x10
                +
00055f e9e1     +LDI R30 , LOW ( 2 * _0x0 + 33 )
000560 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 33 )
                 	__POINTW1FN _0x0,33
000561 940e 09a2 	CALL SUBOPT_0x21
000563 f011      	BREQ PC+3
000564 940c 05b9 	JMP _0x13A
                 ; 0000 018A         smer = atoi(datax[1]);
000566 940e 09c3 	CALL SUBOPT_0x24
000568 2e8e      	MOV  R8,R30
                 ; 0000 018B         switch(smer){
000569 2de8      	MOV  R30,R8
00056a e0f0      	LDI  R31,0
                 ; 0000 018C             case 0:
00056b 9730      	SBIW R30,0
00056c f411      	BRNE _0x13E
                 ; 0000 018D                 m_vyp();
00056d dde3      	RCALL _m_vyp
                 ; 0000 018E                 break;
00056e c049      	RJMP _0x13D
                 ; 0000 018F             case 1:
                 _0x13E:
00056f 30e1      	CPI  R30,LOW(0x1)
000570 e0a0      	LDI  R26,HIGH(0x1)
000571 07fa      	CPC  R31,R26
000572 f419      	BRNE _0x13F
                 ; 0000 0190                 m_0(rychlost);
000573 92da      	ST   -Y,R13
000574 dd4f      	RCALL _m_0
                 ; 0000 0191                 break;
000575 c042      	RJMP _0x13D
                 ; 0000 0192             case 2:
                 _0x13F:
000576 30e2      	CPI  R30,LOW(0x2)
000577 e0a0      	LDI  R26,HIGH(0x2)
000578 07fa      	CPC  R31,R26
000579 f419      	BRNE _0x140
                 ; 0000 0193                 m_45(rychlost);
00057a 92da      	ST   -Y,R13
00057b dd58      	RCALL _m_45
                 ; 0000 0194                 break;
00057c c03b      	RJMP _0x13D
                 ; 0000 0195             case 3:
                 _0x140:
00057d 30e3      	CPI  R30,LOW(0x3)
00057e e0a0      	LDI  R26,HIGH(0x3)
00057f 07fa      	CPC  R31,R26
000580 f419      	BRNE _0x141
                 ; 0000 0196                 m_90(rychlost);
000581 92da      	ST   -Y,R13
000582 dd5d      	RCALL _m_90
                 ; 0000 0197                 break;
000583 c034      	RJMP _0x13D
                 ; 0000 0198             case 4:
                 _0x141:
000584 30e4      	CPI  R30,LOW(0x4)
000585 e0a0      	LDI  R26,HIGH(0x4)
000586 07fa      	CPC  R31,R26
000587 f419      	BRNE _0x142
                 ; 0000 0199                 m_135(rychlost);
000588 92da      	ST   -Y,R13
000589 dd69      	RCALL _m_135
                 ; 0000 019A                 break;
00058a c02d      	RJMP _0x13D
                 ; 0000 019B             case 5:
                 _0x142:
00058b 30e5      	CPI  R30,LOW(0x5)
00058c e0a0      	LDI  R26,HIGH(0x5)
00058d 07fa      	CPC  R31,R26
00058e f419      	BRNE _0x143
                 ; 0000 019C                 m_180(rychlost);
00058f 92da      	ST   -Y,R13
000590 dd70      	RCALL _m_180
                 ; 0000 019D                 break;
000591 c026      	RJMP _0x13D
                 ; 0000 019E             case 6:
                 _0x143:
000592 30e6      	CPI  R30,LOW(0x6)
000593 e0a0      	LDI  R26,HIGH(0x6)
000594 07fa      	CPC  R31,R26
000595 f419      	BRNE _0x144
                 ; 0000 019F                 m_225(rychlost);
000596 92da      	ST   -Y,R13
000597 dd7d      	RCALL _m_225
                 ; 0000 01A0                 break;
000598 c01f      	RJMP _0x13D
                 ; 0000 01A1             case 7:
                 _0x144:
000599 30e7      	CPI  R30,LOW(0x7)
00059a e0a0      	LDI  R26,HIGH(0x7)
00059b 07fa      	CPC  R31,R26
00059c f419      	BRNE _0x145
                 ; 0000 01A2                 m_270(rychlost);
00059d 92da      	ST   -Y,R13
00059e dd83      	RCALL _m_270
                 ; 0000 01A3                 break;
00059f c018      	RJMP _0x13D
                 ; 0000 01A4             case 8:
                 _0x145:
0005a0 30e8      	CPI  R30,LOW(0x8)
0005a1 e0a0      	LDI  R26,HIGH(0x8)
0005a2 07fa      	CPC  R31,R26
0005a3 f419      	BRNE _0x146
                 ; 0000 01A5                 m_315(rychlost);
0005a4 92da      	ST   -Y,R13
0005a5 dd8d      	RCALL _m_315
                 ; 0000 01A6                 break;
0005a6 c011      	RJMP _0x13D
                 ; 0000 01A7             case 10:
                 _0x146:
0005a7 30ea      	CPI  R30,LOW(0xA)
0005a8 e0a0      	LDI  R26,HIGH(0xA)
0005a9 07fa      	CPC  R31,R26
0005aa f419      	BRNE _0x147
                 ; 0000 01A8                 m_ot(170);
0005ab eaea      	LDI  R30,LOW(170)
0005ac e0f0      	LDI  R31,HIGH(170)
0005ad c007      	RJMP _0x198
                 ; 0000 01A9                 break;
                 ; 0000 01AA             case 9:
                 _0x147:
0005ae 30e9      	CPI  R30,LOW(0x9)
0005af e0a0      	LDI  R26,HIGH(0x9)
0005b0 07fa      	CPC  R31,R26
0005b1 f431      	BRNE _0x13D
                 ; 0000 01AB                 m_ot(-170);
0005b2 e5e6      	LDI  R30,LOW(65366)
0005b3 efff      	LDI  R31,HIGH(65366)
0005b4 efff      	SER  R31
                 _0x198:
0005b5 93fa      	ST   -Y,R31
0005b6 93ea      	ST   -Y,R30
0005b7 dd89      	RCALL _m_ot
                 ; 0000 01AC                 break;
                 ; 0000 01AD             }
                 _0x13D:
                 ; 0000 01AE         }
                 ; 0000 01AF     else if (strcmpf(datax[0],"rych") == 0)    {
0005b8 c079      	RJMP _0x149
                 _0x13A:
0005b9 940e 0947 	CALL SUBOPT_0x10
                +
0005bb e9e6     +LDI R30 , LOW ( 2 * _0x0 + 38 )
0005bc e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 38 )
                 	__POINTW1FN _0x0,38
0005bd 940e 09a2 	CALL SUBOPT_0x21
0005bf f011      	BREQ PC+3
0005c0 940c 0615 	JMP _0x14A
                 ; 0000 01B0         rychlost = atoi(datax[1]);
0005c2 940e 09c3 	CALL SUBOPT_0x24
0005c4 2ede      	MOV  R13,R30
                 ; 0000 01B1         switch(smer){
0005c5 2de8      	MOV  R30,R8
0005c6 e0f0      	LDI  R31,0
                 ; 0000 01B2             case 0:
0005c7 9730      	SBIW R30,0
0005c8 f411      	BRNE _0x14E
                 ; 0000 01B3                 m_vyp();
0005c9 dd87      	RCALL _m_vyp
                 ; 0000 01B4                 break;
0005ca c049      	RJMP _0x14D
                 ; 0000 01B5             case 1:
                 _0x14E:
0005cb 30e1      	CPI  R30,LOW(0x1)
0005cc e0a0      	LDI  R26,HIGH(0x1)
0005cd 07fa      	CPC  R31,R26
0005ce f419      	BRNE _0x14F
                 ; 0000 01B6                 m_0(rychlost);
0005cf 92da      	ST   -Y,R13
0005d0 dcf3      	RCALL _m_0
                 ; 0000 01B7                 break;
0005d1 c042      	RJMP _0x14D
                 ; 0000 01B8             case 2:
                 _0x14F:
0005d2 30e2      	CPI  R30,LOW(0x2)
0005d3 e0a0      	LDI  R26,HIGH(0x2)
0005d4 07fa      	CPC  R31,R26
0005d5 f419      	BRNE _0x150
                 ; 0000 01B9                 m_45(rychlost);
0005d6 92da      	ST   -Y,R13
0005d7 dcfc      	RCALL _m_45
                 ; 0000 01BA                 break;
0005d8 c03b      	RJMP _0x14D
                 ; 0000 01BB             case 3:
                 _0x150:
0005d9 30e3      	CPI  R30,LOW(0x3)
0005da e0a0      	LDI  R26,HIGH(0x3)
0005db 07fa      	CPC  R31,R26
0005dc f419      	BRNE _0x151
                 ; 0000 01BC                 m_90(rychlost);
0005dd 92da      	ST   -Y,R13
0005de dd01      	RCALL _m_90
                 ; 0000 01BD                 break;
0005df c034      	RJMP _0x14D
                 ; 0000 01BE             case 4:
                 _0x151:
0005e0 30e4      	CPI  R30,LOW(0x4)
0005e1 e0a0      	LDI  R26,HIGH(0x4)
0005e2 07fa      	CPC  R31,R26
0005e3 f419      	BRNE _0x152
                 ; 0000 01BF                 m_135(rychlost);
0005e4 92da      	ST   -Y,R13
0005e5 dd0d      	RCALL _m_135
                 ; 0000 01C0                 break;
0005e6 c02d      	RJMP _0x14D
                 ; 0000 01C1             case 5:
                 _0x152:
0005e7 30e5      	CPI  R30,LOW(0x5)
0005e8 e0a0      	LDI  R26,HIGH(0x5)
0005e9 07fa      	CPC  R31,R26
0005ea f419      	BRNE _0x153
                 ; 0000 01C2                 m_180(rychlost);
0005eb 92da      	ST   -Y,R13
0005ec dd14      	RCALL _m_180
                 ; 0000 01C3                 break;
0005ed c026      	RJMP _0x14D
                 ; 0000 01C4             case 6:
                 _0x153:
0005ee 30e6      	CPI  R30,LOW(0x6)
0005ef e0a0      	LDI  R26,HIGH(0x6)
0005f0 07fa      	CPC  R31,R26
0005f1 f419      	BRNE _0x154
                 ; 0000 01C5                 m_225(rychlost);
0005f2 92da      	ST   -Y,R13
0005f3 dd21      	RCALL _m_225
                 ; 0000 01C6                 break;
0005f4 c01f      	RJMP _0x14D
                 ; 0000 01C7             case 7:
                 _0x154:
0005f5 30e7      	CPI  R30,LOW(0x7)
0005f6 e0a0      	LDI  R26,HIGH(0x7)
0005f7 07fa      	CPC  R31,R26
0005f8 f419      	BRNE _0x155
                 ; 0000 01C8                 m_270(rychlost);
0005f9 92da      	ST   -Y,R13
0005fa dd27      	RCALL _m_270
                 ; 0000 01C9                 break;
0005fb c018      	RJMP _0x14D
                 ; 0000 01CA             case 8:
                 _0x155:
0005fc 30e8      	CPI  R30,LOW(0x8)
0005fd e0a0      	LDI  R26,HIGH(0x8)
0005fe 07fa      	CPC  R31,R26
0005ff f419      	BRNE _0x156
                 ; 0000 01CB                 m_315(rychlost);
000600 92da      	ST   -Y,R13
000601 dd31      	RCALL _m_315
                 ; 0000 01CC                 break;
000602 c011      	RJMP _0x14D
                 ; 0000 01CD             case 10:
                 _0x156:
000603 30ea      	CPI  R30,LOW(0xA)
000604 e0a0      	LDI  R26,HIGH(0xA)
000605 07fa      	CPC  R31,R26
000606 f419      	BRNE _0x157
                 ; 0000 01CE                 m_ot(170);
000607 eaea      	LDI  R30,LOW(170)
000608 e0f0      	LDI  R31,HIGH(170)
000609 c007      	RJMP _0x199
                 ; 0000 01CF                 break;
                 ; 0000 01D0             case 9:
                 _0x157:
00060a 30e9      	CPI  R30,LOW(0x9)
00060b e0a0      	LDI  R26,HIGH(0x9)
00060c 07fa      	CPC  R31,R26
00060d f431      	BRNE _0x14D
                 ; 0000 01D1                 m_ot(-170);
00060e e5e6      	LDI  R30,LOW(65366)
00060f efff      	LDI  R31,HIGH(65366)
000610 efff      	SER  R31
                 _0x199:
000611 93fa      	ST   -Y,R31
000612 93ea      	ST   -Y,R30
000613 dd2d      	RCALL _m_ot
                 ; 0000 01D2                 break;
                 ; 0000 01D3             }
                 _0x14D:
                 ; 0000 01D4         }
                 ; 0000 01D5     else if (strcmpf(datax[0],"obch") == 0)     obchadzanie(maxx(200));
000614 c01d      	RJMP _0x159
                 _0x14A:
000615 940e 0947 	CALL SUBOPT_0x10
                +
000617 e9eb     +LDI R30 , LOW ( 2 * _0x0 + 43 )
000618 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 43 )
                 	__POINTW1FN _0x0,43
000619 940e 09a2 	CALL SUBOPT_0x21
00061b f431      	BRNE _0x15A
00061c 940e 09a8 	CALL SUBOPT_0x22
00061e 940e 0994 	CALL SUBOPT_0x1F
000620 ddcf      	RCALL _obchadzanie
                 ; 0000 01D6     else{
000621 c010      	RJMP _0x15B
                 _0x15A:
                 ; 0000 01D7         data[0] = 0;
000622 e0e0      	LDI  R30,LOW(0)
000623 83ea      	STD  Y+2,R30
                 ; 0000 01D8         data[1] = 0;
000624 83eb      	STD  Y+3,R30
                 ; 0000 01D9         data[2] = 0;
000625 83ec      	STD  Y+4,R30
                 ; 0000 01DA         data[3] = 0;
000626 83ed      	STD  Y+5,R30
                 ; 0000 01DB         data[4] = 0;
000627 83ee      	STD  Y+6,R30
                 ; 0000 01DC         data[5] = 0;
000628 83ef      	STD  Y+7,R30
                 ; 0000 01DD         data[6] = 0;
000629 87e8      	STD  Y+8,R30
                 ; 0000 01DE         data[7] = 0;
00062a 87e9      	STD  Y+9,R30
                 ; 0000 01DF         data[8] = 0;
00062b 87ea      	STD  Y+10,R30
                 ; 0000 01E0         data[9] = 0;
00062c 87eb      	STD  Y+11,R30
                 ; 0000 01E1         data[10] = 0;
00062d 87ec      	STD  Y+12,R30
                 ; 0000 01E2         puts(data);
00062e 940e 094c 	CALL SUBOPT_0x11
000630 940e 06d3 	CALL _puts
                 ; 0000 01E3     }
                 _0x15B:
                 _0x159:
                 _0x149:
                 _0x139:
                 _0x135:
                 _0x131:
                 _0x12F:
                 _0x12D:
                 _0x12B:
                 ; 0000 01E4         if (on == 1){
000632 e0a2      	LDI  R26,LOW(_on)
000633 e0b0      	LDI  R27,HIGH(_on)
000634 940e 0aab 	CALL __EEPROMRDB
000636 30e1      	CPI  R30,LOW(0x1)
000637 f4a1      	BRNE _0x15C
                 ; 0000 01E5             if (bolo_nacita == 1){
000638 91a0 0292 	LDS  R26,_bolo_nacita
00063a 30a1      	CPI  R26,LOW(0x1)
00063b f459      	BRNE _0x15D
                 ; 0000 01E6             if (0 != nastav_podla_kompasu(data[10])){
00063c 85ec      	LDD  R30,Y+12
00063d 940e 0994 	CALL SUBOPT_0x1F
00063f dd6b      	RCALL _nastav_podla_kompasu
000640 9730      	SBIW R30,0
000641 f021      	BREQ _0x15E
                 ; 0000 01E7                 obchadzanie(data[8]);
000642 85ea      	LDD  R30,Y+10
000643 940e 0994 	CALL SUBOPT_0x1F
000645 ddaa      	RCALL _obchadzanie
                 ; 0000 01E8             }
                 ; 0000 01E9            }
                 _0x15E:
                 ; 0000 01EA            else{
000646 c005      	RJMP _0x15F
                 _0x15D:
                 ; 0000 01EB                 obchadzanie(maxx(200));
000647 940e 09a8 	CALL SUBOPT_0x22
000649 940e 0994 	CALL SUBOPT_0x1F
00064b dda4      	RCALL _obchadzanie
                 ; 0000 01EC            }
                 _0x15F:
                 ; 0000 01ED         }
                 ; 0000 01EE     }
                 _0x15C:
00064c 8119      	LDD  R17,Y+1
00064d 8108      	LDD  R16,Y+0
                 _0x20A0006:
00064e 962e      	ADIW R28,14
00064f 9508      	RET
                 ;//---------------------------------
                 ;void kalibracia_kompas(unsigned char mode){
                 ; 0000 01F0 void kalibracia_kompas(unsigned char mode){
                 _kalibracia_kompas:
                 ; 0000 01F1     int kompas;
                 ; 0000 01F2     if (mode == 1){
000650 940e 0923 	CALL SUBOPT_0xB
                 ;	mode -> Y+2
                 ;	kompas -> R16,R17
000652 f541      	BRNE _0x160
                 ; 0000 01F3         if (Kick_sens == 0){
000653 99b5      	SBIC 0x16,5
000654 c025      	RJMP _0x161
                 ; 0000 01F4         while (Kick_sens == 0){
                 _0x162:
000655 99b5      	SBIC 0x16,5
000656 c008      	RJMP _0x164
                 ; 0000 01F5             delay_ms(20);
000657 e1e4      	LDI  R30,LOW(20)
000658 e0f0      	LDI  R31,HIGH(20)
000659 940e 09c9 	CALL SUBOPT_0x25
                 ; 0000 01F6             branka = cmps03_read(1);
00065b e0e1      	LDI  R30,LOW(1)
00065c 940e 09cd 	CALL SUBOPT_0x26
                 ; 0000 01F7                     }
00065e cff6      	RJMP _0x162
                 _0x164:
                 ; 0000 01F8         while(1){
                 _0x165:
                 ; 0000 01F9             kompas = prepocetcompasu(branka,1)*0.71;
00065f 940e 09ac 	CALL SUBOPT_0x23
000661 018f      	MOVW R16,R30
                 ; 0000 01FA             if (kompas > 180)
                +
000662 3b05     +CPI R16 , LOW ( 181 )
000663 e0e0     +LDI R30 , HIGH ( 181 )
000664 071e     +CPC R17 , R30
                 	__CPWRN 16,17,181
000665 f014      	BRLT _0x168
                 ; 0000 01FB                 kompas = 180;
                +
000666 eb04     +LDI R16 , LOW ( 180 )
000667 e010     +LDI R17 , HIGH ( 180 )
                 	__GETWRN 16,17,180
                 ; 0000 01FC             if (kompas < 20){
                 _0x168:
                +
000668 3104     +CPI R16 , LOW ( 20 )
000669 e0e0     +LDI R30 , HIGH ( 20 )
00066a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,20
00066b f064      	BRLT _0x19A
                 ; 0000 01FD                 LED = 0;
                 ; 0000 01FE             }
                 ; 0000 01FF             else{
                 ; 0000 0200                 if( kompas < 90){
                +
00066c 350a     +CPI R16 , LOW ( 90 )
00066d e0e0     +LDI R30 , HIGH ( 90 )
00066e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,90
00066f f414      	BRGE _0x16D
                 ; 0000 0201                     LED = 1;
000670 9ac4      	SBI  0x18,4
                 ; 0000 0202                 }
                 ; 0000 0203                 else
000671 c007      	RJMP _0x170
                 _0x16D:
                 ; 0000 0204                 {
                 ; 0000 0205                     if (kompas < 160){
                +
000672 3a00     +CPI R16 , LOW ( 160 )
000673 e0e0     +LDI R30 , HIGH ( 160 )
000674 071e     +CPC R17 , R30
                 	__CPWRN 16,17,160
000675 f414      	BRGE _0x171
                 ; 0000 0206                         LED = 1;
000676 9ac4      	SBI  0x18,4
                 ; 0000 0207                     }
                 ; 0000 0208                     else {
000677 c001      	RJMP _0x174
                 _0x171:
                 ; 0000 0209                         LED = 0;
                 _0x19A:
000678 98c4      	CBI  0x18,4
                 ; 0000 020A                         }
                 _0x174:
                 ; 0000 020B                 }
                 _0x170:
                 ; 0000 020C             }
                 ; 0000 020D         }
000679 cfe5      	RJMP _0x165
                 ; 0000 020E         }
                 ; 0000 020F         }
                 _0x161:
                 ; 0000 0210     else{
00067a c02a      	RJMP _0x177
                 _0x160:
                 ; 0000 0211          while (Kick_sens == 0){
                 _0x178:
00067b 99b5      	SBIC 0x16,5
00067c c008      	RJMP _0x17A
                 ; 0000 0212                     branka = cmps03_read(2);
00067d e0e2      	LDI  R30,LOW(2)
00067e 940e 09cd 	CALL SUBOPT_0x26
                 ; 0000 0213                     delay_ms(10);
000680 e0ea      	LDI  R30,LOW(10)
000681 e0f0      	LDI  R31,HIGH(10)
000682 940e 09c9 	CALL SUBOPT_0x25
                 ; 0000 0214                             }
000684 cff6      	RJMP _0x178
                 _0x17A:
                 ; 0000 0215          delay_ms(1000);
000685 eee8      	LDI  R30,LOW(1000)
000686 e0f3      	LDI  R31,HIGH(1000)
000687 940e 09c9 	CALL SUBOPT_0x25
                 ; 0000 0216          while(1){
                 _0x17B:
                 ; 0000 0217                     kompas = prepocetcompasu(branka,2);
000689 e0a0      	LDI  R26,LOW(_branka)
00068a e0b0      	LDI  R27,HIGH(_branka)
00068b 940e 0aa7 	CALL __EEPROMRDW
00068d 93fa      	ST   -Y,R31
00068e 93ea      	ST   -Y,R30
00068f e0e2      	LDI  R30,LOW(2)
000690 93ea      	ST   -Y,R30
000691 db50      	RCALL _prepocetcompasu
000692 018f      	MOVW R16,R30
                 ; 0000 0218                     if (kompas < 200){
                +
000693 3c08     +CPI R16 , LOW ( 200 )
000694 e0e0     +LDI R30 , HIGH ( 200 )
000695 071e     +CPC R17 , R30
                 	__CPWRN 16,17,200
000696 f064      	BRLT _0x19B
                 ; 0000 0219                         LED = 0;
                 ; 0000 021A                     }
                 ; 0000 021B                     else{
                 ; 0000 021C                         if( kompas < 1800){
                +
000697 3008     +CPI R16 , LOW ( 1800 )
000698 e0e7     +LDI R30 , HIGH ( 1800 )
000699 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1800
00069a f414      	BRGE _0x182
                 ; 0000 021D                             LED = 1;
00069b 9ac4      	SBI  0x18,4
                 ; 0000 021E                         }
                 ; 0000 021F                         else
00069c c007      	RJMP _0x185
                 _0x182:
                 ; 0000 0220                         {
                 ; 0000 0221                             if (kompas < 3400){
                +
00069d 3408     +CPI R16 , LOW ( 3400 )
00069e e0ed     +LDI R30 , HIGH ( 3400 )
00069f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3400
0006a0 f414      	BRGE _0x186
                 ; 0000 0222                                 LED = 1;
0006a1 9ac4      	SBI  0x18,4
                 ; 0000 0223                             }
                 ; 0000 0224                             else {
0006a2 c001      	RJMP _0x189
                 _0x186:
                 ; 0000 0225                                 LED = 0;
                 _0x19B:
0006a3 98c4      	CBI  0x18,4
                 ; 0000 0226                                 }
                 _0x189:
                 ; 0000 0227                         }
                 _0x185:
                 ; 0000 0228                     }
                 ; 0000 0229                 }
0006a4 cfe4      	RJMP _0x17B
                 ; 0000 022A     }
                 _0x177:
                 ; 0000 022B }
0006a5 8119      	LDD  R17,Y+1
0006a6 8108      	LDD  R16,Y+0
0006a7 940c 06e3 	JMP  _0x20A0004
                 ;//--------------------------------------------------
                 ;void main(void)
                 ; 0000 022E {
                 _main:
                 ; 0000 022F init_8535();
0006a9 dcb1      	RCALL _init_8535
                 ; 0000 0230 // pre odosielanie do pc nastav 1
                 ; 0000 0231 prog = 1;
0006aa e0e1      	LDI  R30,LOW(1)
0006ab 2e9e      	MOV  R9,R30
                 ; 0000 0232 //kompas reset, nastavenie rychlosti na 33ms
                 ; 0000 0233 cmps03_reset();
0006ac daee      	RCALL _cmps03_reset
                 ; 0000 0234 cmps03_scanmode(3);
0006ad e0e3      	LDI  R30,LOW(3)
0006ae 93ea      	ST   -Y,R30
0006af dadf      	RCALL _cmps03_scanmode
                 ; 0000 0235 //-----------------------------------
                 ; 0000 0236 delay_ms(200);
0006b0 940e 098e 	CALL SUBOPT_0x1E
                 ; 0000 0237 kalibracia_kompas(1);
0006b2 e0e1      	LDI  R30,LOW(1)
0006b3 93ea      	ST   -Y,R30
0006b4 df9b      	RCALL _kalibracia_kompas
                 ; 0000 0238 //-----------------------------------
                 ; 0000 0239 testmotor:
                 _0x18C:
                 ; 0000 023A     while(1){
                 ; 0000 023B     /*
                 ; 0000 023C         if (Mot_sens == 1)  {
                 ; 0000 023D           goto zaciatok;
                 ; 0000 023E         }
                 ; 0000 023F         else{
                 ; 0000 0240             switch (senzory){
                 ; 0000 0241                 case 1:     goto zaciatok;                  break;
                 ; 0000 0242         //---------------------------------------------------------------------
                 ; 0000 0243                 case 2:     m_0(255);          break;
                 ; 0000 0244                 case 3:     m_0(255);          break;
                 ; 0000 0245                 case 4:     m_45(255);          break;
                 ; 0000 0246                 case 5:     m_45(255);         break;
                 ; 0000 0247         //---------------------------------------------------------------------
                 ; 0000 0248                 case 6:     m_vyp();                        break;
                 ; 0000 0249                 case 7:     m_vyp();                        break;
                 ; 0000 024A                 case 8:     m_vyp();                        break;
                 ; 0000 024B                 case 9:     m_vyp();                        break;
                 ; 0000 024C                 case 10:    m_vyp();                        break;
                 ; 0000 024D                 case 11:    m_vyp();                        break;
                 ; 0000 024E                 case 12:    m_vyp();                        break;
                 ; 0000 024F         //----------------------------------------------------------------------
                 ; 0000 0250                 case 13:    m_315(255);        break;
                 ; 0000 0251                 case 14:    m_315(255);          break;
                 ; 0000 0252                 case 15:    m_0(255);          break;
                 ; 0000 0253                 case 16:    m_0(255);          break;
                 ; 0000 0254         //----------------------------------------------------------------------
                 ; 0000 0255                 case 17:    m_vyp();                        break;
                 ; 0000 0256             }
                 ; 0000 0257             if (senzory != 1){
                 ; 0000 0258                 delay_ms(400);
                 ; 0000 0259             }
                 ; 0000 025A         }
                 ; 0000 025B         */
                 ; 0000 025C //        while(1){
                 ; 0000 025D           odosli_dataPC();
0006b5 de32      	RCALL _odosli_dataPC
                 ; 0000 025E     //    }
                 ; 0000 025F goto testmotor;
0006b6 cffe      	RJMP _0x18C
                 ; 0000 0260 goto zaciatok;
                 ; 0000 0261 }
                 ; 0000 0262 //-----------------------------------
                 ; 0000 0263 zaciatok:
                 ; 0000 0264     while (1){
                 _0x191:
                 ; 0000 0265         if (0 != nastav_podla_kompasu((int)(prepocetcompasu(branka,1)*0.71))){
0006b7 940e 09ac 	CALL SUBOPT_0x23
0006b9 93fa      	ST   -Y,R31
0006ba 93ea      	ST   -Y,R30
0006bb dcef      	RCALL _nastav_podla_kompasu
0006bc 9730      	SBIW R30,0
0006bd f029      	BREQ _0x194
                 ; 0000 0266             obchadzanie(maxx(200));
0006be 940e 09a8 	CALL SUBOPT_0x22
0006c0 940e 0994 	CALL SUBOPT_0x1F
0006c2 dd2d      	RCALL _obchadzanie
                 ; 0000 0267         }
                 ; 0000 0268         delay_ms(30);
                 _0x194:
0006c3 e1ee      	LDI  R30,LOW(30)
0006c4 e0f0      	LDI  R31,HIGH(30)
0006c5 940e 09c9 	CALL SUBOPT_0x25
                 ; 0000 0269 };
0006c7 cfef      	RJMP _0x191
                 ; 0000 026A //-----------------------------------
                 ; 0000 026B }
                 _0x195:
0006c8 cfff      	RJMP _0x195
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
0006c9 9b5f           sbis usr,rxc
0006ca cffe           rjmp _getchar
0006cb b1ec           in   r30,udr
0006cc 9508      	RET
                 _putchar:
0006cd 9b5d           sbis usr,udre
0006ce cffe           rjmp _putchar
0006cf 81e8           ld   r30,y
0006d0 b9ec           out  udr,r30
                 _0x20A0005:
0006d1 9621      	ADIW R28,1
0006d2 9508      	RET
                 _puts:
0006d3 931a      	ST   -Y,R17
                 _0x2000003:
0006d4 81a9      	LDD  R26,Y+1
0006d5 81ba      	LDD  R27,Y+1+1
0006d6 91ed      	LD   R30,X+
0006d7 83a9      	STD  Y+1,R26
0006d8 83ba      	STD  Y+1+1,R27
0006d9 2f1e      	MOV  R17,R30
0006da 30e0      	CPI  R30,0
0006db f019      	BREQ _0x2000005
0006dc 931a      	ST   -Y,R17
0006dd dfef      	RCALL _putchar
0006de cff5      	RJMP _0x2000003
                 _0x2000005:
0006df e0ea      	LDI  R30,LOW(10)
0006e0 93ea      	ST   -Y,R30
0006e1 dfeb      	RCALL _putchar
0006e2 8118      	LDD  R17,Y+0
                 _0x20A0004:
0006e3 9623      	ADIW R28,3
0006e4 9508      	RET
                 __get_G100:
0006e5 931a      	ST   -Y,R17
0006e6 81ab      	LDD  R26,Y+3
0006e7 81bc      	LDD  R27,Y+3+1
0006e8 91ec      	LD   R30,X
0006e9 2f1e      	MOV  R17,R30
0006ea 30e0      	CPI  R30,0
0006eb f019      	BREQ _0x2000073
0006ec e0e0      	LDI  R30,LOW(0)
0006ed 93ec      	ST   X,R30
0006ee c014      	RJMP _0x2000074
                 _0x2000073:
0006ef 81a9      	LDD  R26,Y+1
0006f0 81ba      	LDD  R27,Y+1+1
0006f1 940e 0a97 	CALL __GETW1P
0006f3 9730      	SBIW R30,0
0006f4 f061      	BREQ _0x2000075
0006f5 940e 0a97 	CALL __GETW1P
0006f7 81e0      	LD   R30,Z
0006f8 2f1e      	MOV  R17,R30
0006f9 30e0      	CPI  R30,0
0006fa f029      	BREQ _0x2000076
0006fb 91ed      	LD   R30,X+
0006fc 91fd      	LD   R31,X+
0006fd 9631      	ADIW R30,1
0006fe 93fe      	ST   -X,R31
0006ff 93ee      	ST   -X,R30
                 _0x2000076:
000700 c002      	RJMP _0x2000077
                 _0x2000075:
000701 dfc7      	RCALL _getchar
000702 2f1e      	MOV  R17,R30
                 _0x2000077:
                 _0x2000074:
000703 2fe1      	MOV  R30,R17
000704 8118      	LDD  R17,Y+0
                 _0x20A0003:
000705 9625      	ADIW R28,5
000706 9508      	RET
                 __scanf_G100:
000707 9724      	SBIW R28,4
000708 940e 0bb6 	CALL __SAVELOCR6
00070a e0e0      	LDI  R30,LOW(0)
00070b 87e9      	STD  Y+9,R30
00070c 2f4e      	MOV  R20,R30
                 _0x2000078:
00070d 85ee      	LDD  R30,Y+14
00070e 85ff      	LDD  R31,Y+14+1
00070f 9631      	ADIW R30,1
000710 87ee      	STD  Y+14,R30
000711 87ff      	STD  Y+14+1,R31
000712 9731      	SBIW R30,1
000713 91e4      	LPM  R30,Z
000714 2f3e      	MOV  R19,R30
000715 30e0      	CPI  R30,0
000716 f411      	BRNE PC+3
000717 940c 0837 	JMP _0x200007A
000719 940e 09d5 	CALL SUBOPT_0x27
00071b f091      	BREQ _0x200007B
                 _0x200007C:
00071c b7ed      	IN   R30,SPL
00071d b7fe      	IN   R31,SPH
00071e 93fa      	ST   -Y,R31
00071f 93ea      	ST   -Y,R30
000720 934f      	PUSH R20
000721 940e 09da 	CALL SUBOPT_0x28
000723 914f      	POP  R20
000724 2f3e      	MOV  R19,R30
000725 30e0      	CPI  R30,0
000726 f019      	BREQ _0x200007F
000727 940e 09d5 	CALL SUBOPT_0x27
000729 f409      	BRNE _0x2000080
                 _0x200007F:
00072a c001      	RJMP _0x200007E
                 _0x2000080:
00072b cff0      	RJMP _0x200007C
                 _0x200007E:
00072c 2f43      	MOV  R20,R19
00072d c108      	RJMP _0x2000081
                 _0x200007B:
00072e 3235      	CPI  R19,37
00072f f011      	BREQ PC+3
000730 940c 0826 	JMP _0x2000082
000732 e050      	LDI  R21,LOW(0)
                 _0x2000083:
000733 85ee      	LDD  R30,Y+14
000734 85ff      	LDD  R31,Y+14+1
000735 9135      	LPM  R19,Z+
000736 87ee      	STD  Y+14,R30
000737 87ff      	STD  Y+14+1,R31
000738 3330      	CPI  R19,48
000739 f010      	BRLO _0x2000087
00073a 333a      	CPI  R19,58
00073b f008      	BRLO _0x2000086
                 _0x2000087:
00073c c015      	RJMP _0x2000085
                 _0x2000086:
00073d 2fa5      	MOV  R26,R21
00073e e0b0      	LDI  R27,0
00073f e0ea      	LDI  R30,LOW(10)
000740 e0f0      	LDI  R31,HIGH(10)
000741 02ea      	MULS R30,R26
000742 01f0      	MOVW R30,R0
000743 2f5e      	MOV  R21,R30
000744 2f65      	MOV  R22,R21
000745 2777      	CLR  R23
000746 940e 09e0 	CALL SUBOPT_0x29
000748 e3e0      	LDI  R30,LOW(48)
000749 e0f0      	LDI  R31,HIGH(48)
00074a 940e 0aa0 	CALL __SWAPW12
00074c 1bea      	SUB  R30,R26
00074d 0bfb      	SBC  R31,R27
00074e 01db      	MOVW R26,R22
00074f 0fea      	ADD  R30,R26
000750 2f5e      	MOV  R21,R30
000751 cfe1      	RJMP _0x2000083
                 _0x2000085:
000752 3030      	CPI  R19,0
000753 f409      	BRNE _0x2000089
000754 c0e2      	RJMP _0x200007A
                 _0x2000089:
                 _0x200008A:
000755 b7ed      	IN   R30,SPL
000756 b7fe      	IN   R31,SPH
000757 93fa      	ST   -Y,R31
000758 93ea      	ST   -Y,R30
000759 934f      	PUSH R20
00075a 940e 09da 	CALL SUBOPT_0x28
00075c 914f      	POP  R20
00075d 2f2e      	MOV  R18,R30
00075e 93ea      	ST   -Y,R30
00075f 940e 08a7 	CALL _isspace
000761 30e0      	CPI  R30,0
000762 f791      	BRNE _0x200008A
000763 3020      	CPI  R18,0
000764 f409      	BRNE _0x200008D
000765 c0ca      	RJMP _0x200008E
                 _0x200008D:
000766 2f42      	MOV  R20,R18
000767 3050      	CPI  R21,0
000768 f409      	BRNE _0x200008F
000769 ef5f      	LDI  R21,LOW(255)
                 _0x200008F:
00076a 940e 09e3 	CALL SUBOPT_0x2A
00076c 36e3      	CPI  R30,LOW(0x63)
00076d e0a0      	LDI  R26,HIGH(0x63)
00076e 07fa      	CPC  R31,R26
00076f f469      	BRNE _0x2000093
000770 940e 09e6 	CALL SUBOPT_0x2B
000772 b7ed      	IN   R30,SPL
000773 b7fe      	IN   R31,SPH
000774 93fa      	ST   -Y,R31
000775 93ea      	ST   -Y,R30
000776 934f      	PUSH R20
000777 940e 09da 	CALL SUBOPT_0x28
000779 914f      	POP  R20
00077a 01d8      	MOVW R26,R16
00077b 93ec      	ST   X,R30
00077c c0a5      	RJMP _0x2000092
                 _0x2000093:
00077d 37e3      	CPI  R30,LOW(0x73)
00077e e0a0      	LDI  R26,HIGH(0x73)
00077f 07fa      	CPC  R31,R26
000780 f511      	BRNE _0x200009B
000781 940e 09e6 	CALL SUBOPT_0x2B
                 _0x2000095:
000783 2fe5      	MOV  R30,R21
000784 5051      	SUBI R21,1
000785 30e0      	CPI  R30,0
000786 f0c1      	BREQ _0x2000097
000787 b7ed      	IN   R30,SPL
000788 b7fe      	IN   R31,SPH
000789 93fa      	ST   -Y,R31
00078a 93ea      	ST   -Y,R30
00078b 934f      	PUSH R20
00078c 940e 09da 	CALL SUBOPT_0x28
00078e 914f      	POP  R20
00078f 2f3e      	MOV  R19,R30
000790 30e0      	CPI  R30,0
000791 f019      	BREQ _0x2000099
000792 940e 09d5 	CALL SUBOPT_0x27
000794 f009      	BREQ _0x2000098
                 _0x2000099:
000795 c009      	RJMP _0x2000097
                 _0x2000098:
000796 931f      	PUSH R17
000797 930f      	PUSH R16
                +
000798 5f0f     +SUBI R16 , LOW ( - 1 )
000799 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00079a 2fe3      	MOV  R30,R19
00079b 91af      	POP  R26
00079c 91bf      	POP  R27
00079d 93ec      	ST   X,R30
00079e cfe4      	RJMP _0x2000095
                 _0x2000097:
00079f 01d8      	MOVW R26,R16
0007a0 e0e0      	LDI  R30,LOW(0)
0007a1 93ec      	ST   X,R30
0007a2 c07f      	RJMP _0x2000092
                 _0x200009B:
0007a3 e0e1      	LDI  R30,LOW(1)
0007a4 87e8      	STD  Y+8,R30
0007a5 940e 09e3 	CALL SUBOPT_0x2A
0007a7 36e4      	CPI  R30,LOW(0x64)
0007a8 e0a0      	LDI  R26,HIGH(0x64)
0007a9 07fa      	CPC  R31,R26
0007aa f021      	BREQ _0x20000A0
0007ab 36e9      	CPI  R30,LOW(0x69)
0007ac e0a0      	LDI  R26,HIGH(0x69)
0007ad 07fa      	CPC  R31,R26
0007ae f419      	BRNE _0x20000A1
                 _0x20000A0:
0007af e0e0      	LDI  R30,LOW(0)
0007b0 87e8      	STD  Y+8,R30
0007b1 c004      	RJMP _0x20000A2
                 _0x20000A1:
0007b2 37e5      	CPI  R30,LOW(0x75)
0007b3 e0a0      	LDI  R26,HIGH(0x75)
0007b4 07fa      	CPC  R31,R26
0007b5 f411      	BRNE _0x20000A3
                 _0x20000A2:
0007b6 e02a      	LDI  R18,LOW(10)
0007b7 c00c      	RJMP _0x200009E
                 _0x20000A3:
0007b8 37e8      	CPI  R30,LOW(0x78)
0007b9 e0a0      	LDI  R26,HIGH(0x78)
0007ba 07fa      	CPC  R31,R26
0007bb f411      	BRNE _0x20000A4
0007bc e120      	LDI  R18,LOW(16)
0007bd c006      	RJMP _0x200009E
                 _0x20000A4:
0007be 32e5      	CPI  R30,LOW(0x25)
0007bf e0a0      	LDI  R26,HIGH(0x25)
0007c0 07fa      	CPC  R31,R26
0007c1 f409      	BRNE _0x20000A7
0007c2 c063      	RJMP _0x20000A6
                 _0x20000A7:
0007c3 c073      	RJMP _0x20A0002
                 _0x200009E:
0007c4 e0e0      	LDI  R30,0
0007c5 83ee      	STD  Y+6,R30
0007c6 83ef      	STD  Y+6+1,R30
                 _0x20000A8:
0007c7 2fe5      	MOV  R30,R21
0007c8 5051      	SUBI R21,1
0007c9 30e0      	CPI  R30,0
0007ca f411      	BRNE PC+3
0007cb 940c 0815 	JMP _0x20000AA
0007cd b7ed      	IN   R30,SPL
0007ce b7fe      	IN   R31,SPH
0007cf 93fa      	ST   -Y,R31
0007d0 93ea      	ST   -Y,R30
0007d1 934f      	PUSH R20
0007d2 940e 09da 	CALL SUBOPT_0x28
0007d4 914f      	POP  R20
0007d5 2f3e      	MOV  R19,R30
0007d6 32e1      	CPI  R30,LOW(0x21)
0007d7 f0b8      	BRLO _0x20000AC
0007d8 85e8      	LDD  R30,Y+8
0007d9 30e0      	CPI  R30,0
0007da f439      	BRNE _0x20000AD
0007db 323d      	CPI  R19,45
0007dc f419      	BRNE _0x20000AE
0007dd efef      	LDI  R30,LOW(255)
0007de 87e8      	STD  Y+8,R30
0007df cfe7      	RJMP _0x20000A8
                 _0x20000AE:
0007e0 e0e1      	LDI  R30,LOW(1)
0007e1 87e8      	STD  Y+8,R30
                 _0x20000AD:
0007e2 3120      	CPI  R18,16
0007e3 f431      	BRNE _0x20000B0
0007e4 933a      	ST   -Y,R19
0007e5 940e 08b1 	CALL _isxdigit
0007e7 30e0      	CPI  R30,0
0007e8 f031      	BREQ _0x20000AC
0007e9 c007      	RJMP _0x20000B2
                 _0x20000B0:
0007ea 933a      	ST   -Y,R19
0007eb 940e 089f 	CALL _isdigit
0007ed 30e0      	CPI  R30,0
0007ee f411      	BRNE _0x20000B3
                 _0x20000AC:
0007ef 2f43      	MOV  R20,R19
0007f0 c024      	RJMP _0x20000AA
                 _0x20000B3:
                 _0x20000B2:
0007f1 3631      	CPI  R19,97
0007f2 f028      	BRLO _0x20000B4
0007f3 940e 09e0 	CALL SUBOPT_0x29
0007f5 e5e7      	LDI  R30,LOW(87)
0007f6 e0f0      	LDI  R31,HIGH(87)
0007f7 c00b      	RJMP _0x20000C0
                 _0x20000B4:
0007f8 3431      	CPI  R19,65
0007f9 f028      	BRLO _0x20000B6
0007fa 940e 09e0 	CALL SUBOPT_0x29
0007fc e3e7      	LDI  R30,LOW(55)
0007fd e0f0      	LDI  R31,HIGH(55)
0007fe c004      	RJMP _0x20000C0
                 _0x20000B6:
0007ff 940e 09e0 	CALL SUBOPT_0x29
000801 e3e0      	LDI  R30,LOW(48)
000802 e0f0      	LDI  R31,HIGH(48)
                 _0x20000C0:
000803 940e 0aa0 	CALL __SWAPW12
000805 1bea      	SUB  R30,R26
000806 2f3e      	MOV  R19,R30
000807 2fe2      	MOV  R30,R18
000808 e0f0      	LDI  R31,0
000809 81ae      	LDD  R26,Y+6
00080a 81bf      	LDD  R27,Y+6+1
00080b 940e 0a64 	CALL __MULW12U
00080d 01df      	MOVW R26,R30
00080e 940e 09e3 	CALL SUBOPT_0x2A
000810 0fea      	ADD  R30,R26
000811 1ffb      	ADC  R31,R27
000812 83ee      	STD  Y+6,R30
000813 83ff      	STD  Y+6+1,R31
000814 cfb2      	RJMP _0x20000A8
                 _0x20000AA:
000815 940e 09e6 	CALL SUBOPT_0x2B
000817 85e8      	LDD  R30,Y+8
000818 e0f0      	LDI  R31,0
000819 fde7      	SBRC R30,7
00081a efff      	SER  R31
00081b 81ae      	LDD  R26,Y+6
00081c 81bf      	LDD  R27,Y+6+1
00081d 940e 0a64 	CALL __MULW12U
00081f 01d8      	MOVW R26,R16
000820 93ed      	ST   X+,R30
000821 93fc      	ST   X,R31
                 _0x2000092:
000822 85e9      	LDD  R30,Y+9
000823 5fef      	SUBI R30,-LOW(1)
000824 87e9      	STD  Y+9,R30
000825 c010      	RJMP _0x20000B8
                 _0x2000082:
                 _0x20000A6:
000826 b7ed      	IN   R30,SPL
000827 b7fe      	IN   R31,SPH
000828 93fa      	ST   -Y,R31
000829 93ea      	ST   -Y,R30
00082a 934f      	PUSH R20
00082b 940e 09da 	CALL SUBOPT_0x28
00082d 914f      	POP  R20
00082e 17e3      	CP   R30,R19
00082f f031      	BREQ _0x20000B9
                 _0x200008E:
000830 85e9      	LDD  R30,Y+9
000831 30e0      	CPI  R30,0
000832 f411      	BRNE _0x20000BA
000833 efef      	LDI  R30,LOW(255)
000834 c003      	RJMP _0x20A0001
                 _0x20000BA:
000835 c001      	RJMP _0x200007A
                 _0x20000B9:
                 _0x20000B8:
                 _0x2000081:
000836 ced6      	RJMP _0x2000078
                 _0x200007A:
                 _0x20A0002:
000837 85e9      	LDD  R30,Y+9
                 _0x20A0001:
000838 940e 0bbd 	CALL __LOADLOCR6
00083a 9660      	ADIW R28,16
00083b 9508      	RET
                 _scanf:
00083c 92ff      	PUSH R15
00083d 2ef8      	MOV  R15,R24
00083e 9722      	SBIW R28,2
00083f 931a      	ST   -Y,R17
000840 930a      	ST   -Y,R16
000841 01de      	MOVW R26,R28
000842 940e 0a4f 	CALL __ADDW2R15
000844 018d      	MOVW R16,R26
000845 e0e0      	LDI  R30,0
000846 83ea      	STD  Y+2,R30
000847 83eb      	STD  Y+2+1,R30
000848 01de      	MOVW R26,R28
000849 9614      	ADIW R26,4
00084a 940e 0a4f 	CALL __ADDW2R15
00084c 940e 0a97 	CALL __GETW1P
00084e 93fa      	ST   -Y,R31
00084f 93ea      	ST   -Y,R30
000850 931a      	ST   -Y,R17
000851 930a      	ST   -Y,R16
000852 01fe      	MOVW R30,R28
000853 9636      	ADIW R30,6
000854 93fa      	ST   -Y,R31
000855 93ea      	ST   -Y,R30
000856 deb0      	RCALL __scanf_G100
000857 8119      	LDD  R17,Y+1
000858 8108      	LDD  R16,Y+0
000859 9624      	ADIW R28,4
00085a 90ff      	POP  R15
00085b 9508      	RET
                 
                 	.CSEG
                 _atoi:
00085c 81b9         	ldd  r27,y+1
00085d 81a8         	ld   r26,y
                 __atoi0:
00085e 91ec         	ld   r30,x
00085f 93ea      	ST   -Y,R30
000860 940e 08a7 	CALL _isspace
000862 23ee         	tst  r30
000863 f011         	breq __atoi1
000864 9611         	adiw r26,1
000865 cff8         	rjmp __atoi0
                 __atoi1:
000866 94e8         	clt
000867 91ec         	ld   r30,x
000868 32ed         	cpi  r30,'-'
000869 f411         	brne __atoi2
00086a 9468         	set
00086b c002         	rjmp __atoi3
                 __atoi2:
00086c 32eb         	cpi  r30,'+'
00086d f409         	brne __atoi4
                 __atoi3:
00086e 9611         	adiw r26,1
                 __atoi4:
00086f 2766         	clr  r22
000870 2777         	clr  r23
                 __atoi5:
000871 91ec         	ld   r30,x
000872 93ea      	ST   -Y,R30
000873 940e 089f 	CALL _isdigit
000875 23ee         	tst  r30
000876 f079         	breq __atoi6
000877 01fb         	movw r30,r22
000878 0f66         	lsl  r22
000879 1f77         	rol  r23
00087a 0f66         	lsl  r22
00087b 1f77         	rol  r23
00087c 0f6e         	add  r22,r30
00087d 1f7f         	adc  r23,r31
00087e 0f66         	lsl  r22
00087f 1f77         	rol  r23
000880 91ed         	ld   r30,x+
000881 27ff         	clr  r31
000882 53e0         	subi r30,'0'
000883 0f6e         	add  r22,r30
000884 1f7f         	adc  r23,r31
000885 cfeb         	rjmp __atoi5
                 __atoi6:
000886 01fb         	movw r30,r22
000887 f41e         	brtc __atoi7
000888 95e0         	com  r30
000889 95f0         	com  r31
00088a 9631         	adiw r30,1
                 __atoi7:
00088b 9622         	adiw r28,2
00088c 9508         	ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcmpf:
00088d 91e9          ld   r30,y+
00088e 91f9          ld   r31,y+
00088f 91a9          ld   r26,y+
000890 91b9          ld   r27,y+
                 strcmpf0:
000891 901d          ld   r1,x+
000892 9005      	lpm  r0,z+
000893 1401          cp   r0,r1
000894 f421          brne strcmpf1
000895 2000          tst  r0
000896 f7d1          brne strcmpf0
                 strcmpf3:
000897 27ee          clr  r30
000898 9508          ret
                 strcmpf1:
000899 1810          sub  r1,r0
00089a f3e1          breq strcmpf3
00089b e0e1          ldi  r30,1
00089c f408          brcc strcmpf2
00089d 50e2          subi r30,2
                 strcmpf2:
00089e 9508          ret
                 
                 	.CSEG
                 _isdigit:
00089f e0e1          ldi  r30,1
0008a0 91f9          ld   r31,y+
0008a1 33f0          cpi  r31,'0'
0008a2 f010          brlo isdigit0
0008a3 33fa          cpi  r31,'9'+1
0008a4 f008          brlo isdigit1
                 isdigit0:
0008a5 27ee          clr  r30
                 isdigit1:
0008a6 9508          ret
                 _isspace:
0008a7 e0e1          ldi  r30,1
0008a8 91f9          ld   r31,y+
0008a9 32f0          cpi  r31,' '
0008aa f029          breq isspace1
0008ab 30f9          cpi  r31,9
0008ac f010          brlo isspace0
0008ad 30fe          cpi  r31,13+1
0008ae f008          brlo isspace1
                 isspace0:
0008af 27ee          clr  r30
                 isspace1:
0008b0 9508          ret
                 _isxdigit:
0008b1 e0e1          ldi  r30,1
0008b2 91f9          ld   r31,y+
0008b3 53f0          subi r31,0x30
0008b4 f040          brcs isxdigit0
0008b5 30fa          cpi  r31,10
0008b6 f038          brcs isxdigit1
0008b7 75ff          andi r31,0x5f
0008b8 50f7          subi r31,7
0008b9 30fa          cpi  r31,10
0008ba f010          brcs isxdigit0
0008bb 31f0          cpi  r31,16
0008bc f008          brcs isxdigit1
                 isxdigit0:
0008bd 27ee          clr  r30
                 isxdigit1:
0008be 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _datax:
000260           	.BYTE 0x32
                 
                 	.ESEG
                 _branka:
000000 00 00     	.DW  0x0
                 _on:
000002 00        	.DB  0x0
                 
                 	.DSEG
                 _bolo_nacita:
000292           	.BYTE 0x1
                 __seed_G101:
000293           	.BYTE 0x4
                 _p_S1020024:
000297           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 28 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0x0:
0008bf 81e8      	LD   R30,Y
0008c0 e0f0      	LDI  R31,0
0008c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0008c2 b1e6      	IN   R30,0x6
0008c3 e0f0      	LDI  R31,0
0008c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0008c5 81ea      	LDD  R30,Y+2
0008c6 93ea      	ST   -Y,R30
0008c7 81ec      	LDD  R30,Y+4
0008c8 93ea      	ST   -Y,R30
0008c9 930a      	ST   -Y,R16
0008ca 940e 00a0 	CALL _inrange
0008cc 30e1      	CPI  R30,LOW(0x1)
0008cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0008ce 85e9      	LDD  R30,Y+9
0008cf 93ea      	ST   -Y,R30
0008d0 81eb      	LDD  R30,Y+3
0008d1 93ea      	ST   -Y,R30
0008d2 930a      	ST   -Y,R16
0008d3 940e 00a0 	CALL _inrange
0008d5 30e1      	CPI  R30,LOW(0x1)
0008d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0008d7 81eb      	LDD  R30,Y+3
0008d8 93ea      	ST   -Y,R30
0008d9 81ed      	LDD  R30,Y+5
0008da 93ea      	ST   -Y,R30
0008db 930a      	ST   -Y,R16
0008dc 940e 00a0 	CALL _inrange
0008de 30e1      	CPI  R30,LOW(0x1)
0008df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0008e0 81ec      	LDD  R30,Y+4
0008e1 93ea      	ST   -Y,R30
0008e2 81ee      	LDD  R30,Y+6
0008e3 93ea      	ST   -Y,R30
0008e4 930a      	ST   -Y,R16
0008e5 940e 00a0 	CALL _inrange
0008e7 30e1      	CPI  R30,LOW(0x1)
0008e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0008e9 81ed      	LDD  R30,Y+5
0008ea 93ea      	ST   -Y,R30
0008eb 81ef      	LDD  R30,Y+7
0008ec 93ea      	ST   -Y,R30
0008ed 930a      	ST   -Y,R16
0008ee 940e 00a0 	CALL _inrange
0008f0 30e1      	CPI  R30,LOW(0x1)
0008f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0008f2 81ee      	LDD  R30,Y+6
0008f3 93ea      	ST   -Y,R30
0008f4 85e8      	LDD  R30,Y+8
0008f5 93ea      	ST   -Y,R30
0008f6 930a      	ST   -Y,R16
0008f7 940e 00a0 	CALL _inrange
0008f9 30e1      	CPI  R30,LOW(0x1)
0008fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
0008fb 81ef      	LDD  R30,Y+7
0008fc 93ea      	ST   -Y,R30
0008fd 85e9      	LDD  R30,Y+9
0008fe 93ea      	ST   -Y,R30
0008ff 930a      	ST   -Y,R16
000900 940e 00a0 	CALL _inrange
000902 30e1      	CPI  R30,LOW(0x1)
000903 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000904 85e8      	LDD  R30,Y+8
000905 93ea      	ST   -Y,R30
000906 85ea      	LDD  R30,Y+10
000907 93ea      	ST   -Y,R30
000908 930a      	ST   -Y,R16
000909 940e 00a0 	CALL _inrange
00090b 30e1      	CPI  R30,LOW(0x1)
00090c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
00090d 940e 09f6 	CALL _i2c_start
00090f ece0      	LDI  R30,LOW(192)
000910 93ea      	ST   -Y,R30
000911 940e 0a2a 	CALL _i2c_write
000913 e1e2      	LDI  R30,LOW(18)
000914 93ea      	ST   -Y,R30
000915 940e 0a2a 	CALL _i2c_write
000917 e5e5      	LDI  R30,LOW(85)
000918 93ea      	ST   -Y,R30
000919 940e 0a2a 	CALL _i2c_write
00091b e5ea      	LDI  R30,LOW(90)
00091c 93ea      	ST   -Y,R30
00091d 940e 0a2a 	CALL _i2c_write
00091f eae5      	LDI  R30,LOW(165)
000920 93ea      	ST   -Y,R30
000921 940c 0a2a 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000923 931a      	ST   -Y,R17
000924 930a      	ST   -Y,R16
000925 81aa      	LDD  R26,Y+2
000926 30a1      	CPI  R26,LOW(0x1)
000927 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000928 940e 09f6 	CALL _i2c_start
00092a ece0      	LDI  R30,LOW(192)
00092b 93ea      	ST   -Y,R30
00092c 940c 0a2a 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
00092e 93ea      	ST   -Y,R30
00092f 940e 0a2a 	CALL _i2c_write
000931 940e 09f6 	CALL _i2c_start
000933 ece1      	LDI  R30,LOW(193)
000934 93ea      	ST   -Y,R30
000935 940c 0a2a 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
000937 93ea      	ST   -Y,R30
000938 940e 01a4 	CALL _cmps03_read
00093a 01df      	MOVW R26,R30
00093b 81eb      	LDD  R30,Y+3
00093c 81fc      	LDD  R31,Y+3+1
00093d 1bae      	SUB  R26,R30
00093e 0bbf      	SBC  R27,R31
00093f 018d      	MOVW R16,R26
000940 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
000941 01f8      	MOVW R30,R16
000942 85aa      	LDD  R26,Y+10
000943 85bb      	LDD  R27,Y+10+1
000944 0fae      	ADD  R26,R30
000945 1fbf      	ADC  R27,R31
000946 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x10:
000947 e6e0      	LDI  R30,LOW(_datax)
000948 e0f2      	LDI  R31,HIGH(_datax)
000949 93fa      	ST   -Y,R31
00094a 93ea      	ST   -Y,R30
00094b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00094c 01fe      	MOVW R30,R28
00094d 9632      	ADIW R30,2
00094e 93fa      	ST   -Y,R31
00094f 93ea      	ST   -Y,R30
000950 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
000951 81a8      	LD   R26,Y
000952 81b9      	LDD  R27,Y+1
000953 940e 0bb2 	CALL __CPW02
000955 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x13:
000956 81a8      	LD   R26,Y
000957 81b9      	LDD  R27,Y+1
000958 efef      	LDI  R30,LOW(65535)
000959 efff      	LDI  R31,HIGH(65535)
00095a 940e 0a6c 	CALL __MULW12
00095c 83e8      	ST   Y,R30
00095d 83f9      	STD  Y+1,R31
00095e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x14:
00095f 940e 0a53 	CALL __ANEGW1
000961 93fa      	ST   -Y,R31
000962 93ea      	ST   -Y,R30
000963 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x15:
000964 940e 026e 	CALL _motor1
000966 cf58      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x16:
000967 940e 029a 	CALL _motor2
000969 cf55      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x17:
00096a 93fa      	ST   -Y,R31
00096b 93ea      	ST   -Y,R30
00096c 940e 0284 	CALL _motor3
00096e cf50      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x18:
00096f 93fa      	ST   -Y,R31
000970 93ea      	ST   -Y,R30
000971 940c 02af 	JMP  _motor4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
000973 e0e0      	LDI  R30,LOW(0)
000974 e0f0      	LDI  R31,HIGH(0)
000975 93fa      	ST   -Y,R31
000976 93ea      	ST   -Y,R30
000977 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000978 940e 029a 	CALL _motor2
00097a e0e0      	LDI  R30,LOW(0)
00097b e0f0      	LDI  R31,HIGH(0)
00097c cfed      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
00097d 940e 026e 	CALL _motor1
00097f cff3      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1C:
000980 940e 0284 	CALL _motor3
000982 e0e0      	LDI  R30,LOW(0)
000983 e0f0      	LDI  R31,HIGH(0)
000984 cfea      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
000985 81a8      	LD   R26,Y
000986 81b9      	LDD  R27,Y+1
000987 e0e3      	LDI  R30,LOW(3)
000988 e0f0      	LDI  R31,HIGH(3)
000989 940e 0a84 	CALL __DIVW21
00098b 93fa      	ST   -Y,R31
00098c 93ea      	ST   -Y,R30
00098d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
00098e ece8      	LDI  R30,LOW(200)
00098f e0f0      	LDI  R31,HIGH(200)
000990 93fa      	ST   -Y,R31
000991 93ea      	ST   -Y,R30
000992 940c 0a43 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1F:
000994 e0f0      	LDI  R31,0
000995 93fa      	ST   -Y,R31
000996 93ea      	ST   -Y,R30
000997 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x20:
000998 2da4      	MOV  R26,R4
000999 e0b0      	LDI  R27,0
00099a e0ea      	LDI  R30,LOW(10)
00099b e0f0      	LDI  R31,HIGH(10)
00099c 940e 0aa0 	CALL __SWAPW12
00099e 1bea      	SUB  R30,R26
00099f 0bfb      	SBC  R31,R27
0009a0 93ea      	ST   -Y,R30
0009a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x21:
0009a2 93fa      	ST   -Y,R31
0009a3 93ea      	ST   -Y,R30
0009a4 940e 088d 	CALL _strcmpf
0009a6 30e0      	CPI  R30,0
0009a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
0009a8 ece8      	LDI  R30,LOW(200)
0009a9 93ea      	ST   -Y,R30
0009aa 940c 00c4 	JMP  _maxx
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x23:
0009ac e0a0      	LDI  R26,LOW(_branka)
0009ad e0b0      	LDI  R27,HIGH(_branka)
0009ae 940e 0aa7 	CALL __EEPROMRDW
0009b0 93fa      	ST   -Y,R31
0009b1 93ea      	ST   -Y,R30
0009b2 e0e1      	LDI  R30,LOW(1)
0009b3 93ea      	ST   -Y,R30
0009b4 940e 01e2 	CALL _prepocetcompasu
0009b6 940e 0a5f 	CALL __CWD1
0009b8 940e 0b36 	CALL __CDF1
                +
0009ba e8af     +LDI R26 , LOW ( 0x3F35C28F )
0009bb ecb2     +LDI R27 , HIGH ( 0x3F35C28F )
0009bc e385     +LDI R24 , BYTE3 ( 0x3F35C28F )
0009bd e39f     +LDI R25 , BYTE4 ( 0x3F35C28F )
                 	__GETD2N 0x3F35C28F
0009be 940e 0b64 	CALL __MULF12
0009c0 940e 0aff 	CALL __CFD1
0009c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
                +
0009c3 e6ea     +LDI R30 , LOW ( _datax + 10 )
0009c4 e0f2     +LDI R31 , HIGH ( _datax + 10 )
                 	__POINTW1MN _datax,10
0009c5 93fa      	ST   -Y,R31
0009c6 93ea      	ST   -Y,R30
0009c7 940c 085c 	JMP  _atoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
0009c9 93fa      	ST   -Y,R31
0009ca 93ea      	ST   -Y,R30
0009cb 940c 0a43 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x26:
0009cd 93ea      	ST   -Y,R30
0009ce 940e 01a4 	CALL _cmps03_read
0009d0 e0a0      	LDI  R26,LOW(_branka)
0009d1 e0b0      	LDI  R27,HIGH(_branka)
0009d2 940e 0ab7 	CALL __EEPROMWRW
0009d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
0009d5 933a      	ST   -Y,R19
0009d6 940e 08a7 	CALL _isspace
0009d8 30e0      	CPI  R30,0
0009d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x28:
0009da 85ec      	LDD  R30,Y+12
0009db 85fd      	LDD  R31,Y+12+1
0009dc 93fa      	ST   -Y,R31
0009dd 93ea      	ST   -Y,R30
0009de 940c 06e5 	JMP  __get_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
0009e0 2fa3      	MOV  R26,R19
0009e1 e0b0      	LDI  R27,0
0009e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
0009e3 2fe3      	MOV  R30,R19
0009e4 e0f0      	LDI  R31,0
0009e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2B:
0009e6 85ec      	LDD  R30,Y+12
0009e7 85fd      	LDD  R31,Y+12+1
0009e8 9734      	SBIW R30,4
0009e9 87ec      	STD  Y+12,R30
0009ea 87fd      	STD  Y+12+1,R31
0009eb 85ac      	LDD  R26,Y+12
0009ec 85bd      	LDD  R27,Y+12+1
0009ed 9614      	ADIW R26,4
0009ee 910d      	LD   R16,X+
0009ef 911c      	LD   R17,X
0009f0 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
0009f1 9892      	cbi  __i2c_port,__scl_bit
0009f2 9893      	cbi  __i2c_port,__sda_bit
0009f3 9a8a      	sbi  __i2c_dir,__scl_bit
0009f4 988b      	cbi  __i2c_dir,__sda_bit
0009f5 c015      	rjmp __i2c_delay2
                 _i2c_start:
0009f6 988b      	cbi  __i2c_dir,__sda_bit
0009f7 988a      	cbi  __i2c_dir,__scl_bit
0009f8 27ee      	clr  r30
0009f9 0000      	nop
0009fa 9b83      	sbis __i2c_pin,__sda_bit
0009fb 9508      	ret
0009fc 9b82      	sbis __i2c_pin,__scl_bit
0009fd 9508      	ret
0009fe d004      	rcall __i2c_delay1
0009ff 9a8b      	sbi  __i2c_dir,__sda_bit
000a00 d002      	rcall __i2c_delay1
000a01 9a8a      	sbi  __i2c_dir,__scl_bit
000a02 e0e1      	ldi  r30,1
                 __i2c_delay1:
000a03 e162      	ldi  r22,18
000a04 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000a05 9a8b      	sbi  __i2c_dir,__sda_bit
000a06 9a8a      	sbi  __i2c_dir,__scl_bit
000a07 d003      	rcall __i2c_delay2
000a08 988a      	cbi  __i2c_dir,__scl_bit
000a09 dff9      	rcall __i2c_delay1
000a0a 988b      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000a0b e265      	ldi  r22,37
                 __i2c_delay2l:
000a0c 956a      	dec  r22
000a0d f7f1      	brne __i2c_delay2l
000a0e 9508      	ret
                 _i2c_read:
000a0f e078      	ldi  r23,8
                 __i2c_read0:
000a10 988a      	cbi  __i2c_dir,__scl_bit
000a11 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000a12 9b82      	sbis __i2c_pin,__scl_bit
000a13 cffe      	rjmp __i2c_read3
000a14 dfee      	rcall __i2c_delay1
000a15 9488      	clc
000a16 9983      	sbic __i2c_pin,__sda_bit
000a17 9408      	sec
000a18 9a8a      	sbi  __i2c_dir,__scl_bit
000a19 dff1      	rcall __i2c_delay2
000a1a 1fee      	rol  r30
000a1b 957a      	dec  r23
000a1c f799      	brne __i2c_read0
000a1d 9179      	ld   r23,y+
000a1e 2377      	tst  r23
000a1f f411      	brne __i2c_read1
000a20 988b      	cbi  __i2c_dir,__sda_bit
000a21 c001      	rjmp __i2c_read2
                 __i2c_read1:
000a22 9a8b      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000a23 dfdf      	rcall __i2c_delay1
000a24 988a      	cbi  __i2c_dir,__scl_bit
000a25 dfe5      	rcall __i2c_delay2
000a26 9a8a      	sbi  __i2c_dir,__scl_bit
000a27 dfdb      	rcall __i2c_delay1
000a28 988b      	cbi  __i2c_dir,__sda_bit
000a29 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000a2a 91e9      	ld   r30,y+
000a2b e078      	ldi  r23,8
                 __i2c_write0:
000a2c 0fee      	lsl  r30
000a2d f410      	brcc __i2c_write1
000a2e 988b      	cbi  __i2c_dir,__sda_bit
000a2f c001      	rjmp __i2c_write2
                 __i2c_write1:
000a30 9a8b      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000a31 dfd9      	rcall __i2c_delay2
000a32 988a      	cbi  __i2c_dir,__scl_bit
000a33 dfcf      	rcall __i2c_delay1
                 __i2c_write3:
000a34 9b82      	sbis __i2c_pin,__scl_bit
000a35 cffe      	rjmp __i2c_write3
000a36 dfcc      	rcall __i2c_delay1
000a37 9a8a      	sbi  __i2c_dir,__scl_bit
000a38 957a      	dec  r23
000a39 f791      	brne __i2c_write0
000a3a 988b      	cbi  __i2c_dir,__sda_bit
000a3b dfc7      	rcall __i2c_delay1
000a3c 988a      	cbi  __i2c_dir,__scl_bit
000a3d dfcd      	rcall __i2c_delay2
000a3e e0e1      	ldi  r30,1
000a3f 9983      	sbic __i2c_pin,__sda_bit
000a40 27ee      	clr  r30
000a41 9a8a      	sbi  __i2c_dir,__scl_bit
000a42 9508      	ret
                 
                 _delay_ms:
000a43 91e9      	ld   r30,y+
000a44 91f9      	ld   r31,y+
000a45 9630      	adiw r30,0
000a46 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000a47 ec8d     +LDI R24 , LOW ( 0xACD )
000a48 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000a49 9701     +SBIW R24 , 1
000a4a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000a4b 95a8      	wdr
000a4c 9731      	sbiw r30,1
000a4d f7c9      	brne __delay_ms0
                 __delay_ms1:
000a4e 9508      	ret
                 
                 __ADDW2R15:
000a4f 2400      	CLR  R0
000a50 0daf      	ADD  R26,R15
000a51 1db0      	ADC  R27,R0
000a52 9508      	RET
                 
                 __ANEGW1:
000a53 95f1      	NEG  R31
000a54 95e1      	NEG  R30
000a55 40f0      	SBCI R31,0
000a56 9508      	RET
                 
                 __ANEGD1:
000a57 95f0      	COM  R31
000a58 9560      	COM  R22
000a59 9570      	COM  R23
000a5a 95e1      	NEG  R30
000a5b 4fff      	SBCI R31,-1
000a5c 4f6f      	SBCI R22,-1
000a5d 4f7f      	SBCI R23,-1
000a5e 9508      	RET
                 
                 __CWD1:
000a5f 2f6f      	MOV  R22,R31
000a60 0f66      	ADD  R22,R22
000a61 0b66      	SBC  R22,R22
000a62 2f76      	MOV  R23,R22
000a63 9508      	RET
                 
                 __MULW12U:
000a64 9ffa      	MUL  R31,R26
000a65 2df0      	MOV  R31,R0
000a66 9feb      	MUL  R30,R27
000a67 0df0      	ADD  R31,R0
000a68 9fea      	MUL  R30,R26
000a69 2de0      	MOV  R30,R0
000a6a 0df1      	ADD  R31,R1
000a6b 9508      	RET
                 
                 __MULW12:
000a6c d01c      	RCALL __CHKSIGNW
000a6d dff6      	RCALL __MULW12U
000a6e f40e      	BRTC __MULW121
000a6f dfe3      	RCALL __ANEGW1
                 __MULW121:
000a70 9508      	RET
                 
                 __DIVW21U:
000a71 2400      	CLR  R0
000a72 2411      	CLR  R1
000a73 e190      	LDI  R25,16
                 __DIVW21U1:
000a74 0faa      	LSL  R26
000a75 1fbb      	ROL  R27
000a76 1c00      	ROL  R0
000a77 1c11      	ROL  R1
000a78 1a0e      	SUB  R0,R30
000a79 0a1f      	SBC  R1,R31
000a7a f418      	BRCC __DIVW21U2
000a7b 0e0e      	ADD  R0,R30
000a7c 1e1f      	ADC  R1,R31
000a7d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000a7e 60a1      	SBR  R26,1
                 __DIVW21U3:
000a7f 959a      	DEC  R25
000a80 f799      	BRNE __DIVW21U1
000a81 01fd      	MOVW R30,R26
000a82 01d0      	MOVW R26,R0
000a83 9508      	RET
                 
                 __DIVW21:
000a84 d004      	RCALL __CHKSIGNW
000a85 dfeb      	RCALL __DIVW21U
000a86 f40e      	BRTC __DIVW211
000a87 dfcb      	RCALL __ANEGW1
                 __DIVW211:
000a88 9508      	RET
                 
                 __CHKSIGNW:
000a89 94e8      	CLT
000a8a fff7      	SBRS R31,7
000a8b c002      	RJMP __CHKSW1
000a8c dfc6      	RCALL __ANEGW1
000a8d 9468      	SET
                 __CHKSW1:
000a8e ffb7      	SBRS R27,7
000a8f c006      	RJMP __CHKSW2
000a90 95a0      	COM  R26
000a91 95b0      	COM  R27
000a92 9611      	ADIW R26,1
000a93 f800      	BLD  R0,0
000a94 9403      	INC  R0
000a95 fa00      	BST  R0,0
                 __CHKSW2:
000a96 9508      	RET
                 
                 __GETW1P:
000a97 91ed      	LD   R30,X+
000a98 91fc      	LD   R31,X
000a99 9711      	SBIW R26,1
000a9a 9508      	RET
                 
                 __PUTPARD1:
000a9b 937a      	ST   -Y,R23
000a9c 936a      	ST   -Y,R22
000a9d 93fa      	ST   -Y,R31
000a9e 93ea      	ST   -Y,R30
000a9f 9508      	RET
                 
                 __SWAPW12:
000aa0 2e1b      	MOV  R1,R27
000aa1 2fbf      	MOV  R27,R31
000aa2 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000aa3 2e1a      	MOV  R1,R26
000aa4 2fae      	MOV  R26,R30
000aa5 2de1      	MOV  R30,R1
000aa6 9508      	RET
                 
                 __EEPROMRDW:
000aa7 9611      	ADIW R26,1
000aa8 d002      	RCALL __EEPROMRDB
000aa9 2ffe      	MOV  R31,R30
000aaa 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000aab 99e1      	SBIC EECR,EEWE
000aac cffe      	RJMP __EEPROMRDB
000aad 93ff      	PUSH R31
000aae b7ff      	IN   R31,SREG
000aaf 94f8      	CLI
000ab0 bbae      	OUT  EEARL,R26
000ab1 bbbf      	OUT  EEARH,R27
000ab2 9ae0      	SBI  EECR,EERE
000ab3 b3ed      	IN   R30,EEDR
000ab4 bfff      	OUT  SREG,R31
000ab5 91ff      	POP  R31
000ab6 9508      	RET
                 
                 __EEPROMWRW:
000ab7 d007      	RCALL __EEPROMWRB
000ab8 9611      	ADIW R26,1
000ab9 93ef      	PUSH R30
000aba 2fef      	MOV  R30,R31
000abb d003      	RCALL __EEPROMWRB
000abc 91ef      	POP  R30
000abd 9711      	SBIW R26,1
000abe 9508      	RET
                 
                 __EEPROMWRB:
000abf 9be1      	SBIS EECR,EEWE
000ac0 c002      	RJMP __EEPROMWRB1
000ac1 95a8      	WDR
000ac2 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000ac3 b79f      	IN   R25,SREG
000ac4 94f8      	CLI
000ac5 bbae      	OUT  EEARL,R26
000ac6 bbbf      	OUT  EEARH,R27
000ac7 9ae0      	SBI  EECR,EERE
000ac8 b38d      	IN   R24,EEDR
000ac9 17e8      	CP   R30,R24
000aca f019      	BREQ __EEPROMWRB0
000acb bbed      	OUT  EEDR,R30
000acc 9ae2      	SBI  EECR,EEMWE
000acd 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000ace bf9f      	OUT  SREG,R25
000acf 9508      	RET
                 
                 __ROUND_REPACK:
000ad0 2355      	TST  R21
000ad1 f442      	BRPL __REPACK
000ad2 3850      	CPI  R21,0x80
000ad3 f411      	BRNE __ROUND_REPACK0
000ad4 ffe0      	SBRS R30,0
000ad5 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000ad6 9631      	ADIW R30,1
000ad7 1f69      	ADC  R22,R25
000ad8 1f79      	ADC  R23,R25
000ad9 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000ada e850      	LDI  R21,0x80
000adb 2757      	EOR  R21,R23
000adc f411      	BRNE __REPACK0
000add 935f      	PUSH R21
000ade c073      	RJMP __ZERORES
                 __REPACK0:
000adf 3f5f      	CPI  R21,0xFF
000ae0 f031      	BREQ __REPACK1
000ae1 0f66      	LSL  R22
000ae2 0c00      	LSL  R0
000ae3 9557      	ROR  R21
000ae4 9567      	ROR  R22
000ae5 2f75      	MOV  R23,R21
000ae6 9508      	RET
                 __REPACK1:
000ae7 935f      	PUSH R21
000ae8 2000      	TST  R0
000ae9 f00a      	BRMI __REPACK2
000aea c073      	RJMP __MAXRES
                 __REPACK2:
000aeb c06c      	RJMP __MINRES
                 
                 __UNPACK:
000aec e850      	LDI  R21,0x80
000aed 2e19      	MOV  R1,R25
000aee 2215      	AND  R1,R21
000aef 0f88      	LSL  R24
000af0 1f99      	ROL  R25
000af1 2795      	EOR  R25,R21
000af2 0f55      	LSL  R21
000af3 9587      	ROR  R24
                 
                 __UNPACK1:
000af4 e850      	LDI  R21,0x80
000af5 2e07      	MOV  R0,R23
000af6 2205      	AND  R0,R21
000af7 0f66      	LSL  R22
000af8 1f77      	ROL  R23
000af9 2775      	EOR  R23,R21
000afa 0f55      	LSL  R21
000afb 9567      	ROR  R22
000afc 9508      	RET
                 
                 __CFD1U:
000afd 9468      	SET
000afe c001      	RJMP __CFD1U0
                 __CFD1:
000aff 94e8      	CLT
                 __CFD1U0:
000b00 935f      	PUSH R21
000b01 dff2      	RCALL __UNPACK1
000b02 3870      	CPI  R23,0x80
000b03 f018      	BRLO __CFD10
000b04 3f7f      	CPI  R23,0xFF
000b05 f408      	BRCC __CFD10
000b06 c04b      	RJMP __ZERORES
                 __CFD10:
000b07 e156      	LDI  R21,22
000b08 1b57      	SUB  R21,R23
000b09 f4aa      	BRPL __CFD11
000b0a 9551      	NEG  R21
000b0b 3058      	CPI  R21,8
000b0c f40e      	BRTC __CFD19
000b0d 3059      	CPI  R21,9
                 __CFD19:
000b0e f030      	BRLO __CFD17
000b0f efef      	SER  R30
000b10 efff      	SER  R31
000b11 ef6f      	SER  R22
000b12 e77f      	LDI  R23,0x7F
000b13 f977      	BLD  R23,7
000b14 c01a      	RJMP __CFD15
                 __CFD17:
000b15 2777      	CLR  R23
000b16 2355      	TST  R21
000b17 f0b9      	BREQ __CFD15
                 __CFD18:
000b18 0fee      	LSL  R30
000b19 1fff      	ROL  R31
000b1a 1f66      	ROL  R22
000b1b 1f77      	ROL  R23
000b1c 955a      	DEC  R21
000b1d f7d1      	BRNE __CFD18
000b1e c010      	RJMP __CFD15
                 __CFD11:
000b1f 2777      	CLR  R23
                 __CFD12:
000b20 3058      	CPI  R21,8
000b21 f028      	BRLO __CFD13
000b22 2fef      	MOV  R30,R31
000b23 2ff6      	MOV  R31,R22
000b24 2f67      	MOV  R22,R23
000b25 5058      	SUBI R21,8
000b26 cff9      	RJMP __CFD12
                 __CFD13:
000b27 2355      	TST  R21
000b28 f031      	BREQ __CFD15
                 __CFD14:
000b29 9576      	LSR  R23
000b2a 9567      	ROR  R22
000b2b 95f7      	ROR  R31
000b2c 95e7      	ROR  R30
000b2d 955a      	DEC  R21
000b2e f7d1      	BRNE __CFD14
                 __CFD15:
000b2f 2000      	TST  R0
000b30 f40a      	BRPL __CFD16
000b31 df25      	RCALL __ANEGD1
                 __CFD16:
000b32 915f      	POP  R21
000b33 9508      	RET
                 
                 __CDF1U:
000b34 9468      	SET
000b35 c001      	RJMP __CDF1U0
                 __CDF1:
000b36 94e8      	CLT
                 __CDF1U0:
000b37 9730      	SBIW R30,0
000b38 4060      	SBCI R22,0
000b39 4070      	SBCI R23,0
000b3a f0b1      	BREQ __CDF10
000b3b 2400      	CLR  R0
000b3c f026      	BRTS __CDF11
000b3d 2377      	TST  R23
000b3e f412      	BRPL __CDF11
000b3f 9400      	COM  R0
000b40 df16      	RCALL __ANEGD1
                 __CDF11:
000b41 2e17      	MOV  R1,R23
000b42 e17e      	LDI  R23,30
000b43 2011      	TST  R1
                 __CDF12:
000b44 f032      	BRMI __CDF13
000b45 957a      	DEC  R23
000b46 0fee      	LSL  R30
000b47 1fff      	ROL  R31
000b48 1f66      	ROL  R22
000b49 1c11      	ROL  R1
000b4a cff9      	RJMP __CDF12
                 __CDF13:
000b4b 2fef      	MOV  R30,R31
000b4c 2ff6      	MOV  R31,R22
000b4d 2d61      	MOV  R22,R1
000b4e 935f      	PUSH R21
000b4f df8a      	RCALL __REPACK
000b50 915f      	POP  R21
                 __CDF10:
000b51 9508      	RET
                 
                 __ZERORES:
000b52 27ee      	CLR  R30
000b53 27ff      	CLR  R31
000b54 2766      	CLR  R22
000b55 2777      	CLR  R23
000b56 915f      	POP  R21
000b57 9508      	RET
                 
                 __MINRES:
000b58 efef      	SER  R30
000b59 efff      	SER  R31
000b5a e76f      	LDI  R22,0x7F
000b5b ef7f      	SER  R23
000b5c 915f      	POP  R21
000b5d 9508      	RET
                 
                 __MAXRES:
000b5e efef      	SER  R30
000b5f efff      	SER  R31
000b60 e76f      	LDI  R22,0x7F
000b61 e77f      	LDI  R23,0x7F
000b62 915f      	POP  R21
000b63 9508      	RET
                 
                 __MULF12:
000b64 935f      	PUSH R21
000b65 df86      	RCALL __UNPACK
000b66 3870      	CPI  R23,0x80
000b67 f351      	BREQ __ZERORES
000b68 3890      	CPI  R25,0x80
000b69 f341      	BREQ __ZERORES
000b6a 2401      	EOR  R0,R1
000b6b 9408      	SEC
000b6c 1f79      	ADC  R23,R25
000b6d f423      	BRVC __MULF124
000b6e f31c      	BRLT __ZERORES
                 __MULF125:
000b6f 2000      	TST  R0
000b70 f33a      	BRMI __MINRES
000b71 cfec      	RJMP __MAXRES
                 __MULF124:
000b72 920f      	PUSH R0
000b73 931f      	PUSH R17
000b74 932f      	PUSH R18
000b75 933f      	PUSH R19
000b76 934f      	PUSH R20
000b77 2711      	CLR  R17
000b78 2722      	CLR  R18
000b79 2799      	CLR  R25
000b7a 9f68      	MUL  R22,R24
000b7b 01a0      	MOVW R20,R0
000b7c 9f8f      	MUL  R24,R31
000b7d 2d30      	MOV  R19,R0
000b7e 0d41      	ADD  R20,R1
000b7f 1f59      	ADC  R21,R25
000b80 9f6b      	MUL  R22,R27
000b81 0d30      	ADD  R19,R0
000b82 1d41      	ADC  R20,R1
000b83 1f59      	ADC  R21,R25
000b84 9f8e      	MUL  R24,R30
000b85 d027      	RCALL __MULF126
000b86 9fbf      	MUL  R27,R31
000b87 d025      	RCALL __MULF126
000b88 9f6a      	MUL  R22,R26
000b89 d023      	RCALL __MULF126
000b8a 9fbe      	MUL  R27,R30
000b8b d01d      	RCALL __MULF127
000b8c 9faf      	MUL  R26,R31
000b8d d01b      	RCALL __MULF127
000b8e 9fae      	MUL  R26,R30
000b8f 0d11      	ADD  R17,R1
000b90 1f29      	ADC  R18,R25
000b91 1f39      	ADC  R19,R25
000b92 1f49      	ADC  R20,R25
000b93 1f59      	ADC  R21,R25
000b94 2fe3      	MOV  R30,R19
000b95 2ff4      	MOV  R31,R20
000b96 2f65      	MOV  R22,R21
000b97 2f52      	MOV  R21,R18
000b98 914f      	POP  R20
000b99 913f      	POP  R19
000b9a 912f      	POP  R18
000b9b 911f      	POP  R17
000b9c 900f      	POP  R0
000b9d 2366      	TST  R22
000b9e f02a      	BRMI __MULF122
000b9f 0f55      	LSL  R21
000ba0 1fee      	ROL  R30
000ba1 1fff      	ROL  R31
000ba2 1f66      	ROL  R22
000ba3 c002      	RJMP __MULF123
                 __MULF122:
000ba4 9573      	INC  R23
000ba5 f24b      	BRVS __MULF125
                 __MULF123:
000ba6 df29      	RCALL __ROUND_REPACK
000ba7 915f      	POP  R21
000ba8 9508      	RET
                 
                 __MULF127:
000ba9 0d10      	ADD  R17,R0
000baa 1d21      	ADC  R18,R1
000bab 1f39      	ADC  R19,R25
000bac c002      	RJMP __MULF128
                 __MULF126:
000bad 0d20      	ADD  R18,R0
000bae 1d31      	ADC  R19,R1
                 __MULF128:
000baf 1f49      	ADC  R20,R25
000bb0 1f59      	ADC  R21,R25
000bb1 9508      	RET
                 
                 __CPW02:
000bb2 2400      	CLR  R0
000bb3 160a      	CP   R0,R26
000bb4 060b      	CPC  R0,R27
000bb5 9508      	RET
                 
                 __SAVELOCR6:
000bb6 935a      	ST   -Y,R21
                 __SAVELOCR5:
000bb7 934a      	ST   -Y,R20
                 __SAVELOCR4:
000bb8 933a      	ST   -Y,R19
                 __SAVELOCR3:
000bb9 932a      	ST   -Y,R18
                 __SAVELOCR2:
000bba 931a      	ST   -Y,R17
000bbb 930a      	ST   -Y,R16
000bbc 9508      	RET
                 
                 __LOADLOCR6:
000bbd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000bbe 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000bbf 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000bc0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000bc1 8119      	LDD  R17,Y+1
000bc2 8108      	LD   R16,Y
000bc3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  43 r1 :  25 r2 :   0 r3 :   0 r4 :  15 r5 :  18 r6 :   7 r7 :   9 
r8 :   3 r9 :   1 r10:   0 r11:   0 r12:   3 r13:  17 r14:   0 r15:   4 
r16:  61 r17:  95 r18:  19 r19:  35 r20:  29 r21:  60 r22:  51 r23:  48 
r24:  21 r25:  25 r26: 256 r27:  72 r28:  30 r29:   1 r30: 700 r31: 266 
x  :  28 y  : 453 z  :  11 
Registers used: 30 out of 35 (85.7%)

ATmega32 instruction use summary:
adc   :  26 add   :  20 adiw  :  34 and   :   2 andi  :   4 asr   :   0 
bclr  :   0 bld   :   2 brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   4 
break :   0 breq  :  31 brge  :  15 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :  22 brlt  :   8 brmi  :   4 brne  : 134 brpl  :   6 
brsh  :   9 brtc  :   4 brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 
bst   :   1 call  : 240 cbi   :  38 cbr   :   0 clc   :   1 clh   :   0 
cli   :   3 cln   :   0 clr   :  34 cls   :   0 clt   :   4 clv   :   0 
clz   :   0 com   :   8 cp    :  27 cpc   :  79 cpi   : 139 cpse  :   0 
dec   :   9 des   :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :  21 inc   :   2 jmp   :  49 ld    :  47 
ldd   : 148 ldi   : 348 lds   :   1 lpm   :  11 lsl   :  14 lsr   :   1 
mov   :  70 movw  :  30 mul   :  12 muls  :   1 mulsu :   0 neg   :   4 
nop   :   1 or    :   0 ori   :   4 out   :  64 pop   :  22 push  :  21 
rcall : 136 ret   :  84 reti  :   0 rjmp  : 188 rol   :  18 ror   :   7 
sbc   :   6 sbci  :  15 sbi   :  31 sbic  :   7 sbis  :   8 sbiw  :  29 
sbr   :   1 sbrc  :   1 sbrs  :   3 sec   :   2 seh   :   0 sei   :   0 
sen   :   0 ser   :  11 ses   :   0 set   :   4 sev   :   0 sez   :   0 
sleep :   0 spm   :   0 st    : 223 std   :  64 sts   :   1 sub   :   8 
subi  :  18 swap  :   0 tst   :  15 wdr   :   2 
Instructions used: 77 out of 112 (68.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001788   5926     98   6024   32768  18.4%
[.dseg] 0x000060 0x000299      0     57     57    2048   2.8%
[.eseg] 0x000000 0x000003      0      3      3    1024   0.3%

Assembly complete, 0 errors, 11 warnings
